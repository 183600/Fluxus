// Generated by HyperStatic/CXX Compiler
#include <tuple>
#include <sstream>
#include <algorithm>
#include <memory>
#include <vector>
#include <string>
#include <iostream>

// DEBUG: Starting function generation for: fibonacci

// DEBUG: Function has 1 body statements

// Processing expression: Comparison

// Processing expression: Variable

// Processing expression: Literal

// Processing expression: Variable

// Processing expression: BinaryOp

// Processing binary operation: OpAdd

// Processing expression: Call

// About to call generatePythonCall

int __debug_generatePythonCall_called = 1;

// Processing expression: Variable

// Processing expression: BinaryOp

// Processing binary operation: OpSub

// Processing expression: Variable

// Generated left operand: CppVar "n"

// Processing expression: Literal

// Generated right operand: CppLiteral (CppIntLit 1)

// Generated binary operation result: CppBinary "-" (CppVar "n") (CppLiteral (CppIntLit 1))

// Function call: fibonacci with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<no-file>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyBinaryOp OpSub (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyVar (Identifier "n")}) (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyInt 1)})})}

int __debug_fibonacci = 42;

int __debug_fibonacci_args = 1;

// Regular function call: fibonacci

int __debug_fibonacci_result = 1;

// Returned from generatePythonCall

// Generated left operand: CppCall (CppVar "fibonacci") [CppBinary "-" (CppVar "n") (CppLiteral (CppIntLit 1))]

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: BinaryOp

// Processing binary operation: OpSub

// Processing expression: Variable

// Generated left operand: CppVar "n"

// Processing expression: Literal

// Generated right operand: CppLiteral (CppIntLit 2)

// Generated binary operation result: CppBinary "-" (CppVar "n") (CppLiteral (CppIntLit 2))

// Function call: fibonacci with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<no-file>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyBinaryOp OpSub (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyVar (Identifier "n")}) (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyInt 2)})})}

// Regular function call: fibonacci

// Returned from generatePythonCall

// Generated right operand: CppCall (CppVar "fibonacci") [CppBinary "-" (CppVar "n") (CppLiteral (CppIntLit 2))]

// Generated binary operation result: CppBinary "+" (CppCall (CppVar "fibonacci") [CppBinary "-" (CppVar "n") (CppLiteral (CppIntLit 1))]) (CppCall (CppVar "fibonacci") [CppBinary "-" (CppVar "n") (CppLiteral (CppIntLit 2))])

// DEBUG: Generated 1 C++ statements

auto fibonacci(auto n) {
    if (n <= 1) {
return n;
} else {
return fibonacci(n - 1) + fibonacci(n - 2);
}
}

// DEBUG: Starting function generation for: main

// DEBUG: Function has 1 body statements

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: Literal

// Function call: range with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyInt 10)})}

int __debug_range = 42;

int __debug_range_args = 1;

// Returned from generatePythonCall

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: Variable

// Function call: fibonacci with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyVar (Identifier "i")})}

// Regular function call: fibonacci

// Returned from generatePythonCall

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: Literal

// Processing expression: Variable

// Processing expression: Literal

// Processing expression: Variable

// Function call: print with 4 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyString "fib(")})}

// Python argument 1: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyVar (Identifier "i")})}

// Python argument 2: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyString ") = ")})}

// Python argument 3: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyVar (Identifier "result")})}

int __debug_print = 42;

int __debug_print_args = 4;

// print function called with 4 arguments

// print argument 0: CppLiteral (CppStringLit "fib(")

// print argument 1: CppVar "i"

// print argument 2: CppLiteral (CppStringLit ") = ")

// print argument 3: CppVar "result"

// Returned from generatePythonCall

// Processing expression: Literal

// DEBUG: Generated 1 C++ statements

int main() {
    for (int i = 0; i < 10;++i) {
auto result = fibonacci(i);
std::cout << "fib(" << " " << i << " " << ") = " << " " << result << std::endl;
}
    return 0;
}

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Function call: main with 0 args

int __debug_main = 42;

int __debug_main_args = 0;

// Regular function call: main

int __debug_main_result = 1;

// Returned from generatePythonCall

