// Generated by HyperStatic/CXX Compiler
#include <chrono>
#include <atomic>
#include <functional>
#include <vector>
#include <queue>
#include <condition_variable>
#include <mutex>
#include <thread>
#include <string>
#include <iostream>

// Generating C++ for Go package: main
template<typename T>
class Channel {
    std::queue<T> queue_;

    std::mutex mutex_;

    std::condition_variable cv_;

    size_t capacity_;

    Channel(size_t capacity) {
        this->capacity_ = capacity;
    }

    void send(T value) {
        std::unique_lock<std::mutex> lock = std::unique_lock<std::mutex>(this->mutex_);
        this->cv_.wait(lock, [this]() {
    return this->queue_.size() < this->capacity_;
});
        this->queue_.push(value);
        cv_.notify_one();
    }

    T receive() {
        T value;
        std::unique_lock<std::mutex> lock = std::unique_lock<std::mutex>(this->mutex_);
        this->cv_.wait(lock, [this]() {
    return !this->queue_.empty();
});
        value = this->queue_.front();
        this->queue_.pop();
        cv_.notify_one();
        return value;
    }

};

// Found 1 files in package
// Processing Go file with 0 declarations
// No declarations found in Go file - parser may need to be fixed
// Generating fallback main function - Go parser not working properly
int main() {
    return 0;
}

