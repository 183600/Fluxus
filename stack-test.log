Stack has not been tested with GHC versions above 9.4, and using 9.6.5, this may fail
Stack has not been tested with Cabal versions above 3.8, but version 3.10.3.0 was found, this may fail
fluxus-0.1.0.0: unregistering (local file changes: CHANGELOG.md README.md app/Main.hs debug_python_lexer.hs fluxus.cabal src/Fluxus/AST/Common.hs sr...)
Building all executables for `fluxus' once. After a successful build of all of them, only specified executables will be rebuilt.
fluxus> configure (lib + exe + test)
Configuring fluxus-0.1.0.0...
fluxus> build (lib + exe + test)
Preprocessing library for fluxus-0.1.0.0..
Building library for fluxus-0.1.0.0..
[ 1 of 23] Compiling Fluxus.AST.Common
[ 2 of 23] Compiling Fluxus.AST.Go
[ 3 of 23] Compiling Fluxus.AST.Python
[ 4 of 23] Compiling Fluxus.Analysis.EscapeAnalysis
[ 5 of 23] Compiling Fluxus.Analysis.OwnershipInference
[ 6 of 23] Compiling Fluxus.Analysis.ShapeAnalysis
[ 7 of 23] Compiling Fluxus.Analysis.TypeInference
[ 8 of 23] Compiling Fluxus.CodeGen.Go
[ 9 of 23] Compiling Fluxus.Internal.Types
[10 of 23] Compiling Fluxus.Internal.Monad
[11 of 23] Compiling Fluxus.Optimization.Devirtualization
[12 of 23] Compiling Fluxus.Optimization.Monomorphization
[13 of 23] Compiling Fluxus.Parser.Go.Lexer
[14 of 23] Compiling Fluxus.Parser.Go.Parser
[15 of 23] Compiling Fluxus.Parser.Python.Lexer
[16 of 23] Compiling Fluxus.Parser.Python.Parser
[17 of 23] Compiling Fluxus.Runtime.Go
[18 of 23] Compiling Fluxus.Runtime.Python
[19 of 23] Compiling Fluxus.Utils.Graph
[20 of 23] Compiling Fluxus.Utils.Pretty
[21 of 23] Compiling Fluxus.CodeGen.CPP
[22 of 23] Compiling Fluxus.Compiler.Driver

/home/engine/project/src/Fluxus/Compiler/Driver.hs:672:3: warning: [GHC-53633] [-Woverlapping-patterns]
    Pattern match is redundant
    In a \case alternative: _ -> ...
    |
672 |   _ -> "auto"
    |   ^^^^^^^^^^^

/home/engine/project/src/Fluxus/Compiler/Driver.hs:785:3: warning: [GHC-53633] [-Woverlapping-patterns]
    Pattern match is redundant
    In a \case alternative: _ -> ...
    |
785 |   _ -> "/* unimplemented expr */"
    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

/home/engine/project/src/Fluxus/Compiler/Driver.hs:789:20: warning: [GHC-62161] [-Wincomplete-patterns]
    Pattern match(es) are non-exhaustive
    In a \case alternative:
        Patterns of type ‘CppLiteral’ not matched: CppCharLit _
    |
789 | renderCppLiteral = \case
    |                    ^^^^^...
[23 of 23] Compiling Fluxus.Compiler.Config

/home/engine/project/src/Fluxus/Compiler/Config.hs:359:1: warning: [GHC-90177] [-Worphans]
    Orphan instance: instance ToJSON CompilerConfig
    Suggested fix:
      Move the instance declaration to the module of the class or of the type, or
      wrap the type with a newtype and declare the instance on the new type.
    |
359 | instance ToJSON CompilerConfig where
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...

/home/engine/project/src/Fluxus/Compiler/Config.hs:382:1: warning: [GHC-90177] [-Worphans]
    Orphan instance: instance FromJSON CompilerConfig
    Suggested fix:
      Move the instance declaration to the module of the class or of the type, or
      wrap the type with a newtype and declare the instance on the new type.
    |
382 | instance FromJSON CompilerConfig where
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...
Preprocessing executable 'test-python-parser' for fluxus-0.1.0.0..
Building executable 'test-python-parser' for fluxus-0.1.0.0..
[1 of 1] Compiling Main

/home/engine/project/test-debug.hs:1:1: warning: [GHC-85401] [-Wmissing-export-lists]
    The export item ‘module Main’ is missing an export list
  |
1 | {-# LANGUAGE OverloadedStrings #-}
  | ^

/home/engine/project/test-debug.hs:127:45: warning: [GHC-18042] [-Wtype-defaults]
    • Defaulting the type variable ‘a0’ to type ‘Integer’ in the following constraints
        (Show a0) arising from a use of ‘show’ at test-debug.hs:127:45-48
        (Num a0) arising from the literal ‘0’ at test-debug.hs:127:81
        (Enum a0)
          arising from the arithmetic sequence ‘0 .. ’
          at test-debug.hs:127:80-84
    • In the first argument of ‘(++)’, namely ‘show i’
      In the second argument of ‘(++)’, namely
        ‘show i ++ "] " ++ show token’
      In the second argument of ‘($)’, namely
        ‘"  [" ++ show i ++ "] " ++ show token’
    |
127 |   mapM_ (\(i, token) -> putStrLn $ "  [" ++ show i ++ "] " ++ show token) (zip [0..] tokens)
    |                                             ^^^^
[2 of 2] Linking .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.10.3.0/build/test-python-parser/test-python-parser
Preprocessing executable 'fluxus' for fluxus-0.1.0.0..
Building executable 'fluxus' for fluxus-0.1.0.0..
[1 of 1] Compiling Main

/home/engine/project/app/Main.hs:1:1: warning: [GHC-85401] [-Wmissing-export-lists]
    The export item ‘module Main’ is missing an export list
  |
1 | {-# LANGUAGE OverloadedStrings #-}
  | ^
[2 of 2] Linking .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.10.3.0/build/fluxus/fluxus
Preprocessing test suite 'fluxus-test' for fluxus-0.1.0.0..
Building test suite 'fluxus-test' for fluxus-0.1.0.0..
[1 of 5] Compiling Test.Fluxus.Analysis.TypeInference
[2 of 5] Compiling Test.Fluxus.CodeGen.CPP
[3 of 5] Compiling Test.Fluxus.Parser.Go
[4 of 5] Compiling Test.Fluxus.Parser.Python
[5 of 5] Compiling Main
[6 of 6] Linking .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.10.3.0/build/fluxus-test/fluxus-test
Preprocessing executable 'test-python-lexer' for fluxus-0.1.0.0..
Building executable 'test-python-lexer' for fluxus-0.1.0.0..
[1 of 1] Compiling Main

/home/engine/project/debug_python_lexer.hs:1:1: warning: [GHC-85401] [-Wmissing-export-lists]
    The export item ‘module Main’ is missing an export list
  |
1 | #!/usr/bin/env runhaskell
  | ^
[2 of 2] Linking .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.10.3.0/build/test-python-lexer/test-python-lexer
fluxus> copy/register
Installing library in /home/engine/project/.stack-work/install/x86_64-linux-tinfo6/19838213642858e8ceaccc4ead990d7dc516bb8ebb88b62e87dca7529c888843/9.6.5/lib/x86_64-linux-ghc-9.6.5/fluxus-0.1.0.0-8nt1dZudashL6f0QvT875D
Installing executable test-python-parser in /home/engine/project/.stack-work/install/x86_64-linux-tinfo6/19838213642858e8ceaccc4ead990d7dc516bb8ebb88b62e87dca7529c888843/9.6.5/bin
Installing executable fluxus in /home/engine/project/.stack-work/install/x86_64-linux-tinfo6/19838213642858e8ceaccc4ead990d7dc516bb8ebb88b62e87dca7529c888843/9.6.5/bin
Installing executable test-python-lexer in /home/engine/project/.stack-work/install/x86_64-linux-tinfo6/19838213642858e8ceaccc4ead990d7dc516bb8ebb88b62e87dca7529c888843/9.6.5/bin
Registering library for fluxus-0.1.0.0..
fluxus> test (suite: fluxus-test)

...............................................parseFuncDecl: entering
parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
.parseFuncDecl: parsed func keyword
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': entering
parseBlockStmt': statements parsed = 0
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': exiting
parseFuncDecl: has body = True
parseFuncDecl: returning function decl
parseFile: decls count = 1
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
.parseFile: decls count = 0
..parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 0
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
parseFile: decls count = 0
.parseFile: decls count = 1
...parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "test_func"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 0
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFile: decls count = 1
.parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "add"
parseFuncDecl: params count = 2
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "swap"
parseFuncDecl: params count = 2
parseFuncDecl: results count = 2
parseReturnStmt: parsed expressions count = 2
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "hello"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "sum"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "divide"
parseFuncDecl: params count = 2
parseFuncDecl: results count = 2
parseReturnStmt: failed to parse expressions: TrivialError 33 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace} :| []))) (fromList [])
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "factorial"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "increment"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "test.go", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.............................parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
...parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "factorial"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 1}, spanEnd = SourcePos {posLine = 14, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "fib"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 1}, spanEnd = SourcePos {posLine = 14, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
..parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 1}, spanEnd = SourcePos {posLine = 12, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 1}, spanEnd = SourcePos {posLine = 12, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 5}, spanEnd = SourcePos {posLine = 10, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 5}, spanEnd = SourcePos {posLine = 12, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 13, posColumn = 1}, spanEnd = SourcePos {posLine = 13, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
..parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
..parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 4
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 9}, spanEnd = SourcePos {posLine = 10, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 13, posColumn = 1}, spanEnd = SourcePos {posLine = 13, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "isPositive"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 15, posColumn = 5}, spanEnd = SourcePos {posLine = 15, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 17, posColumn = 5}, spanEnd = SourcePos {posLine = 17, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 18, posColumn = 1}, spanEnd = SourcePos {posLine = 18, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "greet"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
..parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 1}, spanEnd = SourcePos {posLine = 9, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 13, posColumn = 5}, spanEnd = SourcePos {posLine = 13, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 1}, spanEnd = SourcePos {posLine = 14, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
..parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "factorialIterative"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 15, posColumn = 1}, spanEnd = SourcePos {posLine = 15, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "countEven"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 9}, spanEnd = SourcePos {posLine = 10, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 13, posColumn = 1}, spanEnd = SourcePos {posLine = 13, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 17, posColumn = 1}, spanEnd = SourcePos {posLine = 17, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "maxOfThree"
parseFuncDecl: params count = 3
parseFuncDecl: results count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 5}, spanEnd = SourcePos {posLine = 12, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 4
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 1}, spanEnd = SourcePos {posLine = 14, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 18, posColumn = 1}, spanEnd = SourcePos {posLine = 18, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
...parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 4
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 1}, spanEnd = SourcePos {posLine = 12, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 1}, spanEnd = SourcePos {posLine = 12, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 9}, spanEnd = SourcePos {posLine = 10, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 5}, spanEnd = SourcePos {posLine = 11, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 13, posColumn = 1}, spanEnd = SourcePos {posLine = 13, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 9}, spanEnd = SourcePos {posLine = 12, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 9}, spanEnd = SourcePos {posLine = 14, posColumn = 10}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 15, posColumn = 5}, spanEnd = SourcePos {posLine = 15, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 16, posColumn = 1}, spanEnd = SourcePos {posLine = 16, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "sumDown"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 1}, spanEnd = SourcePos {posLine = 14, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "power"
parseFuncDecl: params count = 2
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 14, posColumn = 1}, spanEnd = SourcePos {posLine = 14, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "isAdult"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 15, posColumn = 5}, spanEnd = SourcePos {posLine = 15, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 17, posColumn = 5}, spanEnd = SourcePos {posLine = 17, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 18, posColumn = 1}, spanEnd = SourcePos {posLine = 18, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "describe"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 5}, spanEnd = SourcePos {posLine = 10, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 1}, spanEnd = SourcePos {posLine = 12, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 16, posColumn = 1}, spanEnd = SourcePos {posLine = 16, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseBlockStmt': statements parsed = 3
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 1
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "clamp"
parseFuncDecl: params count = 1
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 10, posColumn = 5}, spanEnd = SourcePos {posLine = 10, posColumn = 6}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 2
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 12, posColumn = 1}, spanEnd = SourcePos {posLine = 12, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 16, posColumn = 1}, spanEnd = SourcePos {posLine = 16, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "multiply"
parseFuncDecl: params count = 2
parseFuncDecl: results count = 1
parseReturnStmt: parsed expressions count = 1
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFuncDecl: receiver parsed = False
parseFuncDecl: name = Identifier "main"
parseFuncDecl: params count = 0
parseFuncDecl: results count = 0
parseBlockStmt': statements parsed = 1
parseBlockStmt': next token before closing = Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 11, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 2}}, locValue = GoTokenDelimiter GoDelimRightBrace}
parseFuncDecl: has body = True
parseFile: decls count = 2
.....................................................
Finished in 66.6516 seconds
210 examples, 0 failures, 24 pending

fluxus> Test suite fluxus-test passed
Completed 2 action(s).
