// Generated by HyperStatic/CXX Compiler
#include <tuple>
#include <sstream>
#include <algorithm>
#include <memory>
#include <vector>
#include <string>
#include <iostream>

// DEBUG: Starting function generation for: greet

// DEBUG: Function has 2 body statements

// Processing expression: BinaryOp

// Processing binary operation: OpAdd

// Processing expression: BinaryOp

// Processing binary operation: OpAdd

// Processing expression: Literal

// Generated left operand: CppLiteral (CppStringLit "Hello, ")

// Processing expression: Variable

// Generated right operand: CppVar "name"

// Generated binary operation result: CppBinary "+" (CppLiteral (CppStringLit "Hello, ")) (CppCall (CppVar "std::to_string") [CppVar "name"])

// Generated left operand: CppBinary "+" (CppLiteral (CppStringLit "Hello, ")) (CppCall (CppVar "std::to_string") [CppVar "name"])

// Processing expression: Literal

// Generated right operand: CppLiteral (CppStringLit "!")

// Generated binary operation result: CppBinary "+" (CppCall (CppVar "std::to_string") [CppBinary "+" (CppLiteral (CppStringLit "Hello, ")) (CppCall (CppVar "std::to_string") [CppVar "name"])]) (CppLiteral (CppStringLit "!"))

// Processing expression: Variable

// DEBUG: Generated 2 C++ statements

auto greet(auto name) {
    auto message = "Hello, " + std::string(name) + "!";
    return message;
}

// DEBUG: Starting function generation for: main

// DEBUG: Function has 4 body statements

// Processing expression: Call

// About to call generatePythonCall

int __debug_generatePythonCall_called = 1;

// Processing expression: Variable

// Processing expression: Literal

// Function call: greet with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyString "Fluxus")})}

int __debug_greet = 42;

int __debug_greet_args = 1;

// Regular function call: greet

int __debug_greet_result = 1;

// Returned from generatePythonCall

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: Variable

// Function call: print with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyVar (Identifier "result")})}

int __debug_print = 42;

int __debug_print_args = 1;

// print function called with 1 arguments

// print argument 0: CppVar "result"

// Returned from generatePythonCall

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: Literal

// Function call: print with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyString "String with escape: \\n\\t\"quote\"")})}

// print function called with 1 arguments

// print argument 0: CppLiteral (CppStringLit "String with escape: \\n\\t\"quote\"")

// Returned from generatePythonCall

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Processing expression: Literal

// Function call: print with 1 args

// Python argument 0: Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = ArgPositional (Located {locSpan = SourceSpan {spanFilename = "<input>", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = PyLiteral (PyString "Another test")})}

// print function called with 1 arguments

// print argument 0: CppLiteral (CppStringLit "Another test")

// Returned from generatePythonCall

// DEBUG: Generated 4 C++ statements

int main() {
    auto result = greet("Fluxus");
    std::cout << result << std::endl;
    std::cout << "String with escape: \\n\\t\"quote\"" << std::endl;
    std::cout << "Another test" << std::endl;
    return 0;
}

// Processing expression: Comparison

// Processing expression: Variable

// Processing expression: Literal

// Processing expression: Call

// About to call generatePythonCall

// Processing expression: Variable

// Function call: main with 0 args

int __debug_main = 42;

int __debug_main_args = 0;

// Regular function call: main

int __debug_main_result = 1;

// Returned from generatePythonCall

