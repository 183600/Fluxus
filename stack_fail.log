
HyperStatic Compiler Test Suite
  Python Parser
    Python Lexer
      tokenizes simple expressions [✔]
      tokenizes Python keywords [✔]
      tokenizes string literals [✔]
      tokenizes number literals [✔]
    Python Lexer - tokens coverage
      tokenizes identifiers [✔]
      tokenizes common keywords [✔]
      tokenizes arithmetic operators [✔]
      tokenizes comparison operators [✔]
      tokenizes logical operators [✔]
      tokenizes assignment/walrus/arrow/ellipsis [✔]
      tokenizes @ delimiter and decorators [✔]
      tokenizes compound assignments [✔]
      tokenizes number literals (dec/hex/oct/bin/float/exp) [✔]
      tokenizes bytes literals (b/B prefixes) [✔]
      tokenizes strings and f-strings [✔]
      tokenizes bytes literals [✔]
      tokenizes delimiters [✔]
      tokenizes parentheses, brackets and braces around identifiers [✔]
    Python Parser
      parses simple expressions [✔]
      parses function definitions [✔]
      parses class definitions [✔]
      parses if statements [✔]
  Go Parser
    Go Lexer
      tokenizes simple expressions [✔]
      tokenizes Go keywords [✔]
      tokenizes string literals [✔]
      tokenizes raw string literals [✔]
      tokenizes number literals [✔]
    Go Lexer - tokens coverage
      tokenizes identifiers [✔]
      tokenizes common keywords [✔]
      tokenizes arithmetic operators [✔]
      tokenizes comparison operators [✔]
      tokenizes logical operators [✔]
      tokenizes assignment and define [✔]
      tokenizes inc/dec, shifts and bitwise [✔]
      tokenizes compound assignments [✔]
      tokenizes special operators [✔]
      tokenizes number literals (dec/float/exp/imag) [✘]
      tokenizes string, raw string and rune literals [✔]
      tokenizes delimiters [✔]
      tokenizes function literal tokens [✔]
      tokenizes hex, octal and binary integers [✘]
      tokenizes string escape sequences [✔]
      produces newline tokens [✔]
    Go Lexer - basic data types
      tokenizes boolean literals true/false as identifiers [✔]
      tokenizes basic type identifiers [✔]
      tokenizes UTF-8 string literals [✔]
      tokenizes imaginary number literals for complex numbers [✔]
    Go Parser - Import Declaration
      parses single import statement [✔]
      parses grouped import statements [✔]
      parses import with alias [✔]
      parses import with dot notation [✔]
      parses import with blank identifier [✔]
      parses multiple imports with different styles [✔]
      parses import with nested package path [✔]
      parses import with deeply nested package path [✔]
      parses standard library imports [✔]
      parses package with both imports and declarations [✔]
    Go Parser
      Go Parser - Package Declaration
        parses package main declaration [✔]
        parses package with custom name [✔]
        parses package with underscore in name [✔]
        parses package with numbers in name [✔]
        parses package declaration followed by imports [✔]
        parses package declaration followed by function [✔]
        parses package declaration with common library names [✔]
        parses package declaration at start of file [✔]
        rejects file without package declaration [✔]
      parses package declaration [✔]
      parses function declarations [✔]
      parses variable declarations [✔]
      parses type declarations [✔]
      parses function with parameters and return type [✔]
      parses function with multiple return values [✔]
      parses function with no parameters and no return value [✔]
      parses main function as program entry point [✔]
      parses function with variadic parameters [✘]
      parses function with named return values [✔]
      parses recursive function [✔]
      parses function with pointer parameters and return type [✔]
  Type Inference
    Basic Type Inference
      infers integer literal types [✔]
      infers string literal types [✔]
      infers boolean literal types [✔]
      infers list types [✔]
      infers function types [✔]
    Type Unification
      unifies identical types [✔]
      fails to unify different types [✔]
      unifies type variables [✔]
      unifies complex types [✔]
    Constraint Solving
      solves simple constraints [✔]
      detects inconsistent constraints [✔]
      propagates constraints [✔]
  C++ Code Generation
    Type Mapping
      maps basic types correctly [✔]
      maps container types correctly [✔]
      maps smart pointer types correctly [✔]
      maps complex types correctly [✔]
    Expression Generation
      generates literal expressions [✔]
      generates binary expressions [✔]
      generates function calls [✔]
    Statement Generation
      generates expression statements [✔]
      generates return statements [✔]
    Declaration Generation
      generates variable declarations [✔]
      generates function declarations [✔]
      generates class declarations [✔]
      generates program units [✔]
    Python module handling
      hoists module-level assignments to global declarations [✔]
    Go fmt translation
      translates fmt.Println into std::cout stream chain [✔]
      translates fmt.Printf into std::printf call [✔]
    Go end-to-end compilation
      compiles go println constant [✔]
      compiles go addition [✔]
      compiles go multiplication [✔]
      compiles go function call [✘]
      compiles go nested functions [✘]
      compiles go factorial recursion [✔]
      compiles go fibonacci recursion [✔]
      compiles go while-style loop [✘]
      compiles go for loop summation [✔]
      compiles go for loop with increment operator [✔]
      compiles go if else true branch [✔]
      compiles go if else false branch [✔]
      compiles go boolean logic [✔]
      compiles go printf formatting [✘]
      compiles go print without newline [✔]
      compiles go println multiple arguments [✔]
      compiles go string concatenation [✘]
      compiles go subtraction chain [✔]
      compiles go nested loops accumulation [✔]
      compiles go boolean function invocation [✔]
      compiles go string function [✔]
      compiles go helper compute function [✘]
      compiles go modulo operation [✔]
      compiles go integer division [✔]
      compiles go decrementing for loop [✔]
      compiles go if else-if chain [✔]
      compiles go nested while loops count [✘]
      compiles go iterative factorial function [✔]
      compiles go even counter function [✔]
      compiles go max of three function [✔]
      compiles go string repetition function [✘]
      compiles go difference compute function [✘]
    Python end-to-end compilation
      compiles simple print [✔]
      compiles integer addition [✔]
      compiles integer multiplication [✔]
      compiles float division [✘]
      compiles power operation [✔]
      compiles function definition and call [✔]
      compiles nested function calls [✘]
      compiles if else true branch [✔]
      compiles if else false branch [✔]
      compiles while loop iteration [✔]
      compiles range simple [✔]
      compiles range with start [✔]
      compiles range with positive step [✔]
      compiles range with negative step [✔]
      compiles len builtin [✘]
      compiles list indexing [✘]
      compiles f-string formatting [✘]
      compiles boolean logic [✔]
      compiles chained comparison [✔]
      compiles factorial recursion [✔]
      compiles multiple print arguments [✔]
      compiles string concatenation [✔]
      compiles subtraction chain [✔]
      compiles factorial while loop [✔]
      compiles range summation [✔]
      compiles nested loops accumulation [✔]
      compiles string returning function [✘]
      compiles local variable function [✔]
      compiles dependent functions [✔]
      compiles equality branch [✔]
      compiles nested conditional branch [✔]
      compiles indexed list summation [✘]
      compiles multi step string concatenation [✔]
      compiles boolean or branch [✔]
      compiles ranged even summation [✔]
      compiles descending range summation [✔]
      compiles fibonacci recursion [✔]
      compiles boolean returning function [✘]
      compiles countdown loop [✔]
      compiles list returning function [✘]
      compiles string repetition helper [✔]
      compiles doubled range accumulation [✔]
      compiles modulo operation [✔]
      compiles floor division operation [✔]
      compiles nested while loops [✘]
      compiles if elif chain [✘]
      compiles string multiplication [✘]
      compiles boolean list counting [✘]
      compiles min function loop [✘]
      compiles even counter function [✔]
      compiles iterative factorial function [✔]
      compiles loop string accumulation [✘]

Failures:

  test/Test/Fluxus/Parser/Go.hs:203:31: 
  1) HyperStatic Compiler Test Suite, Go Parser, Go Lexer - tokens coverage, tokenizes number literals (dec/float/exp/imag)
       expected: [GoTokenFloat "123", GoTokenFloat "3.14", GoTokenFloat "1e10", GoTokenFloat "2.5e-3", GoTokenImag "1i", GoTokenImag "3.14i"]
        but got: [GoTokenInt "123", GoTokenFloat "3.14", GoTokenFloat "1e10", GoTokenFloat "2.5e-3", GoTokenImag "1i", GoTokenImag "3.14i"]

  To rerun use: --match "/HyperStatic Compiler Test Suite/Go Parser/Go Lexer - tokens coverage/tokenizes number literals (dec/float/exp/imag)/" --seed 770573865

  test/Test/Fluxus/Parser/Go.hs:261:31: 
  2) HyperStatic Compiler Test Suite, Go Parser, Go Lexer - tokens coverage, tokenizes hex, octal and binary integers
       expected: [GoTokenFloat "0", GoTokenIdent "xFF", GoTokenFloat "0", GoTokenIdent "o77", GoTokenFloat "0", GoTokenIdent "b1010"]
        but got: [GoTokenInt "0xFF", GoTokenInt "0o77", GoTokenInt "0b1010"]

  To rerun use: --match "/HyperStatic Compiler Test Suite/Go Parser/Go Lexer - tokens coverage/tokenizes hex, octal and binary integers/" --seed 770573865

  test/Test/Fluxus/Parser/Go.hs:973:22: 
  3) HyperStatic Compiler Test Suite, Go Parser, Go Parser, parses function with variadic parameters
       expected: 1
        but got: 0

  To rerun use: --match "/HyperStatic Compiler Test Suite/Go Parser/Go Parser/parses function with variadic parameters/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:674:9: 
  4) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go function call
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-go-cpp-compiles-go-function-call-4d46f4e2d36adf14/input.cpp:49:12: error: expected unqualified-id before \8216int\8217\n   49 | int double(int x) {\n      |            ^~~\n/tmp/fluxus-go-cpp-compiles-go-function-call-4d46f4e2d36adf14/input.cpp:49:12: error: expected \8216)\8217 before \8216int\8217\n   49 | int double(int x) {\n      |           ~^~~\n      |            )\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go function call/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:674:9: 
  5) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go nested functions
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-go-cpp-compiles-go-nested-functions-28df151fdd912c34/input.cpp:49:12: error: expected unqualified-id before \8216int\8217\n   49 | int double(int x) {\n      |            ^~~\n/tmp/fluxus-go-cpp-compiles-go-nested-functions-28df151fdd912c34/input.cpp:49:12: error: expected \8216)\8217 before \8216int\8217\n   49 | int double(int x) {\n      |           ~^~~\n      |            )\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go nested functions/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:683:16: 
  6) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go while-style loop
       expected: "0\n1\n2\n"
        but got: ""

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go while-style loop/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:674:9: 
  7) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go printf formatting
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-go-cpp-compiles-go-printf-formatting-da198c9434b4278c/input.cpp:51:17: warning: missing terminating \" character\n   51 |     std::printf(\"value: %d\n      |                 ^\n/tmp/fluxus-go-cpp-compiles-go-printf-formatting-da198c9434b4278c/input.cpp:51:17: error: missing terminating \" character\n   51 |     std::printf(\"value: %d\n      |                 ^~~~~~~~~~\n/tmp/fluxus-go-cpp-compiles-go-printf-formatting-da198c9434b4278c/input.cpp:52:1: warning: missing terminating \" character\n   52 | \", 7);\n      | ^\n/tmp/fluxus-go-cpp-compiles-go-printf-formatting-da198c9434b4278c/input.cpp:52:1: error: missing terminating \" character\n   52 | \", 7);\n      | ^~~~~~\n/tmp/fluxus-go-cpp-compiles-go-printf-formatting-da198c9434b4278c/input.cpp: In function \8216int main()\8217:\n/tmp/fluxus-go-cpp-compiles-go-printf-formatting-da198c9434b4278c/input.cpp:53:5: error: expected primary-expression before \8216return\8217\n   53 |     return 0;\n      |     ^~~~~~\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go printf formatting/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:674:9: 
  8) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go string concatenation
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-go-cpp-compiles-go-string-concatenation-e0cc049e5365dbdf/input.cpp: In function \8216int main()\8217:\n/tmp/fluxus-go-cpp-compiles-go-string-concatenation-e0cc049e5365dbdf/input.cpp:52:25: error: invalid operands of types \8216const char*\8217 and \8216const char*\8217 to binary \8216operator+\8217\n   52 |     std::cout << prefix + suffix << std::endl;\n      |                  ~~~~~~ ^ ~~~~~~\n      |                  |        |\n      |                  |        const char*\n      |                  const char*\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go string concatenation/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:683:16: 
  9) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go helper compute function
       expected: "6\n"
        but got: ""

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go helper compute function/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:683:16: 
  10) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go nested while loops count
       expected: "4\n"
        but got: ""

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go nested while loops count/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:674:9: 
  11) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go string repetition function
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-go-cpp-compiles-go-string-repetition-function-76553af609cadab6/input.cpp: In function \8216std::string repeat(std::string, int)\8217:\n/tmp/fluxus-go-cpp-compiles-go-string-repetition-function-76553af609cadab6/input.cpp:52:21: error: cannot convert \8216std::__cxx11::basic_string<char>\8217 to \8216const char*\8217 in assignment\n   52 |     result = result + phrase;\n      |              ~~~~~~~^~~~~~~~\n      |                     |\n      |                     std::__cxx11::basic_string<char>\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go string repetition function/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:683:16: 
  12) HyperStatic Compiler Test Suite, C++ Code Generation, Go end-to-end compilation, compiles go difference compute function
       expected: "35\n"
        but got: ""

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Go end-to-end compilation/compiles go difference compute function/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1298:16: 
  13) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles float division
       expected: "3.5\n"
        but got: "3\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles float division/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  14) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles nested function calls
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-python-cpp-compiles-nested-function-calls-fc747c7d8e7b021c/input.cpp:5:13: error: expected unqualified-id before \8216auto\8217\n    5 | auto double(auto x) {\n      |             ^~~~\n/tmp/fluxus-python-cpp-compiles-nested-function-calls-fc747c7d8e7b021c/input.cpp:5:13: error: expected \8216)\8217 before \8216auto\8217\n    5 | auto double(auto x) {\n      |            ~^~~~\n      |             )\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles nested function calls/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  15) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles len builtin
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 1 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 7}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 10}, spanEnd = SourcePos {posLine = 1, posColumn = 11}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 11}, spanEnd = SourcePos {posLine = 1, posColumn = 13}}, locValue = TokenNumber \"10\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 13}, spanEnd = SourcePos {posLine = 1, posColumn = 14}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 15}, spanEnd = SourcePos {posLine = 1, posColumn = 17}}, locValue = TokenNumber \"20\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 17}, spanEnd = SourcePos {posLine = 1, posColumn = 18}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 19}, spanEnd = SourcePos {posLine = 1, posColumn = 21}}, locValue = TokenNumber \"30\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 21}, spanEnd = SourcePos {posLine = 1, posColumn = 22}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 23}, spanEnd = SourcePos {posLine = 1, posColumn = 25}}, locValue = TokenNumber \"40\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 25}, spanEnd = SourcePos {posLine = 1, posColumn = 26}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 6}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 6}, spanEnd = SourcePos {posLine = 2, posColumn = 7}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 7}, spanEnd = SourcePos {posLine = 2, posColumn = 10}}, locValue = TokenIdent \"len\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 10}, spanEnd = SourcePos {posLine = 2, posColumn = 11}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 11}, spanEnd = SourcePos {posLine = 2, posColumn = 17}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 17}, spanEnd = SourcePos {posLine = 2, posColumn = 18}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 18}, spanEnd = SourcePos {posLine = 2, posColumn = 19}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-len-builtin-0175a8b5d83c7d23/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-len-builtin-0175a8b5d83c7d23/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles len builtin/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  16) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles list indexing
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 1 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 7}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 10}, spanEnd = SourcePos {posLine = 1, posColumn = 11}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 11}, spanEnd = SourcePos {posLine = 1, posColumn = 12}}, locValue = TokenNumber \"4\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 12}, spanEnd = SourcePos {posLine = 1, posColumn = 13}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 14}, spanEnd = SourcePos {posLine = 1, posColumn = 15}}, locValue = TokenNumber \"9\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 15}, spanEnd = SourcePos {posLine = 1, posColumn = 16}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 17}, spanEnd = SourcePos {posLine = 1, posColumn = 19}}, locValue = TokenNumber \"16\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 19}, spanEnd = SourcePos {posLine = 1, posColumn = 20}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 6}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 6}, spanEnd = SourcePos {posLine = 2, posColumn = 7}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 7}, spanEnd = SourcePos {posLine = 2, posColumn = 13}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 13}, spanEnd = SourcePos {posLine = 2, posColumn = 14}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 14}, spanEnd = SourcePos {posLine = 2, posColumn = 15}}, locValue = TokenNumber \"2\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 15}, spanEnd = SourcePos {posLine = 2, posColumn = 16}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 16}, spanEnd = SourcePos {posLine = 2, posColumn = 17}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-list-indexing-e8ab904175fbc12a/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-list-indexing-e8ab904175fbc12a/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles list indexing/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1298:16: 
  17) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles f-string formatting
       expected: "Fluxus-3\n"
        but got: "{name}-{count}\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles f-string formatting/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1298:16: 
  18) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles string returning function
       expected: "Hello Fluxus\n"
        but got: "Hello {name}\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles string returning function/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  19) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles indexed list summation
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 1 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 7}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 10}, spanEnd = SourcePos {posLine = 1, posColumn = 11}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 11}, spanEnd = SourcePos {posLine = 1, posColumn = 12}}, locValue = TokenNumber \"1\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 12}, spanEnd = SourcePos {posLine = 1, posColumn = 13}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 14}, spanEnd = SourcePos {posLine = 1, posColumn = 15}}, locValue = TokenNumber \"2\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 15}, spanEnd = SourcePos {posLine = 1, posColumn = 16}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 17}, spanEnd = SourcePos {posLine = 1, posColumn = 18}}, locValue = TokenNumber \"3\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 18}, spanEnd = SourcePos {posLine = 1, posColumn = 19}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 20}, spanEnd = SourcePos {posLine = 1, posColumn = 21}}, locValue = TokenNumber \"4\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 21}, spanEnd = SourcePos {posLine = 1, posColumn = 22}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 6}}, locValue = TokenIdent \"total\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 7}, spanEnd = SourcePos {posLine = 2, posColumn = 8}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 9}, spanEnd = SourcePos {posLine = 2, posColumn = 10}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 4}}, locValue = TokenKeyword KwFor},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 5}, spanEnd = SourcePos {posLine = 3, posColumn = 6}}, locValue = TokenIdent \"i\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 7}, spanEnd = SourcePos {posLine = 3, posColumn = 9}}, locValue = TokenKeyword KwIn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 10}, spanEnd = SourcePos {posLine = 3, posColumn = 15}}, locValue = TokenIdent \"range\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 15}, spanEnd = SourcePos {posLine = 3, posColumn = 16}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 16}, spanEnd = SourcePos {posLine = 3, posColumn = 19}}, locValue = TokenIdent \"len\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 19}, spanEnd = SourcePos {posLine = 3, posColumn = 20}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 20}, spanEnd = SourcePos {posLine = 3, posColumn = 26}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 26}, spanEnd = SourcePos {posLine = 3, posColumn = 27}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 27}, spanEnd = SourcePos {posLine = 3, posColumn = 28}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 28}, spanEnd = SourcePos {posLine = 3, posColumn = 29}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 5}, spanEnd = SourcePos {posLine = 4, posColumn = 10}}, locValue = TokenIdent \"total\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 11}, spanEnd = SourcePos {posLine = 4, posColumn = 12}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 13}, spanEnd = SourcePos {posLine = 4, posColumn = 18}}, locValue = TokenIdent \"total\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 19}, spanEnd = SourcePos {posLine = 4, posColumn = 20}}, locValue = TokenOperator OpPlus},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 21}, spanEnd = SourcePos {posLine = 4, posColumn = 27}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 27}, spanEnd = SourcePos {posLine = 4, posColumn = 28}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 28}, spanEnd = SourcePos {posLine = 4, posColumn = 29}}, locValue = TokenIdent \"i\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 29}, spanEnd = SourcePos {posLine = 4, posColumn = 30}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 6}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 6}, spanEnd = SourcePos {posLine = 5, posColumn = 7}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 7}, spanEnd = SourcePos {posLine = 5, posColumn = 12}}, locValue = TokenIdent \"total\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 12}, spanEnd = SourcePos {posLine = 5, posColumn = 13}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenNewline}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-indexed-list-summation-32aa0194ea7abeb2/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-indexed-list-summation-32aa0194ea7abeb2/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles indexed list summation/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  20) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles boolean returning function
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 0 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 4}}, locValue = TokenKeyword KwDef} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 4}}, locValue = TokenKeyword KwDef},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 5}, spanEnd = SourcePos {posLine = 1, posColumn = 7}}, locValue = TokenKeyword KwIs},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 7}, spanEnd = SourcePos {posLine = 1, posColumn = 16}}, locValue = TokenIdent \"_positive\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 16}, spanEnd = SourcePos {posLine = 1, posColumn = 17}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 17}, spanEnd = SourcePos {posLine = 1, posColumn = 18}}, locValue = TokenIdent \"n\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 18}, spanEnd = SourcePos {posLine = 1, posColumn = 19}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 19}, spanEnd = SourcePos {posLine = 1, posColumn = 20}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 5}, spanEnd = SourcePos {posLine = 2, posColumn = 7}}, locValue = TokenKeyword KwIf},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 8}, spanEnd = SourcePos {posLine = 2, posColumn = 9}}, locValue = TokenIdent \"n\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 10}, spanEnd = SourcePos {posLine = 2, posColumn = 11}}, locValue = TokenOperator OpGt},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 12}, spanEnd = SourcePos {posLine = 2, posColumn = 13}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 13}, spanEnd = SourcePos {posLine = 2, posColumn = 14}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 9}}, locValue = TokenIndent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 9}, spanEnd = SourcePos {posLine = 3, posColumn = 15}}, locValue = TokenKeyword KwReturn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 16}, spanEnd = SourcePos {posLine = 3, posColumn = 20}}, locValue = TokenKeyword KwTrue},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 5}}, locValue = TokenDedent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 5}, spanEnd = SourcePos {posLine = 4, posColumn = 9}}, locValue = TokenKeyword KwElse},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 9}, spanEnd = SourcePos {posLine = 4, posColumn = 10}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 9}}, locValue = TokenIndent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 9}, spanEnd = SourcePos {posLine = 5, posColumn = 15}}, locValue = TokenKeyword KwReturn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 16}, spanEnd = SourcePos {posLine = 5, posColumn = 21}}, locValue = TokenKeyword KwFalse},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 1}}, locValue = TokenDedent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 3}}, locValue = TokenKeyword KwIf},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 4}, spanEnd = SourcePos {posLine = 7, posColumn = 6}}, locValue = TokenKeyword KwIs},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 6}, spanEnd = SourcePos {posLine = 7, posColumn = 15}}, locValue = TokenIdent \"_positive\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 15}, spanEnd = SourcePos {posLine = 7, posColumn = 16}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 16}, spanEnd = SourcePos {posLine = 7, posColumn = 17}}, locValue = TokenNumber \"5\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 17}, spanEnd = SourcePos {posLine = 7, posColumn = 18}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 18}, spanEnd = SourcePos {posLine = 7, posColumn = 19}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 5}, spanEnd = SourcePos {posLine = 8, posColumn = 10}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 10}, spanEnd = SourcePos {posLine = 8, posColumn = 11}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 11}, spanEnd = SourcePos {posLine = 8, posColumn = 21}}, locValue = TokenString \"positive\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 21}, spanEnd = SourcePos {posLine = 8, posColumn = 22}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 9, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 9, posColumn = 1}, spanEnd = SourcePos {posLine = 9, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 9, posColumn = 1}, spanEnd = SourcePos {posLine = 9, posColumn = 5}}, locValue = TokenKeyword KwElse},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 9, posColumn = 5}, spanEnd = SourcePos {posLine = 9, posColumn = 6}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 9, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 10, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 10, posColumn = 5}, spanEnd = SourcePos {posLine = 10, posColumn = 10}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 10, posColumn = 10}, spanEnd = SourcePos {posLine = 10, posColumn = 11}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 10, posColumn = 11}, spanEnd = SourcePos {posLine = 10, posColumn = 25}}, locValue = TokenString \"non-positive\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 10, posColumn = 25}, spanEnd = SourcePos {posLine = 10, posColumn = 26}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 10, posColumn = 1}, spanEnd = SourcePos {posLine = 11, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = TokenDedent 0}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-boolean-returning-function-454cde8018bb83bc/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-boolean-returning-function-454cde8018bb83bc/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles boolean returning function/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  21) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles list returning function
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 0 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 4}}, locValue = TokenKeyword KwDef} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 4}}, locValue = TokenKeyword KwDef},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 5}, spanEnd = SourcePos {posLine = 1, posColumn = 13}}, locValue = TokenIdent \"pair_sum\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 13}, spanEnd = SourcePos {posLine = 1, posColumn = 14}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 14}, spanEnd = SourcePos {posLine = 1, posColumn = 15}}, locValue = TokenIdent \"a\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 15}, spanEnd = SourcePos {posLine = 1, posColumn = 16}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 17}, spanEnd = SourcePos {posLine = 1, posColumn = 18}}, locValue = TokenIdent \"b\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 18}, spanEnd = SourcePos {posLine = 1, posColumn = 19}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 19}, spanEnd = SourcePos {posLine = 1, posColumn = 20}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 5}, spanEnd = SourcePos {posLine = 2, posColumn = 11}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 12}, spanEnd = SourcePos {posLine = 2, posColumn = 13}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 14}, spanEnd = SourcePos {posLine = 2, posColumn = 15}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 15}, spanEnd = SourcePos {posLine = 2, posColumn = 16}}, locValue = TokenIdent \"a\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 16}, spanEnd = SourcePos {posLine = 2, posColumn = 17}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 18}, spanEnd = SourcePos {posLine = 2, posColumn = 19}}, locValue = TokenIdent \"b\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 19}, spanEnd = SourcePos {posLine = 2, posColumn = 20}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 21}, spanEnd = SourcePos {posLine = 2, posColumn = 22}}, locValue = TokenIdent \"a\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 23}, spanEnd = SourcePos {posLine = 2, posColumn = 24}}, locValue = TokenOperator OpPlus},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 25}, spanEnd = SourcePos {posLine = 2, posColumn = 26}}, locValue = TokenIdent \"b\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 26}, spanEnd = SourcePos {posLine = 2, posColumn = 27}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 5}, spanEnd = SourcePos {posLine = 3, posColumn = 11}}, locValue = TokenKeyword KwReturn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 12}, spanEnd = SourcePos {posLine = 3, posColumn = 18}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 18}, spanEnd = SourcePos {posLine = 3, posColumn = 19}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 19}, spanEnd = SourcePos {posLine = 3, posColumn = 20}}, locValue = TokenNumber \"2\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 20}, spanEnd = SourcePos {posLine = 3, posColumn = 21}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 6}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 6}, spanEnd = SourcePos {posLine = 5, posColumn = 7}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 7}, spanEnd = SourcePos {posLine = 5, posColumn = 15}}, locValue = TokenIdent \"pair_sum\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 15}, spanEnd = SourcePos {posLine = 5, posColumn = 16}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 16}, spanEnd = SourcePos {posLine = 5, posColumn = 17}}, locValue = TokenNumber \"3\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 17}, spanEnd = SourcePos {posLine = 5, posColumn = 18}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 19}, spanEnd = SourcePos {posLine = 5, posColumn = 20}}, locValue = TokenNumber \"4\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 20}, spanEnd = SourcePos {posLine = 5, posColumn = 21}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 21}, spanEnd = SourcePos {posLine = 5, posColumn = 22}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenNewline}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-list-returning-function-5e7b4cb091abaa19/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-list-returning-function-5e7b4cb091abaa19/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles list returning function/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1298:16: 
  22) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles nested while loops
       expected: "4\n"
        but got: "2\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles nested while loops/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  23) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles if elif chain
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 17 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 5}}, locValue = TokenKeyword KwElif} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 6}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 7}, spanEnd = SourcePos {posLine = 1, posColumn = 8}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 9}, spanEnd = SourcePos {posLine = 1, posColumn = 10}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 3}}, locValue = TokenKeyword KwIf},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 4}, spanEnd = SourcePos {posLine = 2, posColumn = 9}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 10}, spanEnd = SourcePos {posLine = 2, posColumn = 11}}, locValue = TokenOperator OpGt},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 12}, spanEnd = SourcePos {posLine = 2, posColumn = 13}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 13}, spanEnd = SourcePos {posLine = 2, posColumn = 14}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 5}, spanEnd = SourcePos {posLine = 3, posColumn = 10}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 10}, spanEnd = SourcePos {posLine = 3, posColumn = 11}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 11}, spanEnd = SourcePos {posLine = 3, posColumn = 21}}, locValue = TokenString \"positive\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 21}, spanEnd = SourcePos {posLine = 3, posColumn = 22}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 5}}, locValue = TokenKeyword KwElif},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 6}, spanEnd = SourcePos {posLine = 4, posColumn = 11}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 12}, spanEnd = SourcePos {posLine = 4, posColumn = 14}}, locValue = TokenOperator OpEq},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 15}, spanEnd = SourcePos {posLine = 4, posColumn = 16}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 16}, spanEnd = SourcePos {posLine = 4, posColumn = 17}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 5}, spanEnd = SourcePos {posLine = 5, posColumn = 10}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 10}, spanEnd = SourcePos {posLine = 5, posColumn = 11}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 11}, spanEnd = SourcePos {posLine = 5, posColumn = 17}}, locValue = TokenString \"zero\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 17}, spanEnd = SourcePos {posLine = 5, posColumn = 18}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 5}}, locValue = TokenKeyword KwElse},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 5}, spanEnd = SourcePos {posLine = 6, posColumn = 6}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 5}, spanEnd = SourcePos {posLine = 7, posColumn = 10}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 10}, spanEnd = SourcePos {posLine = 7, posColumn = 11}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 11}, spanEnd = SourcePos {posLine = 7, posColumn = 21}}, locValue = TokenString \"negative\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 21}, spanEnd = SourcePos {posLine = 7, posColumn = 22}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 7, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}}, locValue = TokenDedent 0}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-if-elif-chain-04a9b8e130114956/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-if-elif-chain-04a9b8e130114956/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles if elif chain/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  24) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles string multiplication
       Compilation failed: CodeGenError "C++ compilation failed (exit code 1): /tmp/fluxus-python-cpp-compiles-string-multiplication-b6cb9b7ea740562b/input.cpp: In function \8216int main()\8217:\n/tmp/fluxus-python-cpp-compiles-string-multiplication-b6cb9b7ea740562b/input.cpp:7:23: error: invalid operands of types \8216const char [3]\8217 and \8216int\8217 to binary \8216operator*\8217\n    7 |     std::cout << \"ha\" * 3 << std::endl;\n      |                  ~~~~ ^ ~\n      |                  |      |\n      |                  |      int\n      |                  const char [3]\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles string multiplication/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  25) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles boolean list counting
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = TrivialError 1 (Just (Tokens (Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign} :| []))) (fromList [EndOfInput]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 7}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 8}, spanEnd = SourcePos {posLine = 1, posColumn = 9}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 10}, spanEnd = SourcePos {posLine = 1, posColumn = 11}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 11}, spanEnd = SourcePos {posLine = 1, posColumn = 15}}, locValue = TokenKeyword KwTrue},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 15}, spanEnd = SourcePos {posLine = 1, posColumn = 16}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 17}, spanEnd = SourcePos {posLine = 1, posColumn = 22}}, locValue = TokenKeyword KwFalse},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 22}, spanEnd = SourcePos {posLine = 1, posColumn = 23}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 24}, spanEnd = SourcePos {posLine = 1, posColumn = 28}}, locValue = TokenKeyword KwTrue},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 28}, spanEnd = SourcePos {posLine = 1, posColumn = 29}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 30}, spanEnd = SourcePos {posLine = 1, posColumn = 34}}, locValue = TokenKeyword KwTrue},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 34}, spanEnd = SourcePos {posLine = 1, posColumn = 35}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 6}}, locValue = TokenIdent \"count\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 7}, spanEnd = SourcePos {posLine = 2, posColumn = 8}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 9}, spanEnd = SourcePos {posLine = 2, posColumn = 10}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 4}}, locValue = TokenKeyword KwFor},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 5}, spanEnd = SourcePos {posLine = 3, posColumn = 10}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 11}, spanEnd = SourcePos {posLine = 3, posColumn = 13}}, locValue = TokenKeyword KwIn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 14}, spanEnd = SourcePos {posLine = 3, posColumn = 20}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 20}, spanEnd = SourcePos {posLine = 3, posColumn = 21}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 5}, spanEnd = SourcePos {posLine = 4, posColumn = 7}}, locValue = TokenKeyword KwIf},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 8}, spanEnd = SourcePos {posLine = 4, posColumn = 13}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 13}, spanEnd = SourcePos {posLine = 4, posColumn = 14}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 9}}, locValue = TokenIndent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 9}, spanEnd = SourcePos {posLine = 5, posColumn = 14}}, locValue = TokenIdent \"count\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 15}, spanEnd = SourcePos {posLine = 5, posColumn = 16}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 17}, spanEnd = SourcePos {posLine = 5, posColumn = 22}}, locValue = TokenIdent \"count\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 23}, spanEnd = SourcePos {posLine = 5, posColumn = 24}}, locValue = TokenOperator OpPlus},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 25}, spanEnd = SourcePos {posLine = 5, posColumn = 26}}, locValue = TokenNumber \"1\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenDedent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 6}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 6}, spanEnd = SourcePos {posLine = 6, posColumn = 7}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 7}, spanEnd = SourcePos {posLine = 6, posColumn = 12}}, locValue = TokenIdent \"count\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 12}, spanEnd = SourcePos {posLine = 6, posColumn = 13}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 7, posColumn = 1}}, locValue = TokenNewline}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-boolean-list-counting-22152af672d1302a/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-boolean-list-counting-22152af672d1302a/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles boolean list counting/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1289:9: 
  26) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles min function loop
       Compilation failed: ParseError "ParseErrorBundle {bundleErrors = FancyError 45 (fromList [ErrorFail \"Expected literal\"]) :| [], bundlePosState = PosState {pstateInput = [Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 1, posColumn = 4}}, locValue = TokenKeyword KwDef},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 5}, spanEnd = SourcePos {posLine = 1, posColumn = 13}}, locValue = TokenIdent \"find_min\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 13}, spanEnd = SourcePos {posLine = 1, posColumn = 14}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 14}, spanEnd = SourcePos {posLine = 1, posColumn = 20}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 20}, spanEnd = SourcePos {posLine = 1, posColumn = 21}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 21}, spanEnd = SourcePos {posLine = 1, posColumn = 22}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 1, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 2, posColumn = 5}}, locValue = TokenIndent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 5}, spanEnd = SourcePos {posLine = 2, posColumn = 13}}, locValue = TokenIdent \"smallest\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 14}, spanEnd = SourcePos {posLine = 2, posColumn = 15}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 16}, spanEnd = SourcePos {posLine = 2, posColumn = 22}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 22}, spanEnd = SourcePos {posLine = 2, posColumn = 23}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 23}, spanEnd = SourcePos {posLine = 2, posColumn = 24}}, locValue = TokenNumber \"0\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 24}, spanEnd = SourcePos {posLine = 2, posColumn = 25}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 2, posColumn = 1}, spanEnd = SourcePos {posLine = 3, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 5}, spanEnd = SourcePos {posLine = 3, posColumn = 8}}, locValue = TokenKeyword KwFor},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 9}, spanEnd = SourcePos {posLine = 3, posColumn = 14}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 15}, spanEnd = SourcePos {posLine = 3, posColumn = 17}}, locValue = TokenKeyword KwIn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 18}, spanEnd = SourcePos {posLine = 3, posColumn = 24}}, locValue = TokenIdent \"values\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 24}, spanEnd = SourcePos {posLine = 3, posColumn = 25}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 3, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 4, posColumn = 9}}, locValue = TokenIndent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 9}, spanEnd = SourcePos {posLine = 4, posColumn = 11}}, locValue = TokenKeyword KwIf},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 12}, spanEnd = SourcePos {posLine = 4, posColumn = 17}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 18}, spanEnd = SourcePos {posLine = 4, posColumn = 19}}, locValue = TokenOperator OpLt},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 20}, spanEnd = SourcePos {posLine = 4, posColumn = 28}}, locValue = TokenIdent \"smallest\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 28}, spanEnd = SourcePos {posLine = 4, posColumn = 29}}, locValue = TokenDelimiter DelimColon},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 4, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 5, posColumn = 13}}, locValue = TokenIndent 12},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 13}, spanEnd = SourcePos {posLine = 5, posColumn = 21}}, locValue = TokenIdent \"smallest\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 22}, spanEnd = SourcePos {posLine = 5, posColumn = 23}}, locValue = TokenOperator OpAssign},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 24}, spanEnd = SourcePos {posLine = 5, posColumn = 29}}, locValue = TokenIdent \"value\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 5, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 5}}, locValue = TokenDedent 8},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 6, posColumn = 5}}, locValue = TokenDedent 12},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 5}, spanEnd = SourcePos {posLine = 6, posColumn = 11}}, locValue = TokenKeyword KwReturn},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 12}, spanEnd = SourcePos {posLine = 6, posColumn = 20}}, locValue = TokenIdent \"smallest\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 6, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 1}}, locValue = TokenNewline},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 1}}, locValue = TokenDedent 4},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 8, posColumn = 6}}, locValue = TokenIdent \"print\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 6}, spanEnd = SourcePos {posLine = 8, posColumn = 7}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 7}, spanEnd = SourcePos {posLine = 8, posColumn = 15}}, locValue = TokenIdent \"find_min\"},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 15}, spanEnd = SourcePos {posLine = 8, posColumn = 16}}, locValue = TokenDelimiter DelimLeftParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 16}, spanEnd = SourcePos {posLine = 8, posColumn = 17}}, locValue = TokenDelimiter DelimLeftBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 17}, spanEnd = SourcePos {posLine = 8, posColumn = 18}}, locValue = TokenNumber \"5\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 18}, spanEnd = SourcePos {posLine = 8, posColumn = 19}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 20}, spanEnd = SourcePos {posLine = 8, posColumn = 21}}, locValue = TokenNumber \"3\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 21}, spanEnd = SourcePos {posLine = 8, posColumn = 22}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 23}, spanEnd = SourcePos {posLine = 8, posColumn = 24}}, locValue = TokenNumber \"7\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 24}, spanEnd = SourcePos {posLine = 8, posColumn = 25}}, locValue = TokenDelimiter DelimComma},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 26}, spanEnd = SourcePos {posLine = 8, posColumn = 27}}, locValue = TokenNumber \"2\" False},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 27}, spanEnd = SourcePos {posLine = 8, posColumn = 28}}, locValue = TokenDelimiter DelimRightBracket},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 28}, spanEnd = SourcePos {posLine = 8, posColumn = 29}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 29}, spanEnd = SourcePos {posLine = 8, posColumn = 30}}, locValue = TokenDelimiter DelimRightParen},Located {locSpan = SourceSpan {spanFilename = \"<input>\", spanStart = SourcePos {posLine = 8, posColumn = 1}, spanEnd = SourcePos {posLine = 9, posColumn = 1}}, locValue = TokenNewline}], pstateOffset = 0, pstateSourcePos = SourcePos {sourceName = \"/tmp/fluxus-python-cpp-compiles-min-function-loop-8c6e15eea63992e5/input.py\", sourceLine = Pos 1, sourceColumn = Pos 1}, pstateTabWidth = Pos 8, pstateLinePrefix = \"\"}}" (SourceSpan {spanFilename = "/tmp/fluxus-python-cpp-compiles-min-function-loop-8c6e15eea63992e5/input.py", spanStart = SourcePos {posLine = 0, posColumn = 0}, spanEnd = SourcePos {posLine = 0, posColumn = 0}})

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles min function loop/" --seed 770573865

  test/Test/Fluxus/CodeGen/CPP.hs:1298:16: 
  27) HyperStatic Compiler Test Suite, C++ Code Generation, Python end-to-end compilation, compiles loop string accumulation
       expected: "012\n"
        but got: "{i}{i}{i}\n"

  To rerun use: --match "/HyperStatic Compiler Test Suite/C++ Code Generation/Python end-to-end compilation/compiles loop string accumulation/" --seed 770573865

Randomized with seed 770573865

Finished in 55.8430 seconds
190 examples, 27 failures
