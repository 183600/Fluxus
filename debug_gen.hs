import Fluxus.Parser.Go.Parser
import Fluxus.CodeGen.CPP
import Fluxus.AST.Go
import qualified Data.Text.IO as TIO
import System.Environment (getArgs)
import Data.Text (Text)
import qualified Data.Text as T

main :: IO ()
main = do
    args <- getArgs
    case args of
        [filename] -> do
            content <- TIO.readFile filename
            case parseGoFile filename content of
                Left err -> putStrLn $ "Parse error: " ++ show err
                Right ast -> do
                    putStrLn "Successfully parsed Go AST"
                    let config = defaultCppGenConfig
                    let cppUnit = generateCpp config (Right ast)
                    putStrLn "Generated C++ code:"
                    printCppUnit cppUnit
        _ -> putStrLn "Usage: debug_gen <go-file>"

printCppUnit :: CppUnit -> IO ()
printCppUnit (CppUnit includes namespaces decls) = do
    putStrLn "// Generated by HyperStatic/CXX Compiler"
    mapM_ (putStrLn . T.unpack . ("#include " <>)) includes
    putStrLn ""
    mapM_ (putStrLn . T.unpack . cppDeclToText) decls

cppDeclToText :: CppDecl -> Text
ncppDeclToText decl = case decl of
    CppFunction name rtype params body ->
        T.unlines [
            "int " <> name <> "() {",
            "    return 0;",
            "}"
            ]
    _ -> "// Other declaration"