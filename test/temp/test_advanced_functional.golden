=== Advanced Python Functional Programming Patterns ===
=== Advanced Combinatorics ===
All product combinations: 12
  ('red', 'S', 'cotton')
  ('red', 'S', 'silk')
  ('red', 'M', 'cotton')
  ('red', 'M', 'silk')
  ('red', 'L', 'cotton')

Permutations of ['A', 'B', 'C']:
  Length 1: [('A',), ('B',), ('C',)]
  Length 2: [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]
  Length 3: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]

Combinations with replacement: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]

=== Infinite Iterators ===
Cycling through ['A', 'B', 'C']:
  A
  B
  C
  A
  B
  C
  A
  B
  C
  A

Counting from 10 by 2.5:
  10
  12.5
  15.0
  17.5
  20.0

Accumulated multiplication: [1, 2, 6, 24, 120]
Accumulated strings: ['Hello', 'Hello ', 'Hello World', 'Hello World!']

=== Iterator Aggregation ===
Chained: [1, 2, 3, 'a', 'b', 'c', True, False]
Chained from iterable: [1, 2, 3, 4, 5, 6]
Compressed: ['A', 'C', 'E']
Dropwhile (<5): [5, 2, 4, 6, 8]
Takewhile (<5): [1, 3]
Evens: [2, 4, 6, 8, 10]
Odds: [1, 3, 5, 7, 9]

=== Iterator Grouping ===
Grouped by first letter: {'a': ['apple', 'apricot'], 'b': ['banana', 'blueberry'], 'c': ['cherry', 'cranberry']}
Partitioned into 4: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]
Sliding windows (size 3): [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]

=== Function Composition ===
Composed function result: 49
Pipeline result: [8, 12, 16, 20]

=== Partial Function Application ===
Square of 5: 25
Cube of 3: 27
US price (base=100, discount=0.1): 97.2
EU price (base=100, discount=0.1): 108.0

=== Function Memoization ===
Computing Fibonacci numbers:
Computing result for (5,)
Computing result for (4,)
Computing result for (3,)
Computing result for (2,)
Computing result for (1,)
Computing result for (0,)
Cache hit for (1,)
Cache hit for (2,)
Cache hit for (3,)
Fibonacci(5): 5
Computing result for (7,)
Computing result for (6,)
Cache hit for (5,)
Cache hit for (4,)
Cache hit for (5,)
Fibonacci(7): 13
Cache hit for (5,)
Fibonacci(5) again: 5
Cache info: Cache size: 8

Cached power results:
Computing 2^10
2^10: 1024
Computing 3^5
3^5: 243
2^10 again: 1024
Cache stats: CacheInfo(hits=1, misses=2, maxsize=32, currsize=2)

=== Monad-like Patterns ===
Safe computation result: Maybe(2.0)
Result monad: Ok(2.0)
Error case: Error(Cannot sqrt negative number)

=== Advanced Data Processing ===
People grouped by city:
  Chicago: 2 people, avg salary: $56,500
  New York: 2 people, avg salary: $55,000
  San Francisco: 2 people, avg salary: $77,500

High earners (>$60k): [('Bob', 75000), ('Eve', 80000)]

People sorted by city and salary (descending):
  Eve (San Francisco): $80,000
  Bob (San Francisco): $75,000
  Charlie (New York): $60,000
  Alice (New York): $50,000
  Frank (Chicago): $58,000
  Diana (Chicago): $55,000

Salary statistics:
  Total: $378,000
  Average: $63,000
  Max: $80,000
  Min: $50,000

=== Advanced Functional Utilities ===
Curried function result: 10
Composed with reduce: 49
Complex filter result: [12, 18]
Partitioned evens: [0, 2, 4, 6, 8]
Partitioned odds: [1, 3, 5, 7, 9]

=== All functional programming tests completed successfully! ===