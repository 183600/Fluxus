=== Type Conversion ===
int('123'): 123
int(45.67): 45
int('1010', 2): 10
int('FF', 16): 255
float('3.14'): 3.14
float(5): 5.0
str(123): 123
str(3.14): 3.14
bool(0): False
bool(1): True
bool(''): False
bool('hello'): True
bool([]): False
bool([1]): True

=== Math Functions ===
abs(-5): 5
abs(-3.14): 3.14
round(3.14159): 3
round(3.14159, 2): 3.14
round(3.5): 4
pow(2, 3): 8
pow(2, 3, 5): 3

=== Sequence Functions ===
len(numbers): 5
min(numbers): 1
max(numbers): 5
sum(numbers): 15
min('hello'): e
max('hello'): o

=== sorted and reversed ===
sorted(unsorted): [1, 1, 2, 3, 4, 5, 6, 9]
sorted(unsorted, reverse=True): [9, 6, 5, 4, 3, 2, 1, 1]
list(reversed(text)): ['o', 'l', 'l', 'e', 'h']
list(reversed([1,2,3])): [3, 2, 1]

=== range ===
list(range(5)): [0, 1, 2, 3, 4]
list(range(2, 8)): [2, 3, 4, 5, 6, 7]
list(range(0, 10, 2)): [0, 2, 4, 6, 8]
list(range(10, 0, -1)): [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

=== enumerate ===
  0: apple
  1: banana
  2: cherry
  1: apple
  2: banana
  3: cherry

=== zip ===
  Alice, 25, NYC
  Bob, 30, LA
  Charlie, 35, SF
zipped: [('Alice', 25), ('Bob', 30), ('Charlie', 35)]

=== map ===
squared: [1, 4, 9, 16, 25]
upper: ['HELLO', 'WORLD', 'PYTHON']

=== filter ===
even: [2, 4, 6, 8, 10]
words starting with 'a': ['apple', 'avocado']

=== all and any ===
all([True, True, True]): True
all([True, False, True]): False
all([]): True
any([False, False, False]): False
any([False, True, False]): True
any([]): False
all even: True

=== type and isinstance ===
type(5): <class 'int'>
isinstance(5, int): True
isinstance(5, (int, float)): True
type('hello'): <class 'str'>
isinstance('hello', str): True

=== callable ===
callable(my_func): True
callable(5): False
callable(lambda x: x): True

=== id ===
id(a) == id(b): True
id(a) == id(c): False

=== divmod ===
divmod(17, 5): 3, 2

=== chr and ord ===
ord('A'): 65
chr(65): A
ord('a'): 97
chr(97): a

=== hex, oct, bin ===
hex(255): 0xff
oct(8): 0o10
bin(10): 0b1010

=== Collection Constructors ===
list('hello'): ['h', 'e', 'l', 'l', 'o']
tuple([1,2,3]): (1, 2, 3)
set([1,2,2,3,3]): {1, 2, 3}
dict([('a',1), ('b',2)]): {'a': 1, 'b': 2}

=== Unzipping ===
numbers: (1, 2, 3)
letters: ('a', 'b', 'c')

=== Attribute Functions ===
hasattr(obj, 'x'): True
getattr(obj, 'x'): 10
getattr(obj, 'y'): 20
getattr(obj, 'z', 'default'): default

=== All builtin function tests completed ===