{
  "timestamp": "2025-10-11T17:28:25.004Z",
  "summary": {
    "total": 59,
    "passed": 59,
    "failed": 0,
    "successRate": "100.0"
  },
  "results": [
    {
      "name": "basic_arithmetic",
      "group": "Basic",
      "success": true,
      "error": null,
      "pythonOutput": "Sum: 30\nDifference: 10\nProduct: 200\nQuotient: 2\nRemainder: 0",
      "cppOutput": "Sum: 30\nDifference: 10\nProduct: 200\nQuotient: 2\nRemainder: 0"
    },
    {
      "name": "feature_async",
      "group": "Feature",
      "success": true,
      "error": null,
      "pythonOutput": "processed: data fetched",
      "cppOutput": "processed: data fetched"
    },
    {
      "name": "feature_decorator",
      "group": "Feature",
      "success": true,
      "error": null,
      "pythonOutput": "Before function call\nHello from decorated function!\nAfter function call\nResult: greeting completed",
      "cppOutput": "Before function call\nHello from decorated function!\nAfter function call\nResult: greeting completed"
    },
    {
      "name": "feature_exception",
      "group": "Feature",
      "success": true,
      "error": null,
      "pythonOutput": "10 / 2 = 5.0\nError: Cannot divide by zero!\n10 / 0 = None\nFinally block executed\n20 / 4 = 5.0",
      "cppOutput": "10 / 2 = 5.0\nError: Cannot divide by zero!\n10 / 0 = None\nFinally block executed\n20 / 4 = 5.0"
    },
    {
      "name": "feature_fstring",
      "group": "Feature",
      "success": true,
      "error": null,
      "pythonOutput": "Hello, Alice!\nAlice is 30 years old.\nAlice was born around 1994.\nThe temperature is 23.5°C",
      "cppOutput": "Hello, Alice!\nAlice is 30 years old.\nAlice was born around 1994.\nThe temperature is 23.5°C"
    },
    {
      "name": "feature_list_comprehension",
      "group": "Feature",
      "success": true,
      "error": null,
      "pythonOutput": "Squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nEvens: [2, 4, 6, 8, 10]\nDoubled odds: [2, 6, 10, 14, 18]\nFlattened matrix: [1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "cppOutput": "Squares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nEvens: [2, 4, 6, 8, 10]\nDoubled odds: [2, 6, 10, 14, 18]\nFlattened matrix: [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
      "name": "feature_with",
      "group": "Feature",
      "success": true,
      "error": null,
      "pythonOutput": "Opening file: test.txt\nWorking with file_handle_test.txt\nClosing file: test.txt\nFile operation completed",
      "cppOutput": "Opening file: test.txt\nWorking with file_handle_test.txt\nClosing file: test.txt\nFile operation completed"
    },
    {
      "name": "test_abstract_base_classes",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python Abstract Base Classes (ABC) Demonstration\n============================================================\n=== Testing Basic Abstract Base Classes ===\nShape: This is a Circle\nArea: 78.54\nPerimeter: 31.42\n\nShape: This is a Rectangle\nArea: 24.00\nPerimeter: 20.00\n\n=== Testing Abstract Base Classes with Properties ===\nVehicle type: Car\nBrand: Toyota, Model: Camry\nStart engine: Toyota Camry car engine started\nCurrent speed: 50 km/h\nAccelerated to: 100 km/h\nStop engine: Toyota Camry engine stopped\nSpeed after stopping: 0 km/h\n--------------------------------------------------\nVehicle type: Motorcycle\nBrand: Harley-Davidson, Model: Street 750\nStart engine: Harley-Davidson Street 750 motorcycle engine started\nCurrent speed: 50 km/h\nAccelerated to: 100 km/h\nStop engine: Harley-Davidson Street 750 engine stopped\nSpeed after stopping: 0 km/h\n--------------------------------------------------\n=== Testing Abstract Method Enforcement ===\n✓ Correctly prevented abstract class instantiation: Can't instantiate abstract class Shape without an implementation for abstract methods 'area', 'perimeter'\n✓ Correctly prevented incomplete implementation: Can't instantiate abstract class IncompleteShape without an implementation for abstract method 'perimeter'\n\n=== Testing Virtual Subclass Registration ===\nIs Circle2 a subclass of Drawable? True\nIs circle an instance of Drawable? True\nDrawing: Drawing circle with radius 5\n\n=== Testing Abstract Properties ===\nRead-only value: read-only-value\nRead-write value (initial): initial-value\nRead-write value (updated): new-value\n✓ Correctly prevented setting read-only property: property 'read_only_value' of 'ConcreteDemo' object has no setter\n\n=== Type Checking and Validation ===\nCircle is subclass of Shape: True\nRectangle is subclass of Shape: True\nCircle instance is Shape: True\nRectangle instance is Shape: True\n\n=== ABC Module Features ===\nShape abstract methods: frozenset({'perimeter', 'area'})\nVehicle abstract methods: frozenset({'vehicle_type', 'speed', 'start_engine'})\nShape is ABC: True\nCircle is ABC: True\n\n=== ABC demonstration completed ===\nKey concepts covered:\n- Abstract methods (@abstractmethod)\n- Abstract properties (@property + @abstractmethod)\n- Abstract base class instantiation prevention\n- Virtual subclass registration\n- Type checking with abstract base classes",
      "cppOutput": "Python Abstract Base Classes (ABC) Demonstration\n============================================================\n=== Testing Basic Abstract Base Classes ===\nShape: This is a Circle\nArea: 78.54\nPerimeter: 31.42\n\nShape: This is a Rectangle\nArea: 24.00\nPerimeter: 20.00\n\n=== Testing Abstract Base Classes with Properties ===\nVehicle type: Car\nBrand: Toyota, Model: Camry\nStart engine: Toyota Camry car engine started\nCurrent speed: 50 km/h\nAccelerated to: 100 km/h\nStop engine: Toyota Camry engine stopped\nSpeed after stopping: 0 km/h\n--------------------------------------------------\nVehicle type: Motorcycle\nBrand: Harley-Davidson, Model: Street 750\nStart engine: Harley-Davidson Street 750 motorcycle engine started\nCurrent speed: 50 km/h\nAccelerated to: 100 km/h\nStop engine: Harley-Davidson Street 750 engine stopped\nSpeed after stopping: 0 km/h\n--------------------------------------------------\n=== Testing Abstract Method Enforcement ===\n✓ Correctly prevented abstract class instantiation: Can't instantiate abstract class Shape without an implementation for abstract methods 'area', 'perimeter'\n✓ Correctly prevented incomplete implementation: Can't instantiate abstract class IncompleteShape without an implementation for abstract method 'perimeter'\n\n=== Testing Virtual Subclass Registration ===\nIs Circle2 a subclass of Drawable? True\nIs circle an instance of Drawable? True\nDrawing: Drawing circle with radius 5\n\n=== Testing Abstract Properties ===\nRead-only value: read-only-value\nRead-write value (initial): initial-value\nRead-write value (updated): new-value\n✓ Correctly prevented setting read-only property: property 'read_only_value' of 'ConcreteDemo' object has no setter\n\n=== Type Checking and Validation ===\nCircle is subclass of Shape: True\nRectangle is subclass of Shape: True\nCircle instance is Shape: True\nRectangle instance is Shape: True\n\n=== ABC Module Features ===\nShape abstract methods: frozenset({'perimeter', 'area'})\nVehicle abstract methods: frozenset({'vehicle_type', 'speed', 'start_engine'})\nShape is ABC: True\nCircle is ABC: True\n\n=== ABC demonstration completed ===\nKey concepts covered:\n- Abstract methods (@abstractmethod)\n- Abstract properties (@property + @abstractmethod)\n- Abstract base class instantiation prevention\n- Virtual subclass registration\n- Type checking with abstract base classes"
    },
    {
      "name": "test_advanced_async",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Basic Async Test ===\nCoroutine started\nCoroutine completed\nResult: coroutine result\n\n=== Multiple Coroutines Test ===\nStarting multiple coroutines\nOperation 0 started\nOperation 1 started\nOperation 2 started\nOperation 0 completed\nOperation 1 completed\nOperation 2 completed\nAll results: ['result_0', 'result_1', 'result_2']\nResults: ['result_0', 'result_1', 'result_2']\n\n=== Execution Patterns Test ===\n=== Sequential Execution ===\nOperation 1 started\nOperation 1 completed\nOperation 2 started\nOperation 2 completed\nOperation 3 started\nOperation 3 completed\nSequential time: 3.00s\n\n=== Parallel Execution ===\nOperation 1 started\nOperation 2 started\nOperation 3 started\nOperation 1 completed\nOperation 2 completed\nOperation 3 completed\nParallel time: 1.50s\n\n=== Advanced Features Test ===\nTimeout occurred as expected\nEntering async context\nInside async context\nManager: <__main__.async_context_manager.<locals>.AsyncContextManager object at 0xADDR>\nExiting async context\n=== Async Iterator ===\nAsync iteration: 1\nAsync iteration: 2\nAsync iteration: 3\n=== Async Generator ===\nGenerated: 1\nGenerated: 2\nGenerated: 3\nGenerated from comprehension: 10\nGenerated from comprehension: 11\nGenerated from comprehension: 12\n\n=== Exception Handling Test ===\nCaught expected error: Intentional error\nOperation 1 started\nOperation 2 started\nGather caught error: Intentional error\nOperation 1 started\nOperation 2 started\nOperation 1 completed\nOperation 1 completed\nOperation 2 completed\nOperation 2 completed\nResults with exceptions: ['result_1', ValueError('Intentional error'), 'result_2']\n\n=== Pattern Tests ===\nProducing item 0\nConsuming item item_0\nProducing item 1\nConsuming item item_1\nProducing item 2\nProducing item 3\nConsuming item item_2\nProducing item 4\nConsuming item item_3\nConsuming item item_4\nTask 0 acquired lock\nTask 0 released lock\nTask 1 acquired lock\nTask 1 released lock\nTask 2 acquired lock\nTask 2 released lock\nTask 0 started\nTask 1 started\nTask 0 completed\nTask 1 completed\nTask 2 started\nTask 3 started\nTask 2 completed\nTask 3 completed\nTask 4 started\nTask 4 completed\nWaiting for event...\nSetting event\nEvent occurred!\nProducer added data\nConsumer got data: data\n\n=== Integration Test ===\nBlocking operation result: Blocked for 1 seconds\n\n=== Cancellation Test ===\nLong running task started\nTask progress: 0/10\nTask progress: 1/10\nCancelling task...\nTask was cancelled\nTask cancelled successfully\nShielded operation started\nShielded operation completed\nShielded result: shielded result\n\n=== All advanced async tests passed! ===",
      "cppOutput": "=== Basic Async Test ===\nCoroutine started\nCoroutine completed\nResult: coroutine result\n\n=== Multiple Coroutines Test ===\nStarting multiple coroutines\nOperation 0 started\nOperation 1 started\nOperation 2 started\nOperation 0 completed\nOperation 1 completed\nOperation 2 completed\nAll results: ['result_0', 'result_1', 'result_2']\nResults: ['result_0', 'result_1', 'result_2']\n\n=== Execution Patterns Test ===\n=== Sequential Execution ===\nOperation 1 started\nOperation 1 completed\nOperation 2 started\nOperation 2 completed\nOperation 3 started\nOperation 3 completed\nSequential time: 3.00s\n\n=== Parallel Execution ===\nOperation 1 started\nOperation 2 started\nOperation 3 started\nOperation 1 completed\nOperation 2 completed\nOperation 3 completed\nParallel time: 1.50s\n\n=== Advanced Features Test ===\nTimeout occurred as expected\nEntering async context\nInside async context\nManager: <__main__.async_context_manager.<locals>.AsyncContextManager object at 0xADDR>\nExiting async context\n=== Async Iterator ===\nAsync iteration: 1\nAsync iteration: 2\nAsync iteration: 3\n=== Async Generator ===\nGenerated: 1\nGenerated: 2\nGenerated: 3\nGenerated from comprehension: 10\nGenerated from comprehension: 11\nGenerated from comprehension: 12\n\n=== Exception Handling Test ===\nCaught expected error: Intentional error\nOperation 1 started\nOperation 2 started\nGather caught error: Intentional error\nOperation 1 started\nOperation 2 started\nOperation 1 completed\nOperation 1 completed\nOperation 2 completed\nOperation 2 completed\nResults with exceptions: ['result_1', ValueError('Intentional error'), 'result_2']\n\n=== Pattern Tests ===\nProducing item 0\nConsuming item item_0\nProducing item 1\nConsuming item item_1\nProducing item 2\nProducing item 3\nConsuming item item_2\nProducing item 4\nConsuming item item_3\nConsuming item item_4\nTask 0 acquired lock\nTask 0 released lock\nTask 1 acquired lock\nTask 1 released lock\nTask 2 acquired lock\nTask 2 released lock\nTask 0 started\nTask 1 started\nTask 0 completed\nTask 1 completed\nTask 2 started\nTask 3 started\nTask 2 completed\nTask 3 completed\nTask 4 started\nTask 4 completed\nWaiting for event...\nSetting event\nEvent occurred!\nProducer added data\nConsumer got data: data\n\n=== Integration Test ===\nBlocking operation result: Blocked for 1 seconds\n\n=== Cancellation Test ===\nLong running task started\nTask progress: 0/10\nTask progress: 1/10\nCancelling task...\nTask was cancelled\nTask cancelled successfully\nShielded operation started\nShielded operation completed\nShielded result: shielded result\n\n=== All advanced async tests passed! ==="
    },
    {
      "name": "test_advanced_asyncio",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Advanced Python Asyncio and Concurrency Patterns ===\n=== Testing Advanced Async Generators ===\n\n--- Fibonacci Async Generator ---\nFibonacci: 0\nFibonacci: 1\nFibonacci: 1\nFibonacci: 2\nFibonacci: 3\nFibonacci: 5\nFibonacci: 8\nFibonacci: 13\nFibonacci: 21\nFibonacci: 34\n\n--- Streaming Data Async Generator ---\nSensor data: {'timestamp': TS, 'value': 33, 'sensor_id': 'sensor_0', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 18, 'sensor_id': 'sensor_1', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 18, 'sensor_id': 'sensor_2', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 85, 'sensor_id': 'sensor_0', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 54, 'sensor_id': 'sensor_1', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 100, 'sensor_id': 'sensor_2', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 26, 'sensor_id': 'sensor_0', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 90, 'sensor_id': 'sensor_1', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 54, 'sensor_id': 'sensor_2', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 93, 'sensor_id': 'sensor_0', 'status': 'ok'}\n\n=== Testing Advanced Async Context Managers ===\n\n--- Async Database Connection ---\nOpening async database connection: postgresql://localhost:5432/mydb\nQuery results: [{'id': 1, 'name': 'Alice', 'email': 'alice@example.com'}, {'id': 2, 'name': 'Bob', 'email': 'bob@example.com'}]\nClosing async database connection\n\n--- Async File Manager ---\nOpening async file: test.txt\nFile line: Line 1: Hello, World!\nFile line: Line 2: Async file reading\nFile line: Line 3: With context managers\nClosing async file: test.txt\n\n--- Async Resource Pool ---\nInitialized resource pool with 3 resources\nAcquired resource: resource_0\nAcquired resource: resource_1\nPool stats: {'total_resources': 3, 'available_resources': 1, 'in_use_resources': 2}\nReleased resource: resource_0\nReleased resource: resource_1\nFinal pool stats: {'total_resources': 3, 'available_resources': 3, 'in_use_resources': 0}\nResource pool cleaned up\n\n=== Testing Async Synchronization ===\nReader 0 reading data: []\nReader 1 reading data: []\nReader 2 reading data: []\nReader 3 reading data: []\nReader 4 reading data: []\nReader 0 finished reading\nReader 1 finished reading\nReader 2 finished reading\nReader 3 finished reading\nReader 4 finished reading\nWriter 0 writing data: data_0\nWriter 0 finished writing\nWriter 2 writing data: data_2\nWriter 2 finished writing\nWriter 4 writing data: data_4\nWriter 4 finished writing\nFinal shared data: ['data_0', 'data_2', 'data_4']\n\n=== Testing Async Worker Pool ===\nStarted worker pool with 3 workers\nTask 1 started (duration: 0.5s)\nTask 2 started (duration: 1.0s)\nTask 3 started (duration: 0.3s)\nTask 3 completed\nWorker 2 completed task: Task 3 result\nTask 4 started (duration: 0.8s)\nTask 1 completed\nWorker 0 completed task: Task 1 result\nTask 5 started (duration: 0.2s)\nTask 5 completed\nWorker 0 completed task: Task 5 result\nTask 2 completed\nWorker 1 completed task: Task 2 result\nTask 4 completed\nWorker 2 completed task: Task 4 result\nWorker pool stopped\nWorker pool results: ['Task 3 result', 'Task 1 result', 'Task 5 result', 'Task 2 result', 'Task 4 result']\n\n=== Testing Async Event Bus ===\nSubscribed to event type: user_created\nSubscribed to event type: email_sent\nSubscribed to event type: user_created\nUser created handler received: {'user_id': 123, 'name': 'Alice'}\nNotification handler received: {'user_id': 123, 'name': 'Alice'}\nEmail sent handler received: {'email_id': 456, 'recipient': 'alice@example.com'}\nUser created handler received: {'user_id': 789, 'name': 'Bob'}\nNotification handler received: {'user_id': 789, 'name': 'Bob'}\nEvent acknowledged by 2 handlers\n\n=== Testing Async Task Manager ===\nTask 1 started (duration: 0.5s)\nTask 2 started (duration: 1.0s)\nTask 1 completed\nTask 2 completed\n\nTask Status:\nTask Task-XX: {'name': 'sample_task_1', 'created_at': TS, 'status': 'completed', 'metadata': {}, 'completed_at': TS, 'duration': 0.5009002685546875}\nTask Task-XX: {'name': 'sample_task_2', 'created_at': TS, 'status': 'completed', 'metadata': {'priority': 'high'}, 'completed_at': TS, 'duration': 1.001523733139038}\nTask Task-XX: {'name': 'failing_task', 'created_at': TS, 'status': 'failed', 'metadata': {}, 'error': 'Simulated task failure', 'completed_at': TS, 'duration': 0.10030078887939453}\nRunning tasks: []\n\n=== Testing Advanced Async Networking ===\nURL: https://httpbin.org/delay/1\nResult: Error: name 'async_timeout' is not defined\n\nURL: https://httpbin.org/status/200\nResult: Error: name 'async_timeout' is not defined\n\nURL: https://httpbin.org/json\nResult: Error: name 'async_timeout' is not defined\n\nURL: https://httpbin.org/delay/2\nResult: Error: name 'async_timeout' is not defined\n\n\n=== All asyncio tests completed successfully! ===",
      "cppOutput": "=== Advanced Python Asyncio and Concurrency Patterns ===\n=== Testing Advanced Async Generators ===\n\n--- Fibonacci Async Generator ---\nFibonacci: 0\nFibonacci: 1\nFibonacci: 1\nFibonacci: 2\nFibonacci: 3\nFibonacci: 5\nFibonacci: 8\nFibonacci: 13\nFibonacci: 21\nFibonacci: 34\n\n--- Streaming Data Async Generator ---\nSensor data: {'timestamp': TS, 'value': 33, 'sensor_id': 'sensor_0', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 18, 'sensor_id': 'sensor_1', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 18, 'sensor_id': 'sensor_2', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 85, 'sensor_id': 'sensor_0', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 54, 'sensor_id': 'sensor_1', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 100, 'sensor_id': 'sensor_2', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 26, 'sensor_id': 'sensor_0', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 90, 'sensor_id': 'sensor_1', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 54, 'sensor_id': 'sensor_2', 'status': 'ok'}\nSensor data: {'timestamp': TS, 'value': 93, 'sensor_id': 'sensor_0', 'status': 'ok'}\n\n=== Testing Advanced Async Context Managers ===\n\n--- Async Database Connection ---\nOpening async database connection: postgresql://localhost:5432/mydb\nQuery results: [{'id': 1, 'name': 'Alice', 'email': 'alice@example.com'}, {'id': 2, 'name': 'Bob', 'email': 'bob@example.com'}]\nClosing async database connection\n\n--- Async File Manager ---\nOpening async file: test.txt\nFile line: Line 1: Hello, World!\nFile line: Line 2: Async file reading\nFile line: Line 3: With context managers\nClosing async file: test.txt\n\n--- Async Resource Pool ---\nInitialized resource pool with 3 resources\nAcquired resource: resource_0\nAcquired resource: resource_1\nPool stats: {'total_resources': 3, 'available_resources': 1, 'in_use_resources': 2}\nReleased resource: resource_0\nReleased resource: resource_1\nFinal pool stats: {'total_resources': 3, 'available_resources': 3, 'in_use_resources': 0}\nResource pool cleaned up\n\n=== Testing Async Synchronization ===\nReader 0 reading data: []\nReader 1 reading data: []\nReader 2 reading data: []\nReader 3 reading data: []\nReader 4 reading data: []\nReader 0 finished reading\nReader 1 finished reading\nReader 2 finished reading\nReader 3 finished reading\nReader 4 finished reading\nWriter 0 writing data: data_0\nWriter 0 finished writing\nWriter 2 writing data: data_2\nWriter 2 finished writing\nWriter 4 writing data: data_4\nWriter 4 finished writing\nFinal shared data: ['data_0', 'data_2', 'data_4']\n\n=== Testing Async Worker Pool ===\nStarted worker pool with 3 workers\nTask 1 started (duration: 0.5s)\nTask 2 started (duration: 1.0s)\nTask 3 started (duration: 0.3s)\nTask 3 completed\nWorker 2 completed task: Task 3 result\nTask 4 started (duration: 0.8s)\nTask 1 completed\nWorker 0 completed task: Task 1 result\nTask 5 started (duration: 0.2s)\nTask 5 completed\nWorker 0 completed task: Task 5 result\nTask 2 completed\nWorker 1 completed task: Task 2 result\nTask 4 completed\nWorker 2 completed task: Task 4 result\nWorker pool stopped\nWorker pool results: ['Task 3 result', 'Task 1 result', 'Task 5 result', 'Task 2 result', 'Task 4 result']\n\n=== Testing Async Event Bus ===\nSubscribed to event type: user_created\nSubscribed to event type: email_sent\nSubscribed to event type: user_created\nUser created handler received: {'user_id': 123, 'name': 'Alice'}\nNotification handler received: {'user_id': 123, 'name': 'Alice'}\nEmail sent handler received: {'email_id': 456, 'recipient': 'alice@example.com'}\nUser created handler received: {'user_id': 789, 'name': 'Bob'}\nNotification handler received: {'user_id': 789, 'name': 'Bob'}\nEvent acknowledged by 2 handlers\n\n=== Testing Async Task Manager ===\nTask 1 started (duration: 0.5s)\nTask 2 started (duration: 1.0s)\nTask 1 completed\nTask 2 completed\n\nTask Status:\nTask Task-XX: {'name': 'sample_task_1', 'created_at': TS, 'status': 'completed', 'metadata': {}, 'completed_at': TS, 'duration': 0.5009002685546875}\nTask Task-XX: {'name': 'sample_task_2', 'created_at': TS, 'status': 'completed', 'metadata': {'priority': 'high'}, 'completed_at': TS, 'duration': 1.001523733139038}\nTask Task-XX: {'name': 'failing_task', 'created_at': TS, 'status': 'failed', 'metadata': {}, 'error': 'Simulated task failure', 'completed_at': TS, 'duration': 0.10030078887939453}\nRunning tasks: []\n\n=== Testing Advanced Async Networking ===\nURL: https://httpbin.org/delay/1\nResult: Error: name 'async_timeout' is not defined\n\nURL: https://httpbin.org/status/200\nResult: Error: name 'async_timeout' is not defined\n\nURL: https://httpbin.org/json\nResult: Error: name 'async_timeout' is not defined\n\nURL: https://httpbin.org/delay/2\nResult: Error: name 'async_timeout' is not defined\n\n\n=== All asyncio tests completed successfully! ==="
    },
    {
      "name": "test_advanced_decorators",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Advanced Python Decorator Patterns ===\n=== Testing Class Decorators ===\n\n--- Singleton Decorator ---\nDatabase connection established: postgresql://localhost:5432/mydb\ndb1 is db2: True\nConnection string: postgresql://localhost:5432/mydb\n\n--- Instance Counting Decorator ---\nPerson instances created: 3\nPerson 1: Person(name='Alice', age=25)\nPerson 2: Person(name='Bob', age=30)\nPerson 3: Person(name='Charlie', age=35)\n\n=== Testing Parameterized Decorators ===\n\n--- Retry Decorator ---\nAttempting division: 10 / 2\nDivision result: 5.0\nAttempting division: 10 / 0\nAttempting division: 10 / 0\nAttempting division: 10 / 0\nDivision failed after retries: Division by zero\n\n--- Timeout Decorator ---\nStarting slow operation for 1.0 seconds...\nSlow operation result: Operation completed after 1.0 seconds\nStarting slow operation for 3.0 seconds...\nOperation timed out: Function slow_operation timed out after 2.0 seconds\n\n--- Cache with TTL Decorator ---\nCache miss for expensive_calculation(<__main__.Calculator object at 0xADDR>, 5)\nPerforming expensive calculation for n=5\nFirst call result: 30\nCache hit for expensive_calculation(<__main__.Calculator object at 0xADDR>, 5)\nSecond call result (cached): 30\nCache info: {'size': 1, 'keys': ['(<__main__.Calculator object at 0xADDR>, 5)[]']}\nWaiting for cache to expire...\nCache miss for expensive_calculation(<__main__.Calculator object at 0xADDR>, 5)\nPerforming expensive calculation for n=5\nThird call result (after cache expiry): 30\n\n--- Rate Limiting Decorator ---\nMaking API call to: /api/endpoint0\nAPI call 1: Response from /api/endpoint0\nMaking API call to: /api/endpoint1\nAPI call 2: Response from /api/endpoint1\nMaking API call to: /api/endpoint2\nAPI call 3: Response from /api/endpoint2\nRate limit exceeded: Rate limit exceeded. Wait 5.0 seconds.\n\n=== Testing Advanced Decorator Patterns ===\n\n--- Conditional Decorator ---\nSkipping debug_function - condition not met\nDebug mode is enabled - executing debug function\n\n--- Composed Decorators ---\nComplex operation result: Operation succeeded on attempt #3\n\n=== All decorator tests completed successfully! ===",
      "cppOutput": "=== Advanced Python Decorator Patterns ===\n=== Testing Class Decorators ===\n\n--- Singleton Decorator ---\nDatabase connection established: postgresql://localhost:5432/mydb\ndb1 is db2: True\nConnection string: postgresql://localhost:5432/mydb\n\n--- Instance Counting Decorator ---\nPerson instances created: 3\nPerson 1: Person(name='Alice', age=25)\nPerson 2: Person(name='Bob', age=30)\nPerson 3: Person(name='Charlie', age=35)\n\n=== Testing Parameterized Decorators ===\n\n--- Retry Decorator ---\nAttempting division: 10 / 2\nDivision result: 5.0\nAttempting division: 10 / 0\nAttempting division: 10 / 0\nAttempting division: 10 / 0\nDivision failed after retries: Division by zero\n\n--- Timeout Decorator ---\nStarting slow operation for 1.0 seconds...\nSlow operation result: Operation completed after 1.0 seconds\nStarting slow operation for 3.0 seconds...\nOperation timed out: Function slow_operation timed out after 2.0 seconds\n\n--- Cache with TTL Decorator ---\nCache miss for expensive_calculation(<__main__.Calculator object at 0xADDR>, 5)\nPerforming expensive calculation for n=5\nFirst call result: 30\nCache hit for expensive_calculation(<__main__.Calculator object at 0xADDR>, 5)\nSecond call result (cached): 30\nCache info: {'size': 1, 'keys': ['(<__main__.Calculator object at 0xADDR>, 5)[]']}\nWaiting for cache to expire...\nCache miss for expensive_calculation(<__main__.Calculator object at 0xADDR>, 5)\nPerforming expensive calculation for n=5\nThird call result (after cache expiry): 30\n\n--- Rate Limiting Decorator ---\nMaking API call to: /api/endpoint0\nAPI call 1: Response from /api/endpoint0\nMaking API call to: /api/endpoint1\nAPI call 2: Response from /api/endpoint1\nMaking API call to: /api/endpoint2\nAPI call 3: Response from /api/endpoint2\nRate limit exceeded: Rate limit exceeded. Wait 5.0 seconds.\n\n=== Testing Advanced Decorator Patterns ===\n\n--- Conditional Decorator ---\nSkipping debug_function - condition not met\nDebug mode is enabled - executing debug function\n\n--- Composed Decorators ---\nComplex operation result: Operation succeeded on attempt #3\n\n=== All decorator tests completed successfully! ==="
    },
    {
      "name": "test_advanced_functional",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Advanced Python Functional Programming Patterns ===\n=== Advanced Combinatorics ===\nAll product combinations: 12\n  ('red', 'S', 'cotton')\n  ('red', 'S', 'silk')\n  ('red', 'M', 'cotton')\n  ('red', 'M', 'silk')\n  ('red', 'L', 'cotton')\n\nPermutations of ['A', 'B', 'C']:\n  Length 1: [('A',), ('B',), ('C',)]\n  Length 2: [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]\n  Length 3: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]\n\nCombinations with replacement: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]\n\n=== Infinite Iterators ===\nCycling through ['A', 'B', 'C']:\n  A\n  B\n  C\n  A\n  B\n  C\n  A\n  B\n  C\n  A\n\nCounting from 10 by 2.5:\n  10\n  12.5\n  15.0\n  17.5\n  20.0\n\nAccumulated multiplication: [1, 2, 6, 24, 120]\nAccumulated strings: ['Hello', 'Hello ', 'Hello World', 'Hello World!']\n\n=== Iterator Aggregation ===\nChained: [1, 2, 3, 'a', 'b', 'c', True, False]\nChained from iterable: [1, 2, 3, 4, 5, 6]\nCompressed: ['A', 'C', 'E']\nDropwhile (<5): [5, 2, 4, 6, 8]\nTakewhile (<5): [1, 3]\nEvens: [2, 4, 6, 8, 10]\nOdds: [1, 3, 5, 7, 9]\n\n=== Iterator Grouping ===\nGrouped by first letter: {'a': ['apple', 'apricot'], 'b': ['banana', 'blueberry'], 'c': ['cherry', 'cranberry']}\nPartitioned into 4: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]\nSliding windows (size 3): [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\n\n=== Function Composition ===\nComposed function result: 49\nPipeline result: [8, 12, 16, 20]\n\n=== Partial Function Application ===\nSquare of 5: 25\nCube of 3: 27\nUS price (base=100, discount=0.1): 97.2\nEU price (base=100, discount=0.1): 108.0\n\n=== Function Memoization ===\nComputing Fibonacci numbers:\nComputing result for (5,)\nComputing result for (4,)\nComputing result for (3,)\nComputing result for (2,)\nComputing result for (1,)\nComputing result for (0,)\nCache hit for (1,)\nCache hit for (2,)\nCache hit for (3,)\nFibonacci(5): 5\nComputing result for (7,)\nComputing result for (6,)\nCache hit for (5,)\nCache hit for (4,)\nCache hit for (5,)\nFibonacci(7): 13\nCache hit for (5,)\nFibonacci(5) again: 5\nCache info: Cache size: 8\n\nCached power results:\nComputing 2^10\n2^10: 1024\nComputing 3^5\n3^5: 243\n2^10 again: 1024\nCache stats: CacheInfo(hits=1, misses=2, maxsize=32, currsize=2)\n\n=== Monad-like Patterns ===\nSafe computation result: Maybe(2.0)\nResult monad: Ok(2.0)\nError case: Error(Cannot sqrt negative number)\n\n=== Advanced Data Processing ===\nPeople grouped by city:\n  Chicago: 2 people, avg salary: $56,500\n  New York: 2 people, avg salary: $55,000\n  San Francisco: 2 people, avg salary: $77,500\n\nHigh earners (>$60k): [('Bob', 75000), ('Eve', 80000)]\n\nPeople sorted by city and salary (descending):\n  Eve (San Francisco): $80,000\n  Bob (San Francisco): $75,000\n  Charlie (New York): $60,000\n  Alice (New York): $50,000\n  Frank (Chicago): $58,000\n  Diana (Chicago): $55,000\n\nSalary statistics:\n  Total: $378,000\n  Average: $63,000\n  Max: $80,000\n  Min: $50,000\n\n=== Advanced Functional Utilities ===\nCurried function result: 10\nComposed with reduce: 49\nComplex filter result: [12, 18]\nPartitioned evens: [0, 2, 4, 6, 8]\nPartitioned odds: [1, 3, 5, 7, 9]\n\n=== All functional programming tests completed successfully! ===",
      "cppOutput": "=== Advanced Python Functional Programming Patterns ===\n=== Advanced Combinatorics ===\nAll product combinations: 12\n  ('red', 'S', 'cotton')\n  ('red', 'S', 'silk')\n  ('red', 'M', 'cotton')\n  ('red', 'M', 'silk')\n  ('red', 'L', 'cotton')\n\nPermutations of ['A', 'B', 'C']:\n  Length 1: [('A',), ('B',), ('C',)]\n  Length 2: [('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]\n  Length 3: [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]\n\nCombinations with replacement: [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]\n\n=== Infinite Iterators ===\nCycling through ['A', 'B', 'C']:\n  A\n  B\n  C\n  A\n  B\n  C\n  A\n  B\n  C\n  A\n\nCounting from 10 by 2.5:\n  10\n  12.5\n  15.0\n  17.5\n  20.0\n\nAccumulated multiplication: [1, 2, 6, 24, 120]\nAccumulated strings: ['Hello', 'Hello ', 'Hello World', 'Hello World!']\n\n=== Iterator Aggregation ===\nChained: [1, 2, 3, 'a', 'b', 'c', True, False]\nChained from iterable: [1, 2, 3, 4, 5, 6]\nCompressed: ['A', 'C', 'E']\nDropwhile (<5): [5, 2, 4, 6, 8]\nTakewhile (<5): [1, 3]\nEvens: [2, 4, 6, 8, 10]\nOdds: [1, 3, 5, 7, 9]\n\n=== Iterator Grouping ===\nGrouped by first letter: {'a': ['apple', 'apricot'], 'b': ['banana', 'blueberry'], 'c': ['cherry', 'cranberry']}\nPartitioned into 4: [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19]]\nSliding windows (size 3): [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]\n\n=== Function Composition ===\nComposed function result: 49\nPipeline result: [8, 12, 16, 20]\n\n=== Partial Function Application ===\nSquare of 5: 25\nCube of 3: 27\nUS price (base=100, discount=0.1): 97.2\nEU price (base=100, discount=0.1): 108.0\n\n=== Function Memoization ===\nComputing Fibonacci numbers:\nComputing result for (5,)\nComputing result for (4,)\nComputing result for (3,)\nComputing result for (2,)\nComputing result for (1,)\nComputing result for (0,)\nCache hit for (1,)\nCache hit for (2,)\nCache hit for (3,)\nFibonacci(5): 5\nComputing result for (7,)\nComputing result for (6,)\nCache hit for (5,)\nCache hit for (4,)\nCache hit for (5,)\nFibonacci(7): 13\nCache hit for (5,)\nFibonacci(5) again: 5\nCache info: Cache size: 8\n\nCached power results:\nComputing 2^10\n2^10: 1024\nComputing 3^5\n3^5: 243\n2^10 again: 1024\nCache stats: CacheInfo(hits=1, misses=2, maxsize=32, currsize=2)\n\n=== Monad-like Patterns ===\nSafe computation result: Maybe(2.0)\nResult monad: Ok(2.0)\nError case: Error(Cannot sqrt negative number)\n\n=== Advanced Data Processing ===\nPeople grouped by city:\n  Chicago: 2 people, avg salary: $56,500\n  New York: 2 people, avg salary: $55,000\n  San Francisco: 2 people, avg salary: $77,500\n\nHigh earners (>$60k): [('Bob', 75000), ('Eve', 80000)]\n\nPeople sorted by city and salary (descending):\n  Eve (San Francisco): $80,000\n  Bob (San Francisco): $75,000\n  Charlie (New York): $60,000\n  Alice (New York): $50,000\n  Frank (Chicago): $58,000\n  Diana (Chicago): $55,000\n\nSalary statistics:\n  Total: $378,000\n  Average: $63,000\n  Max: $80,000\n  Min: $50,000\n\n=== Advanced Functional Utilities ===\nCurried function result: 10\nComposed with reduce: 49\nComplex filter result: [12, 18]\nPartitioned evens: [0, 2, 4, 6, 8]\nPartitioned odds: [1, 3, 5, 7, 9]\n\n=== All functional programming tests completed successfully! ==="
    },
    {
      "name": "test_advanced_metaclasses",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Advanced Python Metaclass and Descriptor Patterns ===\n=== Testing Advanced Metaclass Patterns ===\n\n--- Singleton Metaclass ---\nDatabase connection established: postgresql://localhost:5432/mydb\ndb1 is db2: True\nConnection string: postgresql://localhost:5432/mydb\n\n--- Factory Metaclass ---\nElectronic product: Laptop: $999.99 (Warranty: 24 months)\nBook product: Python Guide by John Doe: $49.99 (300 pages)\n\n--- Registry Metaclass ---\nRegistered classes: ['ServiceA', 'ServiceB']\nServiceA: Service A processing\nServiceB: Service B processing\n\n--- Auto-Properties Metaclass ---\nName: Alice, Age: 25, Email: alice@example.com\nUpdated - Name: Alice, Age: 26, Email: alice.smith@example.com\n\n--- Validated Metaclass ---\nValid object created: age=25, email=valid@email.com\nValidation error (expected): Invalid age: 200\n\n=== Testing Advanced Descriptor Patterns ===\nInitial person: John Doe, 25, john@example.com\n\n--- Validated Attributes ---\nAge updated to: 30\nAge validation error (expected): Age must be an integer between 0 and 150: 200\nEmail validation error (expected): Email must contain @ symbol: invalid-email\n\n--- Observable Attribute ---\nName changed from 'John Doe' to 'Jane Doe'\nName changed from 'Jane Doe' to 'John Smith'\n\n--- Thread-Safe Attribute ---\nDeposited $100.00. New balance: $100.00\nWithdrew $30.00. New balance: $70.00\nInsufficient funds. Current balance: $70.00\n\n--- Cached Property ---\nPerforming expensive computation...\nFirst computation result: 1000\nUsing cached computation result\nSecond computation result (cached): 1000\nWaiting for cache to expire...\nPerforming expensive computation...\nThird computation result (after expiry): 1000\nPerforming expensive computation...\nFourth computation result (after manual clear): 1000\n\n=== All metaclass and descriptor tests completed successfully! ===",
      "cppOutput": "=== Advanced Python Metaclass and Descriptor Patterns ===\n=== Testing Advanced Metaclass Patterns ===\n\n--- Singleton Metaclass ---\nDatabase connection established: postgresql://localhost:5432/mydb\ndb1 is db2: True\nConnection string: postgresql://localhost:5432/mydb\n\n--- Factory Metaclass ---\nElectronic product: Laptop: $999.99 (Warranty: 24 months)\nBook product: Python Guide by John Doe: $49.99 (300 pages)\n\n--- Registry Metaclass ---\nRegistered classes: ['ServiceA', 'ServiceB']\nServiceA: Service A processing\nServiceB: Service B processing\n\n--- Auto-Properties Metaclass ---\nName: Alice, Age: 25, Email: alice@example.com\nUpdated - Name: Alice, Age: 26, Email: alice.smith@example.com\n\n--- Validated Metaclass ---\nValid object created: age=25, email=valid@email.com\nValidation error (expected): Invalid age: 200\n\n=== Testing Advanced Descriptor Patterns ===\nInitial person: John Doe, 25, john@example.com\n\n--- Validated Attributes ---\nAge updated to: 30\nAge validation error (expected): Age must be an integer between 0 and 150: 200\nEmail validation error (expected): Email must contain @ symbol: invalid-email\n\n--- Observable Attribute ---\nName changed from 'John Doe' to 'Jane Doe'\nName changed from 'Jane Doe' to 'John Smith'\n\n--- Thread-Safe Attribute ---\nDeposited $100.00. New balance: $100.00\nWithdrew $30.00. New balance: $70.00\nInsufficient funds. Current balance: $70.00\n\n--- Cached Property ---\nPerforming expensive computation...\nFirst computation result: 1000\nUsing cached computation result\nSecond computation result (cached): 1000\nWaiting for cache to expire...\nPerforming expensive computation...\nThird computation result (after expiry): 1000\nPerforming expensive computation...\nFourth computation result (after manual clear): 1000\n\n=== All metaclass and descriptor tests completed successfully! ==="
    },
    {
      "name": "test_advanced_oop",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Metaclass Test ===\nValue: 42\nMeta attribute: Created by AdvancedClass\nClass info: Class AdvancedClass with meta_attribute: Created by AdvancedClass\n\n=== Descriptors Test ===\nSetting name to Alice\nSetting age to 25\nSetting email to alice@example.com\nPerson(name=Alice, age=25, email=alice@example.com)\nSetting name to Bob\nUpdated name: Bob\nDeleted age\nAfter deletion - age: 0\n\n=== Properties Test ===\nCelsius: 25\nFahrenheit: 77.0\nNew Celsius: 30\nNew Fahrenheit: 86.0\n\n=== Singleton Test ===\ns1 is s2: True\ns2 data: ['item1']\n\n=== Multiple Inheritance Test ===\nMethod A: Method A from BaseA\nMethod B: Method B from BaseB\nMethod C: Method C from DerivedMultiple\nCommon method: Common method from DerivedMultiple\nMRO: (<class '__main__.DerivedMultiple'>, <class '__main__.BaseA'>, <class '__main__.BaseB'>, <class 'object'>)\n\n=== Abstract Classes Test ===\nCircle area: 78.54\nCircle perimeter: 31.42\n\n=== Dunder Methods Test ===\nString representation: DunderMethodsDemo(value=hello)\nRepr: DunderMethodsDemo(hello)\nLength: 5\nFirst character: h\nAddition result: DunderMethodsDemo(value=helloworld)\nobj1 == obj2: False\nobj1 < obj2: True\nCallable result: hellohellohello\nEntering context\nInside context: DunderMethodsDemo(value=hello)\nExiting context\n\n=== Class Methods and Static Methods Test ===\nCreated from string: 42\nStatic method result: 30\nInstance method: 42\n\n=== All advanced OOP tests passed! ===",
      "cppOutput": "=== Metaclass Test ===\nValue: 42\nMeta attribute: Created by AdvancedClass\nClass info: Class AdvancedClass with meta_attribute: Created by AdvancedClass\n\n=== Descriptors Test ===\nSetting name to Alice\nSetting age to 25\nSetting email to alice@example.com\nPerson(name=Alice, age=25, email=alice@example.com)\nSetting name to Bob\nUpdated name: Bob\nDeleted age\nAfter deletion - age: 0\n\n=== Properties Test ===\nCelsius: 25\nFahrenheit: 77.0\nNew Celsius: 30\nNew Fahrenheit: 86.0\n\n=== Singleton Test ===\ns1 is s2: True\ns2 data: ['item1']\n\n=== Multiple Inheritance Test ===\nMethod A: Method A from BaseA\nMethod B: Method B from BaseB\nMethod C: Method C from DerivedMultiple\nCommon method: Common method from DerivedMultiple\nMRO: (<class '__main__.DerivedMultiple'>, <class '__main__.BaseA'>, <class '__main__.BaseB'>, <class 'object'>)\n\n=== Abstract Classes Test ===\nCircle area: 78.54\nCircle perimeter: 31.42\n\n=== Dunder Methods Test ===\nString representation: DunderMethodsDemo(value=hello)\nRepr: DunderMethodsDemo(hello)\nLength: 5\nFirst character: h\nAddition result: DunderMethodsDemo(value=helloworld)\nobj1 == obj2: False\nobj1 < obj2: True\nCallable result: hellohellohello\nEntering context\nInside context: DunderMethodsDemo(value=hello)\nExiting context\n\n=== Class Methods and Static Methods Test ===\nCreated from string: 42\nStatic method result: 30\nInstance method: 42\n\n=== All advanced OOP tests passed! ==="
    },
    {
      "name": "test_argparse_cli",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python argparse Module Demonstration\n==================================================\n=== Testing Basic argparse Functionality ===\nParsed arguments:\n  filename: input.txt\n  output: output.txt\n  verbose: True\n  number: 20\n  mode: fast\n\n=== Testing Advanced Argument Types ===\nParsed advanced arguments:\n  threads: 8\n  date: DATE\n  date type: <class 'datetime.datetime'>\n  ratio: 0.7\n  tags: ['python', 'argparse', 'cli']\n  numbers: [10, 20, 30, 40]\n  values: [1.1, 2.2, 3.3]\n\n=== Testing Subcommands ===\n\nTesting command: init my_project --template advanced\n  Command: init\n  Project name: my_project\n  Template: advanced\n  Force: False\n\nTesting command: add file1.py file2.py --recursive --exclude *.pyc\n  Command: add\n  Files: ['file1.py', 'file2.py']\n  Recursive: True\n  Exclude: ['*.pyc']\n\nTesting command: status --verbose\n  Command: status\n  Verbose: True\n  Short: False\n\n=== Testing Mutually Exclusive Groups ===\n\nTesting valid args: ['--dev']\n  Environment: dev=True, staging=False, prod=False\n  Format: json=False, yaml=False, xml=False\n\nTesting valid args: ['--staging', '--json']\n  Environment: dev=False, staging=True, prod=False\n  Format: json=True, yaml=False, xml=False\n\nTesting valid args: ['--prod', '--yaml', '--verbose']\n  Environment: dev=False, staging=False, prod=True\n  Format: json=False, yaml=True, xml=False\n\n=== Testing Custom Actions ===\nCustom definitions: {'key1': 'value1', 'key2': 'value2'}\nAppended items: ['item1', 'item2']\nCount value: 3\nConstant value: 42\n\n=== Testing Argument Validation ===\nTesting missing required argument:\n✓ Correctly failed due to missing required argument\n\nTesting valid arguments:\n✓ Successfully parsed: required=value, config=config.json\n\n=== Testing Help Generation ===\nGenerated help message:\n------------------------------------------------------------\nusage: my-tool [-h] [-v] [--config FILE] [--timeout TIMEOUT] input\n\nA comprehensive CLI tool for testing argparse\n\npositional arguments:\n  input              Input file to process\n\noptions:\n  -h, --help         show this help message and exit\n  -v, --verbose      Increase verbosity (use multiple times for more verbose)\n  --config FILE      Configuration file path\n  --timeout TIMEOUT  Timeout in seconds (default: 30.0)\n\nFor more details, see the documentation at https://example.com/docs\n------------------------------------------------------------\n\n=== Real-World CLI Example ===\n\nTesting scenario: data.txt --stats --format csv --verbose\nProcessing file: data.txt\nMode: stats\nOutput format: csv\nVerbose level: 1\n\nTesting scenario: input.json --convert --target-format xml --pretty\nProcessing file: input.json\nMode: convert\nOutput format: json\nVerbose level: 0\nTarget format: xml\n\nTesting scenario: config.yaml --validate --encoding utf-8 -vv\nProcessing file: config.yaml\nMode: validate\nOutput format: json\nVerbose level: 2\n\n=== Summary ===\nargparse features demonstrated:\n- Basic argument parsing (positional and optional)\n- Advanced argument types and validation\n- Subcommands for complex CLI applications\n- Mutually exclusive argument groups\n- Custom actions for specialized processing\n- Argument validation and error handling\n- Help message generation and formatting\n- Real-world CLI application patterns\n\nKey best practices:\n- Use meaningful argument names and help text\n- Provide sensible defaults\n- Validate input data types and ranges\n- Use subcommands for complex applications\n- Handle errors gracefully",
      "cppOutput": "Python argparse Module Demonstration\n==================================================\n=== Testing Basic argparse Functionality ===\nParsed arguments:\n  filename: input.txt\n  output: output.txt\n  verbose: True\n  number: 20\n  mode: fast\n\n=== Testing Advanced Argument Types ===\nParsed advanced arguments:\n  threads: 8\n  date: DATE\n  date type: <class 'datetime.datetime'>\n  ratio: 0.7\n  tags: ['python', 'argparse', 'cli']\n  numbers: [10, 20, 30, 40]\n  values: [1.1, 2.2, 3.3]\n\n=== Testing Subcommands ===\n\nTesting command: init my_project --template advanced\n  Command: init\n  Project name: my_project\n  Template: advanced\n  Force: False\n\nTesting command: add file1.py file2.py --recursive --exclude *.pyc\n  Command: add\n  Files: ['file1.py', 'file2.py']\n  Recursive: True\n  Exclude: ['*.pyc']\n\nTesting command: status --verbose\n  Command: status\n  Verbose: True\n  Short: False\n\n=== Testing Mutually Exclusive Groups ===\n\nTesting valid args: ['--dev']\n  Environment: dev=True, staging=False, prod=False\n  Format: json=False, yaml=False, xml=False\n\nTesting valid args: ['--staging', '--json']\n  Environment: dev=False, staging=True, prod=False\n  Format: json=True, yaml=False, xml=False\n\nTesting valid args: ['--prod', '--yaml', '--verbose']\n  Environment: dev=False, staging=False, prod=True\n  Format: json=False, yaml=True, xml=False\n\n=== Testing Custom Actions ===\nCustom definitions: {'key1': 'value1', 'key2': 'value2'}\nAppended items: ['item1', 'item2']\nCount value: 3\nConstant value: 42\n\n=== Testing Argument Validation ===\nTesting missing required argument:\n✓ Correctly failed due to missing required argument\n\nTesting valid arguments:\n✓ Successfully parsed: required=value, config=config.json\n\n=== Testing Help Generation ===\nGenerated help message:\n------------------------------------------------------------\nusage: my-tool [-h] [-v] [--config FILE] [--timeout TIMEOUT] input\n\nA comprehensive CLI tool for testing argparse\n\npositional arguments:\n  input              Input file to process\n\noptions:\n  -h, --help         show this help message and exit\n  -v, --verbose      Increase verbosity (use multiple times for more verbose)\n  --config FILE      Configuration file path\n  --timeout TIMEOUT  Timeout in seconds (default: 30.0)\n\nFor more details, see the documentation at https://example.com/docs\n------------------------------------------------------------\n\n=== Real-World CLI Example ===\n\nTesting scenario: data.txt --stats --format csv --verbose\nProcessing file: data.txt\nMode: stats\nOutput format: csv\nVerbose level: 1\n\nTesting scenario: input.json --convert --target-format xml --pretty\nProcessing file: input.json\nMode: convert\nOutput format: json\nVerbose level: 0\nTarget format: xml\n\nTesting scenario: config.yaml --validate --encoding utf-8 -vv\nProcessing file: config.yaml\nMode: validate\nOutput format: json\nVerbose level: 2\n\n=== Summary ===\nargparse features demonstrated:\n- Basic argument parsing (positional and optional)\n- Advanced argument types and validation\n- Subcommands for complex CLI applications\n- Mutually exclusive argument groups\n- Custom actions for specialized processing\n- Argument validation and error handling\n- Help message generation and formatting\n- Real-world CLI application patterns\n\nKey best practices:\n- Use meaningful argument names and help text\n- Provide sensible defaults\n- Validate input data types and ranges\n- Use subcommands for complex applications\n- Handle errors gracefully"
    },
    {
      "name": "test_assertions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Basic Assert ===\nAssert x == 5 passed\nAssert x > 0 passed\n\n=== Assert with Message ===\nAge assertion passed\n\n=== Complex Expression Assert ===\nLength assertion passed\nSum assertion passed\n\n=== Type Checking Assert ===\nType assertion passed\nNumber type assertion passed\n\n=== Assert in Functions ===\ndivide(10, 2) = 5.0\nCaught expected assertion: Divisor cannot be zero\n\n=== Boolean Expression Assert ===\nValidation assertion passed\nEmpty check assertion passed\n\n=== Multiple Assertions ===\nAll person validations passed\n\n=== Assert with Membership ===\nColor membership assertion passed\n\n=== Assert with Range ===\nTemperature range assertion passed\n\n=== Assert with List Operations ===\nAll positive assertion passed\nAll even assertion passed\n\n=== Assert with any ===\nAny even assertion passed\n\n=== Assert with String Operations ===\nString start assertion passed\nString contains assertion passed\n\n=== Assert with Dictionary ===\nDictionary key assertions passed\nDictionary value assertion passed\n\n=== Assert with Custom Conditions ===\nPrime assertion for 7 passed\n\n=== Assert with Class Attributes ===\nRectangle area: 50\nClass assertion tests passed\n\n=== Assert with Comparison Chains ===\nComparison chain assertion passed\nAll values in range assertion passed\n\n=== Testing Assertion Failure Handling ===\nCaught assertion error: This assertion should fail\nResult: Handled\n\n=== All assertion tests completed ===",
      "cppOutput": "=== Basic Assert ===\nAssert x == 5 passed\nAssert x > 0 passed\n\n=== Assert with Message ===\nAge assertion passed\n\n=== Complex Expression Assert ===\nLength assertion passed\nSum assertion passed\n\n=== Type Checking Assert ===\nType assertion passed\nNumber type assertion passed\n\n=== Assert in Functions ===\ndivide(10, 2) = 5.0\nCaught expected assertion: Divisor cannot be zero\n\n=== Boolean Expression Assert ===\nValidation assertion passed\nEmpty check assertion passed\n\n=== Multiple Assertions ===\nAll person validations passed\n\n=== Assert with Membership ===\nColor membership assertion passed\n\n=== Assert with Range ===\nTemperature range assertion passed\n\n=== Assert with List Operations ===\nAll positive assertion passed\nAll even assertion passed\n\n=== Assert with any ===\nAny even assertion passed\n\n=== Assert with String Operations ===\nString start assertion passed\nString contains assertion passed\n\n=== Assert with Dictionary ===\nDictionary key assertions passed\nDictionary value assertion passed\n\n=== Assert with Custom Conditions ===\nPrime assertion for 7 passed\n\n=== Assert with Class Attributes ===\nRectangle area: 50\nClass assertion tests passed\n\n=== Assert with Comparison Chains ===\nComparison chain assertion passed\nAll values in range assertion passed\n\n=== Testing Assertion Failure Handling ===\nCaught assertion error: This assertion should fail\nResult: Handled\n\n=== All assertion tests completed ==="
    },
    {
      "name": "test_builtin_functions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Type Conversion ===\nint('123'): 123\nint(45.67): 45\nint('1010', 2): 10\nint('FF', 16): 255\nfloat('3.14'): 3.14\nfloat(5): 5.0\nstr(123): 123\nstr(3.14): 3.14\nbool(0): False\nbool(1): True\nbool(''): False\nbool('hello'): True\nbool([]): False\nbool([1]): True\n\n=== Math Functions ===\nabs(-5): 5\nabs(-3.14): 3.14\nround(3.14159): 3\nround(3.14159, 2): 3.14\nround(3.5): 4\npow(2, 3): 8\npow(2, 3, 5): 3\n\n=== Sequence Functions ===\nlen(numbers): 5\nmin(numbers): 1\nmax(numbers): 5\nsum(numbers): 15\nmin('hello'): e\nmax('hello'): o\n\n=== sorted and reversed ===\nsorted(unsorted): [1, 1, 2, 3, 4, 5, 6, 9]\nsorted(unsorted, reverse=True): [9, 6, 5, 4, 3, 2, 1, 1]\nlist(reversed(text)): ['o', 'l', 'l', 'e', 'h']\nlist(reversed([1,2,3])): [3, 2, 1]\n\n=== range ===\nlist(range(5)): [0, 1, 2, 3, 4]\nlist(range(2, 8)): [2, 3, 4, 5, 6, 7]\nlist(range(0, 10, 2)): [0, 2, 4, 6, 8]\nlist(range(10, 0, -1)): [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n=== enumerate ===\n  0: apple\n  1: banana\n  2: cherry\n  1: apple\n  2: banana\n  3: cherry\n\n=== zip ===\n  Alice, 25, NYC\n  Bob, 30, LA\n  Charlie, 35, SF\nzipped: [('Alice', 25), ('Bob', 30), ('Charlie', 35)]\n\n=== map ===\nsquared: [1, 4, 9, 16, 25]\nupper: ['HELLO', 'WORLD', 'PYTHON']\n\n=== filter ===\neven: [2, 4, 6, 8, 10]\nwords starting with 'a': ['apple', 'avocado']\n\n=== all and any ===\nall([True, True, True]): True\nall([True, False, True]): False\nall([]): True\nany([False, False, False]): False\nany([False, True, False]): True\nany([]): False\nall even: True\n\n=== type and isinstance ===\ntype(5): <class 'int'>\nisinstance(5, int): True\nisinstance(5, (int, float)): True\ntype('hello'): <class 'str'>\nisinstance('hello', str): True\n\n=== callable ===\ncallable(my_func): True\ncallable(5): False\ncallable(lambda x: x): True\n\n=== id ===\nid(a) == id(b): True\nid(a) == id(c): False\n\n=== divmod ===\ndivmod(17, 5): 3, 2\n\n=== chr and ord ===\nord('A'): 65\nchr(65): A\nord('a'): 97\nchr(97): a\n\n=== hex, oct, bin ===\nhex(255): 0xADDR\noct(8): 0o10\nbin(10): 0b1010\n\n=== Collection Constructors ===\nlist('hello'): ['h', 'e', 'l', 'l', 'o']\ntuple([1,2,3]): (1, 2, 3)\nset([1,2,2,3,3]): {1, 2, 3}\ndict([('a',1), ('b',2)]): {'a': 1, 'b': 2}\n\n=== Unzipping ===\nnumbers: (1, 2, 3)\nletters: ('a', 'b', 'c')\n\n=== Attribute Functions ===\nhasattr(obj, 'x'): True\ngetattr(obj, 'x'): 10\ngetattr(obj, 'y'): 20\ngetattr(obj, 'z', 'default'): default\n\n=== All builtin function tests completed ===",
      "cppOutput": "=== Type Conversion ===\nint('123'): 123\nint(45.67): 45\nint('1010', 2): 10\nint('FF', 16): 255\nfloat('3.14'): 3.14\nfloat(5): 5.0\nstr(123): 123\nstr(3.14): 3.14\nbool(0): False\nbool(1): True\nbool(''): False\nbool('hello'): True\nbool([]): False\nbool([1]): True\n\n=== Math Functions ===\nabs(-5): 5\nabs(-3.14): 3.14\nround(3.14159): 3\nround(3.14159, 2): 3.14\nround(3.5): 4\npow(2, 3): 8\npow(2, 3, 5): 3\n\n=== Sequence Functions ===\nlen(numbers): 5\nmin(numbers): 1\nmax(numbers): 5\nsum(numbers): 15\nmin('hello'): e\nmax('hello'): o\n\n=== sorted and reversed ===\nsorted(unsorted): [1, 1, 2, 3, 4, 5, 6, 9]\nsorted(unsorted, reverse=True): [9, 6, 5, 4, 3, 2, 1, 1]\nlist(reversed(text)): ['o', 'l', 'l', 'e', 'h']\nlist(reversed([1,2,3])): [3, 2, 1]\n\n=== range ===\nlist(range(5)): [0, 1, 2, 3, 4]\nlist(range(2, 8)): [2, 3, 4, 5, 6, 7]\nlist(range(0, 10, 2)): [0, 2, 4, 6, 8]\nlist(range(10, 0, -1)): [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n=== enumerate ===\n  0: apple\n  1: banana\n  2: cherry\n  1: apple\n  2: banana\n  3: cherry\n\n=== zip ===\n  Alice, 25, NYC\n  Bob, 30, LA\n  Charlie, 35, SF\nzipped: [('Alice', 25), ('Bob', 30), ('Charlie', 35)]\n\n=== map ===\nsquared: [1, 4, 9, 16, 25]\nupper: ['HELLO', 'WORLD', 'PYTHON']\n\n=== filter ===\neven: [2, 4, 6, 8, 10]\nwords starting with 'a': ['apple', 'avocado']\n\n=== all and any ===\nall([True, True, True]): True\nall([True, False, True]): False\nall([]): True\nany([False, False, False]): False\nany([False, True, False]): True\nany([]): False\nall even: True\n\n=== type and isinstance ===\ntype(5): <class 'int'>\nisinstance(5, int): True\nisinstance(5, (int, float)): True\ntype('hello'): <class 'str'>\nisinstance('hello', str): True\n\n=== callable ===\ncallable(my_func): True\ncallable(5): False\ncallable(lambda x: x): True\n\n=== id ===\nid(a) == id(b): True\nid(a) == id(c): False\n\n=== divmod ===\ndivmod(17, 5): 3, 2\n\n=== chr and ord ===\nord('A'): 65\nchr(65): A\nord('a'): 97\nchr(97): a\n\n=== hex, oct, bin ===\nhex(255): 0xADDR\noct(8): 0o10\nbin(10): 0b1010\n\n=== Collection Constructors ===\nlist('hello'): ['h', 'e', 'l', 'l', 'o']\ntuple([1,2,3]): (1, 2, 3)\nset([1,2,2,3,3]): {1, 2, 3}\ndict([('a',1), ('b',2)]): {'a': 1, 'b': 2}\n\n=== Unzipping ===\nnumbers: (1, 2, 3)\nletters: ('a', 'b', 'c')\n\n=== Attribute Functions ===\nhasattr(obj, 'x'): True\ngetattr(obj, 'x'): 10\ngetattr(obj, 'y'): 20\ngetattr(obj, 'z', 'default'): default\n\n=== All builtin function tests completed ==="
    },
    {
      "name": "test_classes",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "My name is Alice and I am 25 years old.\nHappy birthday! I'm now 26 years old.\nMy name is Bob, I'm 20 years old, and my student ID is S12345.\nStudent's average grade: 90.00",
      "cppOutput": "My name is Alice and I am 25 years old.\nHappy birthday! I'm now 26 years old.\nMy name is Bob, I'm 20 years old, and my student ID is S12345.\nStudent's average grade: 90.00"
    },
    {
      "name": "test_collections",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Counter ===\nWords: ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple', 'date']\nWord counts: Counter({'apple': 3, 'banana': 2, 'cherry': 1, 'date': 1})\nMost common: [('apple', 3), ('banana', 2)]\n\nCounter1: Counter({'a': 2, 'b': 1, 'c': 1})\nCounter2: Counter({'b': 2, 'a': 1, 'd': 1})\nAddition: Counter({'a': 3, 'b': 3, 'c': 1, 'd': 1})\nSubtraction: Counter({'a': 1, 'c': 1})\nIntersection: Counter({'a': 1, 'b': 1})\nUnion: Counter({'a': 2, 'b': 2, 'c': 1, 'd': 1})\n\n=== DefaultDict ===\nWords grouped by length: {3: ['cat', 'dog', 'rat'], 8: ['elephant'], 5: ['mouse']}\n\nCharacter counts: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\nWords by first letter: {'a': {'ant', 'apple'}, 'b': {'ball', 'banana'}, 'c': {'cherry'}}\n\n=== OrderedDict ===\nOrdered dict: OrderedDict({'first': 1, 'second': 2, 'third': 3})\nKeys in order: ['first', 'second', 'third']\nAfter moving 'first' to end: ['second', 'third', 'first']\nAfter moving 'second' to front: ['second', 'third', 'first']\nPopped last item: ('first', 1)\nRemaining: ['second', 'third']\n\n=== Deque ===\nOriginal deque: deque([1, 2, 3, 4, 5])\nAfter append(6) and appendleft(0): deque([0, 1, 2, 3, 4, 5, 6])\nPopped right: 6, left: 0\nAfter pops: deque([1, 2, 3, 4, 5])\nAfter extend([7,8,9]) and extendleft([-1,-2]): deque([-2, -1, 1, 2, 3, 4, 5, 7, 8, 9])\nAfter rotate(2): deque([8, 9, -2, -1, 1, 2, 3, 4, 5, 7])\nAfter rotate(-1): deque([9, -2, -1, 1, 2, 3, 4, 5, 7, 8])\nAfter clear: deque([])\n\n=== NamedTuple ===\nPerson1: Person(name='Alice', age=30, city='New York')\nPerson2: Person(name='Bob', age=25, city='Los Angeles')\nStudent: Student(name='Charlie', student_id='S123', grades=[90, 85, 95])\n\nPerson1 name: Alice\nPerson1 age: 30\nPerson1[0]: Alice\nPerson1[1]: 30\nPerson1 as dict: {'name': 'Alice', 'age': 30, 'city': 'New York'}\nUpdated person: Person(name='Alice', age=31, city='New York')\n\n=== Heap Operations ===\nHeapified list: [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]\nAfter pushing 0 and 7: [0, 1, 1, 3, 3, 2, 4, 6, 5, 5, 5, 9, 7]\nSmallest: 0, Second smallest: 1\nAfter pops: [1, 3, 2, 3, 5, 7, 4, 6, 5, 5, 9]\n3 smallest items: [1, 2, 3]\n3 largest items: [9, 7, 6]\n\n=== ChainMap ===\nChainMap: ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})\nKeys: ['c', 'd', 'b', 'a']\nValues: [4, 6, 2, 1]\nValue of 'a': 1\nValue of 'b': 2\nValue of 'c': 4\nValue of 'd': 6\n\nNew chain with new mapping: ChainMap({'e': 7, 'a': 10}, {'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})\nValue of 'a' in new chain: 10",
      "cppOutput": "=== Counter ===\nWords: ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple', 'date']\nWord counts: Counter({'apple': 3, 'banana': 2, 'cherry': 1, 'date': 1})\nMost common: [('apple', 3), ('banana', 2)]\n\nCounter1: Counter({'a': 2, 'b': 1, 'c': 1})\nCounter2: Counter({'b': 2, 'a': 1, 'd': 1})\nAddition: Counter({'a': 3, 'b': 3, 'c': 1, 'd': 1})\nSubtraction: Counter({'a': 1, 'c': 1})\nIntersection: Counter({'a': 1, 'b': 1})\nUnion: Counter({'a': 2, 'b': 2, 'c': 1, 'd': 1})\n\n=== DefaultDict ===\nWords grouped by length: {3: ['cat', 'dog', 'rat'], 8: ['elephant'], 5: ['mouse']}\n\nCharacter counts: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}\n\nWords by first letter: {'a': {'ant', 'apple'}, 'b': {'ball', 'banana'}, 'c': {'cherry'}}\n\n=== OrderedDict ===\nOrdered dict: OrderedDict({'first': 1, 'second': 2, 'third': 3})\nKeys in order: ['first', 'second', 'third']\nAfter moving 'first' to end: ['second', 'third', 'first']\nAfter moving 'second' to front: ['second', 'third', 'first']\nPopped last item: ('first', 1)\nRemaining: ['second', 'third']\n\n=== Deque ===\nOriginal deque: deque([1, 2, 3, 4, 5])\nAfter append(6) and appendleft(0): deque([0, 1, 2, 3, 4, 5, 6])\nPopped right: 6, left: 0\nAfter pops: deque([1, 2, 3, 4, 5])\nAfter extend([7,8,9]) and extendleft([-1,-2]): deque([-2, -1, 1, 2, 3, 4, 5, 7, 8, 9])\nAfter rotate(2): deque([8, 9, -2, -1, 1, 2, 3, 4, 5, 7])\nAfter rotate(-1): deque([9, -2, -1, 1, 2, 3, 4, 5, 7, 8])\nAfter clear: deque([])\n\n=== NamedTuple ===\nPerson1: Person(name='Alice', age=30, city='New York')\nPerson2: Person(name='Bob', age=25, city='Los Angeles')\nStudent: Student(name='Charlie', student_id='S123', grades=[90, 85, 95])\n\nPerson1 name: Alice\nPerson1 age: 30\nPerson1[0]: Alice\nPerson1[1]: 30\nPerson1 as dict: {'name': 'Alice', 'age': 30, 'city': 'New York'}\nUpdated person: Person(name='Alice', age=31, city='New York')\n\n=== Heap Operations ===\nHeapified list: [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]\nAfter pushing 0 and 7: [0, 1, 1, 3, 3, 2, 4, 6, 5, 5, 5, 9, 7]\nSmallest: 0, Second smallest: 1\nAfter pops: [1, 3, 2, 3, 5, 7, 4, 6, 5, 5, 9]\n3 smallest items: [1, 2, 3]\n3 largest items: [9, 7, 6]\n\n=== ChainMap ===\nChainMap: ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})\nKeys: ['c', 'd', 'b', 'a']\nValues: [4, 6, 2, 1]\nValue of 'a': 1\nValue of 'b': 2\nValue of 'c': 4\nValue of 'd': 6\n\nNew chain with new mapping: ChainMap({'e': 7, 'a': 10}, {'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})\nValue of 'a' in new chain: 10"
    },
    {
      "name": "test_comprehensions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Original numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nSquares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nEven numbers: [2, 4, 6, 8, 10]\nOdd numbers: [1, 3, 5, 7, 9]\nDivisible by 3 or 5: [3, 5, 6, 9, 10, 12, 15, 18, 20]\nMatrix: [[0, 1, 2], [1, 2, 3], [2, 3, 4]]\nSum of squares: 385\nMax even number: 10\nWord lengths: {'hello': 5, 'world': 5, 'python': 6, 'programming': 11}\nUnique characters: {'d', 'y', 'n', 'r', 'h', 't', 'o', 'p', 'e', 'w', 'l'}\nPairs: [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\nEven/odd: ['odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']",
      "cppOutput": "Original numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nSquares: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nEven numbers: [2, 4, 6, 8, 10]\nOdd numbers: [1, 3, 5, 7, 9]\nDivisible by 3 or 5: [3, 5, 6, 9, 10, 12, 15, 18, 20]\nMatrix: [[0, 1, 2], [1, 2, 3], [2, 3, 4]]\nSum of squares: 385\nMax even number: 10\nWord lengths: {'hello': 5, 'world': 5, 'python': 6, 'programming': 11}\nUnique characters: {'d', 'y', 'n', 'r', 'h', 't', 'o', 'p', 'e', 'w', 'l'}\nPairs: [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]\nEven/odd: ['odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even', 'odd', 'even']"
    },
    {
      "name": "test_context_managers",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "File content:\nHello, World!\nThis is a test file.\nLine 3\nLine 4\n\n\nReading line by line:\nLine 1: Hello, World!\nLine 2: This is a test file.\nLine 3: Line 3\nLine 4: Line 4\n\nCopied file content:\nSource content\nAnother line\n\n\nTesting custom context manager:\nDoing some work...\nExecution time: 0.10 seconds",
      "cppOutput": "File content:\nHello, World!\nThis is a test file.\nLine 3\nLine 4\n\n\nReading line by line:\nLine 1: Hello, World!\nLine 2: This is a test file.\nLine 3: Line 3\nLine 4: Line 4\n\nCopied file content:\nSource content\nAnother line\n\n\nTesting custom context manager:\nDoing some work...\nExecution time: 0.10 seconds"
    },
    {
      "name": "test_control_flow_advanced",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== for...else ===\nAll numbers are even\n\n=== for...else with break ===\nFound odd number: 5\n\n=== while...else ===\nCount: 0\nCount: 1\nCount: 2\nWhile loop completed normally\n\n=== while...else with break ===\nBreaking at 5\n\n=== Nested loops ===\ni=0, j=0\ni=0, j=1\ni=0, j=2\ni=1, j=0\nBreaking at i=1, j=1\ni=2, j=0\ni=2, j=1\ni=2, j=2\n\n=== While with multiple conditions ===\nx=0, y=10\nx=1, y=9\nx=2, y=8\nx=3, y=7\nx=4, y=6\n\n=== pass statement ===\nOdd: 1\nOdd: 3\nEmptyClass and empty_function created\n\n=== Match statement (Python 3.10+) ===\ncheck_value(0): zero\ncheck_value(1): one\ncheck_value(5): other\ndescribe_point((0, 0)): origin\ndescribe_point((0, 5)): on y-axis at 5\ndescribe_point((3, 4)): at (3, 4)\n\n=== Complex if-elif-else ===\nScore 85 is grade B\n\n=== Multiple inline conditions ===\nx=15 is medium\n\n=== Loop with continue ===\nOdd number: 1\nOdd number: 3\nOdd number: 5\nOdd number: 7\n\n=== Enumerate with condition ===\nIndex 0: apple\nIndex 1: banana (long word)\nIndex 2: cherry (long word)\nIndex 3: date\n\n=== try-except-else-finally ===\nDivision successful: 5.0\nCleanup complete\n\nCannot divide by zero\nCleanup complete\n\n=== Nested try-except ===\nInner exception caught\nOuter exception caught: Converted error\n\n=== Multiple exceptions ===\nError: ZeroDivisionError\nError: IndexError\n\n=== All control flow tests completed ===",
      "cppOutput": "=== for...else ===\nAll numbers are even\n\n=== for...else with break ===\nFound odd number: 5\n\n=== while...else ===\nCount: 0\nCount: 1\nCount: 2\nWhile loop completed normally\n\n=== while...else with break ===\nBreaking at 5\n\n=== Nested loops ===\ni=0, j=0\ni=0, j=1\ni=0, j=2\ni=1, j=0\nBreaking at i=1, j=1\ni=2, j=0\ni=2, j=1\ni=2, j=2\n\n=== While with multiple conditions ===\nx=0, y=10\nx=1, y=9\nx=2, y=8\nx=3, y=7\nx=4, y=6\n\n=== pass statement ===\nOdd: 1\nOdd: 3\nEmptyClass and empty_function created\n\n=== Match statement (Python 3.10+) ===\ncheck_value(0): zero\ncheck_value(1): one\ncheck_value(5): other\ndescribe_point((0, 0)): origin\ndescribe_point((0, 5)): on y-axis at 5\ndescribe_point((3, 4)): at (3, 4)\n\n=== Complex if-elif-else ===\nScore 85 is grade B\n\n=== Multiple inline conditions ===\nx=15 is medium\n\n=== Loop with continue ===\nOdd number: 1\nOdd number: 3\nOdd number: 5\nOdd number: 7\n\n=== Enumerate with condition ===\nIndex 0: apple\nIndex 1: banana (long word)\nIndex 2: cherry (long word)\nIndex 3: date\n\n=== try-except-else-finally ===\nDivision successful: 5.0\nCleanup complete\n\nCannot divide by zero\nCleanup complete\n\n=== Nested try-except ===\nInner exception caught\nOuter exception caught: Converted error\n\n=== Multiple exceptions ===\nError: ZeroDivisionError\nError: IndexError\n\n=== All control flow tests completed ==="
    },
    {
      "name": "test_copy_pickle_shelve",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Testing Shallow vs Deep Copy ===\nOriginal: {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\nShallow copy: {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\nDeep copy: {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\n\nAfter modifying original:\nOriginal: {'numbers': [1, 2, 3, 999], 'nested': {'inner': [4, 5, 6, 888]}, 'simple': 'modified'}\nShallow copy (affected by nested changes): {'numbers': [1, 2, 3, 999], 'nested': {'inner': [4, 5, 6, 888]}, 'simple': 'string'}\nDeep copy (unaffected): {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\n\n=== Testing Copy Edge Cases ===\nCircular reference before copy:\na: [1, 2, 3, [4, 5, 6, [...]]]\nb: [4, 5, 6, [1, 2, 3, [...]]]\n\nDeep copy of circular reference:\na_copy: [1, 2, 3, [4, 5, 6, [...]]]\n\nAfter modifying original a[0] = 999:\noriginal a: [999, 2, 3, [4, 5, 6, [...]]]\ncopied a_copy: [1, 2, 3, [4, 5, 6, [...]]]\n\n=== Testing Pickle Serialization ===\nOriginal data: {'string': 'hello world', 'list': [1, 2.5, True, None], 'dict': {'nested': {'deep': 'value'}}, 'tuple': (1, 2, 3), 'set': {4, 5, 6}}\nPickled data size: 132 bytes\nUnpickled data: {'string': 'hello world', 'list': [1, 2.5, True, None], 'dict': {'nested': {'deep': 'value'}}, 'tuple': (1, 2, 3), 'set': {4, 5, 6}}\nData equality: True\nProtocol 0: size = 206 bytes, works = True\nProtocol 1: size = 193 bytes, works = True\nProtocol 2: size = 190 bytes, works = True\nProtocol 3: size = 187 bytes, works = True\nProtocol 4: size = 132 bytes, works = True\nProtocol 5: size = 132 bytes, works = True\n\n=== Testing Shelve Persistence ===\nData written to shelve database\nData read from shelve database:\n  numbers: [1, 2, 3, 4, 5]\n  settings: {'theme': 'dark', 'language': 'en'}\n  timestamp: TS\n  user_data: {'name': 'Alice', 'age': 30}\n\nData modified in database\nModified data:\n  user_data: {'name': 'Alice', 'age': 31}\n  new_key: new_value\n\n=== Testing Copy Performance ===\nShallow copy time: 0.00 seconds\nDeep copy time: 0.02 seconds\nDeep copy is 2750.5x slower\nShallow copy first item data == original: True\nDeep copy first item data == original: True\nAfter modifying original, shallow copy reflects change: True\nAfter modifying original, deep copy remains unchanged: True\n\n=== All copy and serialization tests completed ===",
      "cppOutput": "=== Testing Shallow vs Deep Copy ===\nOriginal: {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\nShallow copy: {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\nDeep copy: {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\n\nAfter modifying original:\nOriginal: {'numbers': [1, 2, 3, 999], 'nested': {'inner': [4, 5, 6, 888]}, 'simple': 'modified'}\nShallow copy (affected by nested changes): {'numbers': [1, 2, 3, 999], 'nested': {'inner': [4, 5, 6, 888]}, 'simple': 'string'}\nDeep copy (unaffected): {'numbers': [1, 2, 3], 'nested': {'inner': [4, 5, 6]}, 'simple': 'string'}\n\n=== Testing Copy Edge Cases ===\nCircular reference before copy:\na: [1, 2, 3, [4, 5, 6, [...]]]\nb: [4, 5, 6, [1, 2, 3, [...]]]\n\nDeep copy of circular reference:\na_copy: [1, 2, 3, [4, 5, 6, [...]]]\n\nAfter modifying original a[0] = 999:\noriginal a: [999, 2, 3, [4, 5, 6, [...]]]\ncopied a_copy: [1, 2, 3, [4, 5, 6, [...]]]\n\n=== Testing Pickle Serialization ===\nOriginal data: {'string': 'hello world', 'list': [1, 2.5, True, None], 'dict': {'nested': {'deep': 'value'}}, 'tuple': (1, 2, 3), 'set': {4, 5, 6}}\nPickled data size: 132 bytes\nUnpickled data: {'string': 'hello world', 'list': [1, 2.5, True, None], 'dict': {'nested': {'deep': 'value'}}, 'tuple': (1, 2, 3), 'set': {4, 5, 6}}\nData equality: True\nProtocol 0: size = 206 bytes, works = True\nProtocol 1: size = 193 bytes, works = True\nProtocol 2: size = 190 bytes, works = True\nProtocol 3: size = 187 bytes, works = True\nProtocol 4: size = 132 bytes, works = True\nProtocol 5: size = 132 bytes, works = True\n\n=== Testing Shelve Persistence ===\nData written to shelve database\nData read from shelve database:\n  numbers: [1, 2, 3, 4, 5]\n  settings: {'theme': 'dark', 'language': 'en'}\n  timestamp: TS\n  user_data: {'name': 'Alice', 'age': 30}\n\nData modified in database\nModified data:\n  user_data: {'name': 'Alice', 'age': 31}\n  new_key: new_value\n\n=== Testing Copy Performance ===\nShallow copy time: 0.00 seconds\nDeep copy time: 0.02 seconds\nDeep copy is 2750.5x slower\nShallow copy first item data == original: True\nDeep copy first item data == original: True\nAfter modifying original, shallow copy reflects change: True\nAfter modifying original, deep copy remains unchanged: True\n\n=== All copy and serialization tests completed ==="
    },
    {
      "name": "test_csv_xml_yaml",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Testing CSV Operations ===\nCSV file created: /tmp/tmp2eszxp_b.csv\n\n--- Reading CSV file ---\nRow 0: ['Name', 'Age', 'City', 'Salary']\nRow 1: ['Alice', '30', 'New York', '75000']\nRow 2: ['Bob', '25', 'San Francisco', '80000']\nRow 3: ['Charlie', '35', 'Chicago', '90000']\nRow 4: ['Diana', '28', 'Boston', '85000']\n\n--- Reading CSV with DictReader ---\nPerson: Alice, Age: 30, City: New York, Salary: $75000\nPerson: Bob, Age: 25, City: San Francisco, Salary: $80000\nPerson: Charlie, Age: 35, City: Chicago, Salary: $90000\nPerson: Diana, Age: 28, City: Boston, Salary: $85000\n\n--- Appending to CSV file ---\nAfter appending:\nNew row: ['Eve', '32', 'Seattle', '95000']\n\n=== Testing CSV Advanced Features ===\nCSV with custom delimiter created: /tmp/tmpnch1yjxs.csv\nCSV file content:\nProduct;Description;Price\nLaptop;\"High-performance \"\"gaming\"\" laptop\";1299.99\nMouse;Wireless, ergonomic design;29.99\nKeyboard;Mechanical, RGB backlit;89.99\n\nParsed row: ['Product', 'Description', 'Price']\nParsed row: ['Laptop', 'High-performance \"gaming\" laptop', '1299.99']\nParsed row: ['Mouse', 'Wireless, ergonomic design', '29.99']\nParsed row: ['Keyboard', 'Mechanical, RGB backlit', '89.99']\n\n=== Testing XML Operations ===\nXML file created: /tmp/tmpqm0ozgwa.xml\n\n--- Reading XML file ---\nRoot element: bookstore\nBooks in store:\n  Category: fiction\n  Title: The Great Gatsby (en)\n  Author: F. Scott Fitzgerald\n  Year: 1925\n  Price: $12.99\n\n  Category: science\n  Title: A Brief History of Time (en)\n  Author: Stephen Hawking\n  Year: 1988\n  Price: $15.99\n\n--- Modifying XML ---\nXML file updated with new book\nUpdated XML content:\n<?xml version='1.0' encoding='utf-8'?>\n<bookstore><book category=\"fiction\"><title lang=\"en\">The Great Gatsby</title><author>F. Scott Fitzgerald</author><year>1925</year><price>12.99</price></book><book category=\"science\"><title lang=\"en\">A Brief History of Time</title><author>Stephen Hawking</author><year>1988</year><price>15.99</price></book><book category=\"technology\"><title lang=\"en\">Clean Code</title><author>Robert C. Martin</author><year>2008</year><price>34.99</price></book></bookstore>\n\n=== Testing XML Search and Modify ===\nOriginal books:\n  Harry Potter: $15.99\n  Lord of the Rings: $12.99\n  Cosmos: $18.99\nUpdated price for Harry Potter\n\nBooks by authors with 'J.' in name:\n  Harry Potter by J.K. Rowling\n  Lord of the Rings by J.R.R. Tolkien\nRemoved Cosmos book\n\nFinal XML:\n<?xml version='1.0' encoding='utf-8'?>\n<library>\n        <book id=\"1\" genre=\"fiction\" discount=\"true\">\n            <title>Harry Potter</title>\n            <author>J.K. Rowling</author>\n            <year>1997</year>\n            <price>12.99</price>\n        </book>\n        <book id=\"2\" genre=\"fiction\">\n            <title>Lord of the Rings</title>\n            <author>J.R.R. Tolkien</author>\n            <year>1954</year>\n            <price>12.99</price>\n        </book>\n        <book id=\"4\" genre=\"technology\"><title>The Pragmatic Programmer</title><author>Andrew Hunt, David Thomas</author><year>1999</year><price>42.99</price></book></library>\n\n=== Testing YAML-like Operations (using JSON) ===\nConfiguration file created: /tmp/tmpf2uwsrjr.json\nLoaded configuration:\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 8080,\n    \"debug\": true\n  },\n  \"database\": {\n    \"type\": \"postgresql\",\n    \"host\": \"db.example.com\",\n    \"port\": 5432,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"secret123\"\n    }\n  },\n  \"features\": {\n    \"logging\": {\n      \"level\": \"info\",\n      \"file\": \"/var/log/app.log\"\n    },\n    \"caching\": {\n      \"enabled\": true,\n      \"ttl\": 3600\n    }\n  }\n}\n\nUpdated configuration:\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 9090,\n    \"debug\": true\n  },\n  \"database\": {\n    \"type\": \"postgresql\",\n    \"host\": \"db.example.com\",\n    \"port\": 5432,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"secret123\"\n    }\n  },\n  \"features\": {\n    \"logging\": {\n      \"level\": \"info\",\n      \"file\": \"/var/log/app.log\"\n    },\n    \"caching\": {\n      \"enabled\": true,\n      \"ttl\": 3600\n    },\n    \"new_feature\": {\n      \"enabled\": true,\n      \"priority\": \"high\"\n    }\n  }\n}\n\n=== All CSV/XML/JSON tests completed ===",
      "cppOutput": "=== Testing CSV Operations ===\nCSV file created: /tmp/tmp2eszxp_b.csv\n\n--- Reading CSV file ---\nRow 0: ['Name', 'Age', 'City', 'Salary']\nRow 1: ['Alice', '30', 'New York', '75000']\nRow 2: ['Bob', '25', 'San Francisco', '80000']\nRow 3: ['Charlie', '35', 'Chicago', '90000']\nRow 4: ['Diana', '28', 'Boston', '85000']\n\n--- Reading CSV with DictReader ---\nPerson: Alice, Age: 30, City: New York, Salary: $75000\nPerson: Bob, Age: 25, City: San Francisco, Salary: $80000\nPerson: Charlie, Age: 35, City: Chicago, Salary: $90000\nPerson: Diana, Age: 28, City: Boston, Salary: $85000\n\n--- Appending to CSV file ---\nAfter appending:\nNew row: ['Eve', '32', 'Seattle', '95000']\n\n=== Testing CSV Advanced Features ===\nCSV with custom delimiter created: /tmp/tmpnch1yjxs.csv\nCSV file content:\nProduct;Description;Price\nLaptop;\"High-performance \"\"gaming\"\" laptop\";1299.99\nMouse;Wireless, ergonomic design;29.99\nKeyboard;Mechanical, RGB backlit;89.99\n\nParsed row: ['Product', 'Description', 'Price']\nParsed row: ['Laptop', 'High-performance \"gaming\" laptop', '1299.99']\nParsed row: ['Mouse', 'Wireless, ergonomic design', '29.99']\nParsed row: ['Keyboard', 'Mechanical, RGB backlit', '89.99']\n\n=== Testing XML Operations ===\nXML file created: /tmp/tmpqm0ozgwa.xml\n\n--- Reading XML file ---\nRoot element: bookstore\nBooks in store:\n  Category: fiction\n  Title: The Great Gatsby (en)\n  Author: F. Scott Fitzgerald\n  Year: 1925\n  Price: $12.99\n\n  Category: science\n  Title: A Brief History of Time (en)\n  Author: Stephen Hawking\n  Year: 1988\n  Price: $15.99\n\n--- Modifying XML ---\nXML file updated with new book\nUpdated XML content:\n<?xml version='1.0' encoding='utf-8'?>\n<bookstore><book category=\"fiction\"><title lang=\"en\">The Great Gatsby</title><author>F. Scott Fitzgerald</author><year>1925</year><price>12.99</price></book><book category=\"science\"><title lang=\"en\">A Brief History of Time</title><author>Stephen Hawking</author><year>1988</year><price>15.99</price></book><book category=\"technology\"><title lang=\"en\">Clean Code</title><author>Robert C. Martin</author><year>2008</year><price>34.99</price></book></bookstore>\n\n=== Testing XML Search and Modify ===\nOriginal books:\n  Harry Potter: $15.99\n  Lord of the Rings: $12.99\n  Cosmos: $18.99\nUpdated price for Harry Potter\n\nBooks by authors with 'J.' in name:\n  Harry Potter by J.K. Rowling\n  Lord of the Rings by J.R.R. Tolkien\nRemoved Cosmos book\n\nFinal XML:\n<?xml version='1.0' encoding='utf-8'?>\n<library>\n        <book id=\"1\" genre=\"fiction\" discount=\"true\">\n            <title>Harry Potter</title>\n            <author>J.K. Rowling</author>\n            <year>1997</year>\n            <price>12.99</price>\n        </book>\n        <book id=\"2\" genre=\"fiction\">\n            <title>Lord of the Rings</title>\n            <author>J.R.R. Tolkien</author>\n            <year>1954</year>\n            <price>12.99</price>\n        </book>\n        <book id=\"4\" genre=\"technology\"><title>The Pragmatic Programmer</title><author>Andrew Hunt, David Thomas</author><year>1999</year><price>42.99</price></book></library>\n\n=== Testing YAML-like Operations (using JSON) ===\nConfiguration file created: /tmp/tmpf2uwsrjr.json\nLoaded configuration:\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 8080,\n    \"debug\": true\n  },\n  \"database\": {\n    \"type\": \"postgresql\",\n    \"host\": \"db.example.com\",\n    \"port\": 5432,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"secret123\"\n    }\n  },\n  \"features\": {\n    \"logging\": {\n      \"level\": \"info\",\n      \"file\": \"/var/log/app.log\"\n    },\n    \"caching\": {\n      \"enabled\": true,\n      \"ttl\": 3600\n    }\n  }\n}\n\nUpdated configuration:\n{\n  \"server\": {\n    \"host\": \"localhost\",\n    \"port\": 9090,\n    \"debug\": true\n  },\n  \"database\": {\n    \"type\": \"postgresql\",\n    \"host\": \"db.example.com\",\n    \"port\": 5432,\n    \"credentials\": {\n      \"username\": \"admin\",\n      \"password\": \"secret123\"\n    }\n  },\n  \"features\": {\n    \"logging\": {\n      \"level\": \"info\",\n      \"file\": \"/var/log/app.log\"\n    },\n    \"caching\": {\n      \"enabled\": true,\n      \"ttl\": 3600\n    },\n    \"new_feature\": {\n      \"enabled\": true,\n      \"priority\": \"high\"\n    }\n  }\n}\n\n=== All CSV/XML/JSON tests completed ==="
    },
    {
      "name": "test_data_structures",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Lists ===\nOriginal list: ['apple', 'banana', 'cherry', 'date']\nAfter operations: ['apple', 'blueberry', 'banana', 'date']\nPopped item: elderberry\nFirst three: ['apple', 'blueberry', 'banana']\nLast two: ['banana', 'date']\nSorted numbers: [1, 1, 2, 3, 4, 5, 6, 9]\nReversed numbers: [9, 6, 5, 4, 3, 2, 1, 1]\nCount of 1: 2\nIndex of 9: 0\n\n=== Tuples ===\nCoordinates: (10, 20)\nPoint: (3, 4, 5)\nUnpacked: x=10, y=20\n\n=== Sets ===\nSet 1: {1, 2, 3, 4, 5}\nSet 2: {4, 5, 6, 7, 8}\nUnion: {1, 2, 3, 4, 5, 6, 7, 8}\nIntersection: {4, 5}\nDifference: {1, 2, 3}\nSymmetric difference: {1, 2, 3, 6, 7, 8}\nModified set 1: {1, 3, 4, 5, 6}\nIs 3 in set1? True\nSet length: 5\n\n=== Dictionaries Extended ===\nStudent: {'name': 'Alice', 'age': 20, 'grades': [85, 90, 78, 92], 'courses': {'math': 'A', 'science': 'B+', 'history': 'A-'}}\nKeys: ['name', 'age', 'grades', 'courses']\nValues: ['Alice', 20, [85, 90, 78, 92], {'math': 'A', 'science': 'B+', 'history': 'A-'}]\nMath grade: A\nAfter update and pop: {'name': 'Alice', 'grades': [85, 90, 78, 92], 'courses': {'math': 'A', 'science': 'B+', 'history': 'A-'}, 'major': 'Computer Science'}\nPopped age: 20\nGrades: [85, 90, 78, 92]\nMissing key with default: default_value\n\nComplex data: {'users': [{'id': 1, 'name': 'Alice', 'active': True}, {'id': 2, 'name': 'Bob', 'active': False}, {'id': 3, 'name': 'Charlie', 'active': True}], 'metadata': {'total_users': 3, 'active_users': 2, 'created_date': '2024-01-01'}}\nActive users: ['Alice', 'Charlie']",
      "cppOutput": "=== Lists ===\nOriginal list: ['apple', 'banana', 'cherry', 'date']\nAfter operations: ['apple', 'blueberry', 'banana', 'date']\nPopped item: elderberry\nFirst three: ['apple', 'blueberry', 'banana']\nLast two: ['banana', 'date']\nSorted numbers: [1, 1, 2, 3, 4, 5, 6, 9]\nReversed numbers: [9, 6, 5, 4, 3, 2, 1, 1]\nCount of 1: 2\nIndex of 9: 0\n\n=== Tuples ===\nCoordinates: (10, 20)\nPoint: (3, 4, 5)\nUnpacked: x=10, y=20\n\n=== Sets ===\nSet 1: {1, 2, 3, 4, 5}\nSet 2: {4, 5, 6, 7, 8}\nUnion: {1, 2, 3, 4, 5, 6, 7, 8}\nIntersection: {4, 5}\nDifference: {1, 2, 3}\nSymmetric difference: {1, 2, 3, 6, 7, 8}\nModified set 1: {1, 3, 4, 5, 6}\nIs 3 in set1? True\nSet length: 5\n\n=== Dictionaries Extended ===\nStudent: {'name': 'Alice', 'age': 20, 'grades': [85, 90, 78, 92], 'courses': {'math': 'A', 'science': 'B+', 'history': 'A-'}}\nKeys: ['name', 'age', 'grades', 'courses']\nValues: ['Alice', 20, [85, 90, 78, 92], {'math': 'A', 'science': 'B+', 'history': 'A-'}]\nMath grade: A\nAfter update and pop: {'name': 'Alice', 'grades': [85, 90, 78, 92], 'courses': {'math': 'A', 'science': 'B+', 'history': 'A-'}, 'major': 'Computer Science'}\nPopped age: 20\nGrades: [85, 90, 78, 92]\nMissing key with default: default_value\n\nComplex data: {'users': [{'id': 1, 'name': 'Alice', 'active': True}, {'id': 2, 'name': 'Bob', 'active': False}, {'id': 3, 'name': 'Charlie', 'active': True}], 'metadata': {'total_users': 3, 'active_users': 2, 'created_date': '2024-01-01'}}\nActive users: ['Alice', 'Charlie']"
    },
    {
      "name": "test_datetime",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Current datetime: DATE.397717\nCurrent date: 2025-10-12\nCurrent time: 01:27:31.397717\nFormatted datetime: DATE\nParsed datetime: DATE\n\nDate arithmetic:\nToday: 2025-10-12\nTomorrow: 2025-10-13\nYesterday: 2025-10-11\nNext week: 2025-10-19\n\nDays between 2023-01-01 and 2023-12-31: 364\nSpecific datetime: DATE\nUnix timestamp: TS\n\nSleeping for 0.5 seconds...\nDone sleeping!\n\nDate components:\nYear: 2025\nMonth: 10\nDay: 12\nHour: 1\nMinute: 27\nSecond: 31\nToday is Sunday\n\nTime operations:\nNoon time: 12:00:00\nTime hour: 12\nTime minute: 0",
      "cppOutput": "Current datetime: DATE.397717\nCurrent date: 2025-10-12\nCurrent time: 01:27:31.397717\nFormatted datetime: DATE\nParsed datetime: DATE\n\nDate arithmetic:\nToday: 2025-10-12\nTomorrow: 2025-10-13\nYesterday: 2025-10-11\nNext week: 2025-10-19\n\nDays between 2023-01-01 and 2023-12-31: 364\nSpecific datetime: DATE\nUnix timestamp: TS\n\nSleeping for 0.5 seconds...\nDone sleeping!\n\nDate components:\nYear: 2025\nMonth: 10\nDay: 12\nHour: 1\nMinute: 27\nSecond: 31\nToday is Sunday\n\nTime operations:\nNoon time: 12:00:00\nTime hour: 12\nTime minute: 0"
    },
    {
      "name": "test_decorators",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Testing simple decorator:\nBefore function call\nHello, World!\nAfter function call\n\nTesting decorator with arguments:\nCalling add_numbers with args: (5, 3), kwargs: {}\nadd_numbers returned: 8\n\nTesting repeat decorator:\n\nTesting timer decorator:\nslow_function executed in 0.10 seconds\n\nTesting cache decorator:\nComputed and cached result for (1,)\nComputed and cached result for (0,)\nComputed and cached result for (2,)\nReturning cached result for (1,)\nComputed and cached result for (3,)\nReturning cached result for (2,)\nComputed and cached result for (4,)\nReturning cached result for (3,)\nComputed and cached result for (5,)\nReturning cached result for (5,)\nReturning cached result for (5,)\nReturning cached result for (4,)\nComputed and cached result for (6,)\n\nAll decorator tests passed!",
      "cppOutput": "Testing simple decorator:\nBefore function call\nHello, World!\nAfter function call\n\nTesting decorator with arguments:\nCalling add_numbers with args: (5, 3), kwargs: {}\nadd_numbers returned: 8\n\nTesting repeat decorator:\n\nTesting timer decorator:\nslow_function executed in 0.10 seconds\n\nTesting cache decorator:\nComputed and cached result for (1,)\nComputed and cached result for (0,)\nComputed and cached result for (2,)\nReturning cached result for (1,)\nComputed and cached result for (3,)\nReturning cached result for (2,)\nComputed and cached result for (4,)\nReturning cached result for (3,)\nComputed and cached result for (5,)\nReturning cached result for (5,)\nReturning cached result for (5,)\nReturning cached result for (4,)\nComputed and cached result for (6,)\n\nAll decorator tests passed!"
    },
    {
      "name": "test_dict_set_comprehensions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Basic Dictionary Comprehension ===\nSquares: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n=== Dictionary Comprehension with Condition ===\nEven squares: {0: 0, 2: 4, 4: 16, 6: 36, 8: 64}\n\n=== Dictionary from Two Lists ===\nDict from lists: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n=== Dictionary with String Manipulation ===\nWord lengths: {'hello': 5, 'world': 5, 'python': 6}\n\n=== Swap Keys and Values ===\nOriginal: {'a': 1, 'b': 2, 'c': 3}\nSwapped: {1: 'a', 2: 'b', 3: 'c'}\n\n=== Dictionary with Nested Logic ===\nCategorized: {0: 'even', 1: 'odd', 2: 'even', 3: 'odd', 4: 'even', 5: 'odd', 6: 'even', 7: 'odd', 8: 'even', 9: 'odd'}\n\n=== Character Frequency ===\nCharacter frequency: {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}\n\n=== Basic Set Comprehension ===\nSquares set: {0, 1, 4, 9, 16, 25}\n\n=== Set Comprehension with Condition ===\nEven numbers: {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}\n\n=== Set Comprehension - Unique Values ===\nOriginal list: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nUnique set: {1, 2, 3, 4}\n\n=== Unique Characters ===\nUnique characters: {'d', 'r', 'h', 'o', 'e', 'w', 'l'}\n\n=== Set with Transformation ===\nLowercase set: {'python', 'programming', 'world', 'hello'}\n\n=== Nested Dictionary Comprehension ===\nMatrix dictionary:\n  1: {1: 1, 2: 2, 3: 3}\n  2: {1: 2, 2: 4, 3: 6}\n  3: {1: 3, 2: 6, 3: 9}\n\n=== Dictionary with Enumerate ===\nIndexed items: {0: 'apple', 1: 'banana', 2: 'cherry'}\n\n=== Set Operations ===\nEven numbers: {0, 2, 4, 6, 8}\nMultiples of 3: {0, 9, 3, 6}\nUnion: {0, 2, 3, 4, 6, 8, 9}\nIntersection: {0, 6}\nDifference: {8, 2, 4}\nSymmetric difference: {2, 3, 4, 8, 9}\n\n=== Conditional Values in Dict ===\nClassified: {-5: 'negative', -4: 'negative', -3: 'negative', -2: 'negative', -1: 'negative', 0: 'zero', 1: 'positive', 2: 'positive', 3: 'positive', 4: 'positive', 5: 'positive'}\n\n=== Set with Multiple Conditions ===\nNumbers divisible by 2 and 3: {0, 36, 6, 42, 12, 48, 18, 24, 30}\n\n=== Dictionary from Nested Structure ===\nPeople: {'Alice': 25, 'Bob': 30, 'Charlie': 35}\n\n=== Filter Dictionary Items ===\nHigh scores (>= 90): {'Bob': 92, 'David': 95}\n\n=== Set with Function Call ===\nUnique word lengths: {11, 5, 6}\n\n=== Complex Dictionary Comprehension ===\nStudent status:\n  Alice: {'grade': 85, 'pass': True}\n  Bob: {'grade': 92, 'pass': True}\n  Charlie: {'grade': 78, 'pass': False}\n  David: {'grade': 95, 'pass': True}\n  Eve: {'grade': 88, 'pass': True}\n\n=== All dict/set comprehension tests completed ===",
      "cppOutput": "=== Basic Dictionary Comprehension ===\nSquares: {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n=== Dictionary Comprehension with Condition ===\nEven squares: {0: 0, 2: 4, 4: 16, 6: 36, 8: 64}\n\n=== Dictionary from Two Lists ===\nDict from lists: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n=== Dictionary with String Manipulation ===\nWord lengths: {'hello': 5, 'world': 5, 'python': 6}\n\n=== Swap Keys and Values ===\nOriginal: {'a': 1, 'b': 2, 'c': 3}\nSwapped: {1: 'a', 2: 'b', 3: 'c'}\n\n=== Dictionary with Nested Logic ===\nCategorized: {0: 'even', 1: 'odd', 2: 'even', 3: 'odd', 4: 'even', 5: 'odd', 6: 'even', 7: 'odd', 8: 'even', 9: 'odd'}\n\n=== Character Frequency ===\nCharacter frequency: {'h': 1, 'e': 1, 'l': 3, 'o': 2, 'w': 1, 'r': 1, 'd': 1}\n\n=== Basic Set Comprehension ===\nSquares set: {0, 1, 4, 9, 16, 25}\n\n=== Set Comprehension with Condition ===\nEven numbers: {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}\n\n=== Set Comprehension - Unique Values ===\nOriginal list: [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nUnique set: {1, 2, 3, 4}\n\n=== Unique Characters ===\nUnique characters: {'d', 'r', 'h', 'o', 'e', 'w', 'l'}\n\n=== Set with Transformation ===\nLowercase set: {'python', 'programming', 'world', 'hello'}\n\n=== Nested Dictionary Comprehension ===\nMatrix dictionary:\n  1: {1: 1, 2: 2, 3: 3}\n  2: {1: 2, 2: 4, 3: 6}\n  3: {1: 3, 2: 6, 3: 9}\n\n=== Dictionary with Enumerate ===\nIndexed items: {0: 'apple', 1: 'banana', 2: 'cherry'}\n\n=== Set Operations ===\nEven numbers: {0, 2, 4, 6, 8}\nMultiples of 3: {0, 9, 3, 6}\nUnion: {0, 2, 3, 4, 6, 8, 9}\nIntersection: {0, 6}\nDifference: {8, 2, 4}\nSymmetric difference: {2, 3, 4, 8, 9}\n\n=== Conditional Values in Dict ===\nClassified: {-5: 'negative', -4: 'negative', -3: 'negative', -2: 'negative', -1: 'negative', 0: 'zero', 1: 'positive', 2: 'positive', 3: 'positive', 4: 'positive', 5: 'positive'}\n\n=== Set with Multiple Conditions ===\nNumbers divisible by 2 and 3: {0, 36, 6, 42, 12, 48, 18, 24, 30}\n\n=== Dictionary from Nested Structure ===\nPeople: {'Alice': 25, 'Bob': 30, 'Charlie': 35}\n\n=== Filter Dictionary Items ===\nHigh scores (>= 90): {'Bob': 92, 'David': 95}\n\n=== Set with Function Call ===\nUnique word lengths: {11, 5, 6}\n\n=== Complex Dictionary Comprehension ===\nStudent status:\n  Alice: {'grade': 85, 'pass': True}\n  Bob: {'grade': 92, 'pass': True}\n  Charlie: {'grade': 78, 'pass': False}\n  David: {'grade': 95, 'pass': True}\n  Eve: {'grade': 88, 'pass': True}\n\n=== All dict/set comprehension tests completed ==="
    },
    {
      "name": "test_dictionaries",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Student scores: {'Alice': 98, 'Bob': 87, 'Charlie': 92, 'David': 88}\nAlice's score: 98\nKeys: ['Alice', 'Bob', 'Charlie', 'David']\nValues: [98, 87, 92, 88]\nItems: [('Alice', 98), ('Bob', 87), ('Charlie', 92), ('David', 88)]\nBob in dictionary: True\nEve in dictionary: False\nRemoved Charlie's score: 92\nUpdated dictionary: {'Alice': 98, 'Bob': 87, 'David': 88}\nSquares dictionary: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\nAlice's city: New York",
      "cppOutput": "Student scores: {'Alice': 98, 'Bob': 87, 'Charlie': 92, 'David': 88}\nAlice's score: 98\nKeys: ['Alice', 'Bob', 'Charlie', 'David']\nValues: [98, 87, 92, 88]\nItems: [('Alice', 98), ('Bob', 87), ('Charlie', 92), ('David', 88)]\nBob in dictionary: True\nEve in dictionary: False\nRemoved Charlie's score: 92\nUpdated dictionary: {'Alice': 98, 'Bob': 87, 'David': 88}\nSquares dictionary: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\nAlice's city: New York"
    },
    {
      "name": "test_error_handling",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Basic Try-Except ===\nCannot divide by zero!\nThis always runs!\n\n=== Multiple Exceptions ===\n100 / 10 = 10.0\nCannot divide 100 by 0 (zero)\nCannot divide 100 by five (wrong type)\nCannot divide 100 by [1, 2, 3] (wrong type)\n\n=== Custom Exception ===\nValid age: 25\nInvalidAgeError: Invalid age: -5. Age must be between 0 and 120.\nInvalidAgeError: Invalid age: 150. Age must be between 0 and 120.\nTypeError: Age must be a number\n\n=== Nested Exceptions ===\nInner exception: Invalid integer\nOuter exception: Caught the re-raised exception\n\n=== Exception Chaining ===\nChained exception: File operation failed\nCaused by: [Errno 2] No such file or directory: 'nonexistent_file.txt'\n\n=== System Exceptions ===\nPython version: 3.13.7 (main, Aug 15 2025, 12:34:02) [GCC 15.2.1 20250813]\nPlatform: linux",
      "cppOutput": "=== Basic Try-Except ===\nCannot divide by zero!\nThis always runs!\n\n=== Multiple Exceptions ===\n100 / 10 = 10.0\nCannot divide 100 by 0 (zero)\nCannot divide 100 by five (wrong type)\nCannot divide 100 by [1, 2, 3] (wrong type)\n\n=== Custom Exception ===\nValid age: 25\nInvalidAgeError: Invalid age: -5. Age must be between 0 and 120.\nInvalidAgeError: Invalid age: 150. Age must be between 0 and 120.\nTypeError: Age must be a number\n\n=== Nested Exceptions ===\nInner exception: Invalid integer\nOuter exception: Caught the re-raised exception\n\n=== Exception Chaining ===\nChained exception: File operation failed\nCaused by: [Errno 2] No such file or directory: 'nonexistent_file.txt'\n\n=== System Exceptions ===\nPython version: 3.13.7 (main, Aug 15 2025, 12:34:02) [GCC 15.2.1 20250813]\nPlatform: linux"
    },
    {
      "name": "test_exceptions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Testing divide_numbers:\n5.0\nError: Cannot divide by zero\nError: Both arguments must be numbers\n\nTesting get_list_element:\n3\nError: Index out of range\nn\n\nTesting process_data:\n10\nValue error: Value cannot be negative\nValue error: Value key not found\nType error: Data must be a dictionary\n\nTesting finally block:\nInside try block\nInside finally block (always executes)\n5.0",
      "cppOutput": "Testing divide_numbers:\n5.0\nError: Cannot divide by zero\nError: Both arguments must be numbers\n\nTesting get_list_element:\n3\nError: Index out of range\nn\n\nTesting process_data:\n10\nValue error: Value cannot be negative\nValue error: Value key not found\nType error: Data must be a dictionary\n\nTesting finally block:\nInside try block\nInside finally block (always executes)\n5.0"
    },
    {
      "name": "test_file_operations",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "File 'test_file.txt' created and written to.\n\nFile content:\nThis is the first line.\nThis is the second line.\nThis is the third line.\n\n\nReading file line by line:\nLine 1: This is the first line.\nLine 2: This is the second line.\nLine 3: This is the third line.\n\nAfter appending:\nThis is the first line.\nThis is the second line.\nThis is the third line.\nThis line was appended.\n\n\nFile exists: True\nFile size: 97 bytes\n\nDifferent read modes:\nRead 4 lines using readlines()\nFirst line: This is the first line.\n\nBinary file 'test_binary.bin' created.\nBinary content: b'Hello'\nDecoded: Hello\n\nTest files 'test_file.txt' and 'test_binary.bin' removed.",
      "cppOutput": "File 'test_file.txt' created and written to.\n\nFile content:\nThis is the first line.\nThis is the second line.\nThis is the third line.\n\n\nReading file line by line:\nLine 1: This is the first line.\nLine 2: This is the second line.\nLine 3: This is the third line.\n\nAfter appending:\nThis is the first line.\nThis is the second line.\nThis is the third line.\nThis line was appended.\n\n\nFile exists: True\nFile size: 97 bytes\n\nDifferent read modes:\nRead 4 lines using readlines()\nFirst line: This is the first line.\n\nBinary file 'test_binary.bin' created.\nBinary content: b'Hello'\nDecoded: Hello\n\nTest files 'test_file.txt' and 'test_binary.bin' removed."
    },
    {
      "name": "test_function_arguments",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Default Arguments ===\nHello, Alice!\nHi, Bob!\nHey, Charlie!\npower(3) = 9\npower(3, 3) = 27\n\n=== Keyword Arguments ===\nAlice is 25 years old and lives in NYC\nBob is 30 years old and lives in LA\nCharlie is 35 years old and lives in SF\n\n=== Variable Positional Arguments (*args) ===\nsum_all(1, 2, 3) = 6\nsum_all(1, 2, 3, 4, 5) = 15\nsum_all() = 0\nprint_args('a', 'b', 'c'):\n  Arg 0: a\n  Arg 1: b\n  Arg 2: c\n\n=== Variable Keyword Arguments (**kwargs) ===\nprint_info(name='Alice', age=25, city='NYC'):\n  name: Alice\n  age: 25\n  city: NYC\nProfile: {'name': 'Bob', 'age': 30, 'occupation': 'Engineer'}\n\n=== Combining Argument Types ===\ncomplex_function(1, 2, 3, 4, c=5, x=6, y=7):\n  a=1, b=2\n  args=(3, 4)\n  c=5\n  kwargs={'x': 6, 'y': 7}\n  Result: 28\n\n=== Keyword-Only Arguments ===\nkeyword_only(1, 2, c=3, d=4) = 10\n\n=== Position-Only Arguments ===\nposition_only(1, 2, 3, 4) = 10\nposition_only(1, 2, c=3, d=4) = 10\n\n=== Position-Only and Keyword-Only ===\nmixed_args(1, 2, 3, 4, e=5, f=6) = 21\n\n=== Unpacking Arguments ===\nadd_three(*[1, 2, 3]) = 6\ngreet_person(**person) = Alice, 25, NYC\n\n=== Default Mutable Arguments ===\nlist1: [1]\nlist2: [2]\n\n=== Multiple Return Values ===\nCoordinates: x=10, y=20, z=30\n17 ÷ 5 = 3 remainder 2\n\n=== All function argument tests completed ===",
      "cppOutput": "=== Default Arguments ===\nHello, Alice!\nHi, Bob!\nHey, Charlie!\npower(3) = 9\npower(3, 3) = 27\n\n=== Keyword Arguments ===\nAlice is 25 years old and lives in NYC\nBob is 30 years old and lives in LA\nCharlie is 35 years old and lives in SF\n\n=== Variable Positional Arguments (*args) ===\nsum_all(1, 2, 3) = 6\nsum_all(1, 2, 3, 4, 5) = 15\nsum_all() = 0\nprint_args('a', 'b', 'c'):\n  Arg 0: a\n  Arg 1: b\n  Arg 2: c\n\n=== Variable Keyword Arguments (**kwargs) ===\nprint_info(name='Alice', age=25, city='NYC'):\n  name: Alice\n  age: 25\n  city: NYC\nProfile: {'name': 'Bob', 'age': 30, 'occupation': 'Engineer'}\n\n=== Combining Argument Types ===\ncomplex_function(1, 2, 3, 4, c=5, x=6, y=7):\n  a=1, b=2\n  args=(3, 4)\n  c=5\n  kwargs={'x': 6, 'y': 7}\n  Result: 28\n\n=== Keyword-Only Arguments ===\nkeyword_only(1, 2, c=3, d=4) = 10\n\n=== Position-Only Arguments ===\nposition_only(1, 2, 3, 4) = 10\nposition_only(1, 2, c=3, d=4) = 10\n\n=== Position-Only and Keyword-Only ===\nmixed_args(1, 2, 3, 4, e=5, f=6) = 21\n\n=== Unpacking Arguments ===\nadd_three(*[1, 2, 3]) = 6\ngreet_person(**person) = Alice, 25, NYC\n\n=== Default Mutable Arguments ===\nlist1: [1]\nlist2: [2]\n\n=== Multiple Return Values ===\nCoordinates: x=10, y=20, z=30\n17 ÷ 5 = 3 remainder 2\n\n=== All function argument tests completed ==="
    },
    {
      "name": "test_functional_programming",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Map Function ===\nOriginal numbers: [1, 2, 3, 4, 5]\nSquares: [1, 4, 9, 16, 25]\nDoubles: [2, 4, 6, 8, 10]\nSum of lists: [5, 7, 9]\n\n=== Filter Function ===\nOriginal numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nEven numbers: [2, 4, 6, 8, 10]\nOdd numbers: [1, 3, 5, 7, 9]\nGreater than 5: [6, 7, 8, 9, 10]\n\n=== Reduce Function ===\nOriginal numbers: [1, 2, 3, 4, 5]\nSum of all: 15\nProduct: 120\nMaximum value: 5\nSum with initial value 10: 25\n\n=== Partial Function Application ===\nDouble 5: 10\nTriple 5: 15\n2^3: 8\n2^4: 16\n\n=== Function Composition ===\nAdd then multiply (5): 12\nMultiply then add (5): 11\n\n=== Higher-order Functions ===\nApply add: 8\nApply subtract: 2\nApply multiply: 15\n\n=== Currying ===\nAdd 5 to 3: 8\nAdd 10 to 3: 13\n\n=== Immutability ===\nOriginal list: [1, 2, 3]\nModified list: [2, 4, 6]",
      "cppOutput": "=== Map Function ===\nOriginal numbers: [1, 2, 3, 4, 5]\nSquares: [1, 4, 9, 16, 25]\nDoubles: [2, 4, 6, 8, 10]\nSum of lists: [5, 7, 9]\n\n=== Filter Function ===\nOriginal numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nEven numbers: [2, 4, 6, 8, 10]\nOdd numbers: [1, 3, 5, 7, 9]\nGreater than 5: [6, 7, 8, 9, 10]\n\n=== Reduce Function ===\nOriginal numbers: [1, 2, 3, 4, 5]\nSum of all: 15\nProduct: 120\nMaximum value: 5\nSum with initial value 10: 25\n\n=== Partial Function Application ===\nDouble 5: 10\nTriple 5: 15\n2^3: 8\n2^4: 16\n\n=== Function Composition ===\nAdd then multiply (5): 12\nMultiply then add (5): 11\n\n=== Higher-order Functions ===\nApply add: 8\nApply subtract: 2\nApply multiply: 15\n\n=== Currying ===\nAdd 5 to 3: 8\nAdd 10 to 3: 13\n\n=== Immutability ===\nOriginal list: [1, 2, 3]\nModified list: [2, 4, 6]"
    },
    {
      "name": "test_functions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Greeting: Hello, World!\nAddition: 8\nMultiplication: 28\nAverage: 3.0\nDouble of 10: 20\nSquare of 4: 16",
      "cppOutput": "Greeting: Hello, World!\nAddition: 8\nMultiplication: 28\nAverage: 3.0\nDouble of 10: 20\nSquare of 4: 16"
    },
    {
      "name": "test_generators",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "All generator tests passed!",
      "cppOutput": "All generator tests passed!"
    },
    {
      "name": "test_iterators",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Custom Iterator ===\nCustom countdown iterator:\n5\n4\n3\n2\n1\n0\n\nList iteration:\napple\nbanana\ncherry\n\nWith enumerate:\n0: apple\n1: banana\n2: cherry\n\nReversed list:\ncherry\nbanana\napple\n\nDictionary iteration:\nKeys:\nname\nage\ngrade\n\nValues:\nAlice\n20\nA\n\nItems:\nname: Alice\nage: 20\ngrade: A\n\nString iteration:\nH\ne\nl\nl\no\n\nSplit string:\nHello\n\nRange iteration:\n0\n1\n2\n3\n4\n\nRange with step:\n0\n2\n4\n6\n8\n\nFile iteration:\nLine: Line 1\nLine: Line 2\nLine: Line 3\n\n=== itertools.count ===\n10\n12\n14\n16\n18\n\n=== itertools.cycle ===\nA\nB\nC\nA\nB\nC\n\n=== itertools.repeat ===\nhello\nhello\nhello\n\n=== itertools.chain ===\nChained: [1, 2, 3, 'a', 'b', 'c', 4, 5, 6]\n\n=== itertools.accumulate ===\nAccumulated: [1, 3, 6, 10, 15]\n\n=== itertools.permutations ===\nPermutations: [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n\n=== itertools.combinations ===\nCombinations: [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n\n=== itertools.product ===\nProducts: [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]\n\nGenerator function:\n3\n2\n1\n0\n\nGenerator expression:\n0\n1\n4\n9\n16\n\nZip iteration:\n(1, 'a', 10)\n(2, 'b', 20)\n(3, 'c', 30)\n\nZip longest:\n(1, 'a', 100)\n(2, 'b', 'MISSING')\n(3, 'c', 'MISSING')",
      "cppOutput": "=== Custom Iterator ===\nCustom countdown iterator:\n5\n4\n3\n2\n1\n0\n\nList iteration:\napple\nbanana\ncherry\n\nWith enumerate:\n0: apple\n1: banana\n2: cherry\n\nReversed list:\ncherry\nbanana\napple\n\nDictionary iteration:\nKeys:\nname\nage\ngrade\n\nValues:\nAlice\n20\nA\n\nItems:\nname: Alice\nage: 20\ngrade: A\n\nString iteration:\nH\ne\nl\nl\no\n\nSplit string:\nHello\n\nRange iteration:\n0\n1\n2\n3\n4\n\nRange with step:\n0\n2\n4\n6\n8\n\nFile iteration:\nLine: Line 1\nLine: Line 2\nLine: Line 3\n\n=== itertools.count ===\n10\n12\n14\n16\n18\n\n=== itertools.cycle ===\nA\nB\nC\nA\nB\nC\n\n=== itertools.repeat ===\nhello\nhello\nhello\n\n=== itertools.chain ===\nChained: [1, 2, 3, 'a', 'b', 'c', 4, 5, 6]\n\n=== itertools.accumulate ===\nAccumulated: [1, 3, 6, 10, 15]\n\n=== itertools.permutations ===\nPermutations: [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\n\n=== itertools.combinations ===\nCombinations: [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n\n=== itertools.product ===\nProducts: [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]\n\nGenerator function:\n3\n2\n1\n0\n\nGenerator expression:\n0\n1\n4\n9\n16\n\nZip iteration:\n(1, 'a', 10)\n(2, 'b', 20)\n(3, 'c', 30)\n\nZip longest:\n(1, 'a', 100)\n(2, 'b', 'MISSING')\n(3, 'c', 'MISSING')"
    },
    {
      "name": "test_json_operations",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== JSON Serialization ===\nJSON serialization:\n{\n  \"name\": \"Alice\",\n  \"age\": 30,\n  \"city\": \"New York\",\n  \"hobbies\": [\n    \"reading\",\n    \"swimming\",\n    \"coding\"\n  ],\n  \"is_student\": false,\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"zip\": \"10001\"\n  }\n}\n\nParsed data:\nName: Alice\nAge: 30\nHobbies: ['reading', 'swimming', 'coding']\n\n=== JSON File Operations ===\nData written to test_data.json\n\nLoaded data:\nNumber of users: 3\nTheme: dark\n\n=== JSON Custom Objects ===\n\nCustom objects to JSON:\n[\n  {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 25,\n    \"city\": \"Los Angeles\"\n  },\n  {\n    \"name\": \"Charlie\",\n    \"age\": 35,\n    \"city\": \"Chicago\"\n  }\n]\n\nParsed people:\nAlice, 30, New York\nBob, 25, Los Angeles\nCharlie, 35, Chicago\n\n=== JSON Validation ===\n\nJSON validation:\nValid JSON parsed: {'name': 'Alice', 'age': 30}\nInvalid JSON failed: Expecting property name enclosed in double quotes: line 1 column 29 (char 28)\n\n=== JSON Pretty Printing ===\n\nJSON pretty printing:\nCompact:\n{\"students\":[{\"name\":\"Alice\",\"grades\":[90,85,95]},{\"name\":\"Bob\",\"grades\":[80,75,85]},{\"name\":\"Charlie\",\"grades\":[95,90,88]}],\"class_info\":{\"subject\":\"Mathematics\",\"teacher\":\"Mr. Smith\",\"room\":\"101\"}}\n\nPretty:\n{\n  \"students\": [\n    {\n      \"name\": \"Alice\",\n      \"grades\": [\n        90,\n        85,\n        95\n      ]\n    },\n    {\n      \"name\": \"Bob\",\n      \"grades\": [\n        80,\n        75,\n        85\n      ]\n    },\n    {\n      \"name\": \"Charlie\",\n      \"grades\": [\n        95,\n        90,\n        88\n      ]\n    }\n  ],\n  \"class_info\": {\n    \"subject\": \"Mathematics\",\n    \"teacher\": \"Mr. Smith\",\n    \"room\": \"101\"\n  }\n}\n\n=== JSON Data Types ===\n\nJSON data types:\n{\n  \"string\": \"Hello World\",\n  \"number\": 42,\n  \"float\": 3.14,\n  \"boolean\": true,\n  \"null\": null,\n  \"array\": [\n    1,\n    2,\n    3,\n    \"four\",\n    true\n  ],\n  \"nested\": {\n    \"level1\": {\n      \"level2\": {\n        \"deep\": \"value\"\n      }\n    }\n  }\n}\n\nParsed types:\nString: <class 'str'>\nNumber: <class 'int'>\nFloat: <class 'float'>\nBoolean: <class 'bool'>\nNull: <class 'NoneType'>\nArray: <class 'list'>",
      "cppOutput": "=== JSON Serialization ===\nJSON serialization:\n{\n  \"name\": \"Alice\",\n  \"age\": 30,\n  \"city\": \"New York\",\n  \"hobbies\": [\n    \"reading\",\n    \"swimming\",\n    \"coding\"\n  ],\n  \"is_student\": false,\n  \"address\": {\n    \"street\": \"123 Main St\",\n    \"city\": \"New York\",\n    \"zip\": \"10001\"\n  }\n}\n\nParsed data:\nName: Alice\nAge: 30\nHobbies: ['reading', 'swimming', 'coding']\n\n=== JSON File Operations ===\nData written to test_data.json\n\nLoaded data:\nNumber of users: 3\nTheme: dark\n\n=== JSON Custom Objects ===\n\nCustom objects to JSON:\n[\n  {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 25,\n    \"city\": \"Los Angeles\"\n  },\n  {\n    \"name\": \"Charlie\",\n    \"age\": 35,\n    \"city\": \"Chicago\"\n  }\n]\n\nParsed people:\nAlice, 30, New York\nBob, 25, Los Angeles\nCharlie, 35, Chicago\n\n=== JSON Validation ===\n\nJSON validation:\nValid JSON parsed: {'name': 'Alice', 'age': 30}\nInvalid JSON failed: Expecting property name enclosed in double quotes: line 1 column 29 (char 28)\n\n=== JSON Pretty Printing ===\n\nJSON pretty printing:\nCompact:\n{\"students\":[{\"name\":\"Alice\",\"grades\":[90,85,95]},{\"name\":\"Bob\",\"grades\":[80,75,85]},{\"name\":\"Charlie\",\"grades\":[95,90,88]}],\"class_info\":{\"subject\":\"Mathematics\",\"teacher\":\"Mr. Smith\",\"room\":\"101\"}}\n\nPretty:\n{\n  \"students\": [\n    {\n      \"name\": \"Alice\",\n      \"grades\": [\n        90,\n        85,\n        95\n      ]\n    },\n    {\n      \"name\": \"Bob\",\n      \"grades\": [\n        80,\n        75,\n        85\n      ]\n    },\n    {\n      \"name\": \"Charlie\",\n      \"grades\": [\n        95,\n        90,\n        88\n      ]\n    }\n  ],\n  \"class_info\": {\n    \"subject\": \"Mathematics\",\n    \"teacher\": \"Mr. Smith\",\n    \"room\": \"101\"\n  }\n}\n\n=== JSON Data Types ===\n\nJSON data types:\n{\n  \"string\": \"Hello World\",\n  \"number\": 42,\n  \"float\": 3.14,\n  \"boolean\": true,\n  \"null\": null,\n  \"array\": [\n    1,\n    2,\n    3,\n    \"four\",\n    true\n  ],\n  \"nested\": {\n    \"level1\": {\n      \"level2\": {\n        \"deep\": \"value\"\n      }\n    }\n  }\n}\n\nParsed types:\nString: <class 'str'>\nNumber: <class 'int'>\nFloat: <class 'float'>\nBoolean: <class 'bool'>\nNull: <class 'NoneType'>\nArray: <class 'list'>"
    },
    {
      "name": "test_loops",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "For loop:\nNumber: 1\nNumber: 2\nNumber: 3\nNumber: 4\nNumber: 5\nNumber: 6\nNumber: 7\nNumber: 8\nNumber: 9\nNumber: 10\n\nWhile loop:\nCount: 1\nCount: 2\nCount: 3\nCount: 4\nCount: 5\n\nRange-based for loop:\nRange value: 0\nRange value: 1\nRange value: 2\nRange value: 3\nRange value: 4\n\nLoop with break and continue:\nOdd number: 1\nOdd number: 3\nOdd number: 5\n\nNested loops:\ni=0, j=0\ni=0, j=1\ni=0, j=2\ni=1, j=0\ni=1, j=1\ni=1, j=2\ni=2, j=0\ni=2, j=1\ni=2, j=2\n\nFor loop with enumerate:\nIndex 0: apple\nIndex 1: banana\nIndex 2: cherry\n\nFor loop with zip:\nAlice is 25 years old\nBob is 30 years old\nCharlie is 35 years old",
      "cppOutput": "For loop:\nNumber: 1\nNumber: 2\nNumber: 3\nNumber: 4\nNumber: 5\nNumber: 6\nNumber: 7\nNumber: 8\nNumber: 9\nNumber: 10\n\nWhile loop:\nCount: 1\nCount: 2\nCount: 3\nCount: 4\nCount: 5\n\nRange-based for loop:\nRange value: 0\nRange value: 1\nRange value: 2\nRange value: 3\nRange value: 4\n\nLoop with break and continue:\nOdd number: 1\nOdd number: 3\nOdd number: 5\n\nNested loops:\ni=0, j=0\ni=0, j=1\ni=0, j=2\ni=1, j=0\ni=1, j=1\ni=1, j=2\ni=2, j=0\ni=2, j=1\ni=2, j=2\n\nFor loop with enumerate:\nIndex 0: apple\nIndex 1: banana\nIndex 2: cherry\n\nFor loop with zip:\nAlice is 25 years old\nBob is 30 years old\nCharlie is 35 years old"
    },
    {
      "name": "test_magic_methods",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== __str__ and __repr__ ===\nstr(p): Point(3, 4)\nrepr(p): Point(x=3, y=4)\n\n=== Comparison Magic Methods ===\nalice == charlie: True\nalice != bob: True\nalice < bob: True\nbob > alice: True\nalice <= charlie: True\n\n=== Arithmetic Magic Methods ===\nv1 + v2 = Vector(4, 6)\nv2 - v1 = Vector(2, 2)\nv1 * 3 = Vector(3, 6)\nv2 / 2 = Vector(1.5, 2.0)\n\n=== Container Magic Methods ===\nlen(my_list): 5\nmy_list[2]: 3\n3 in my_list: True\n10 in my_list: False\nAfter setting my_list[1] = 20: 20\n\n=== __call__ Magic Method ===\ntimes_three(5) = 15\n\n=== Context Manager Magic Methods ===\n  Opening test.txt\n  Inside context\n  Closing test.txt\n\n=== Iterator Magic Methods ===\nCounter from 0 to 5:\n  0\n  1\n  2\n  3\n  4\n\n=== __hash__ Magic Method ===\nUsing hashable point as dict key: Point 1\n\n=== __bool__ Magic Method ===\nbool(empty): False\nbool(not_empty): True\n\n=== __format__ Magic Method ===\nDefault: 42\nHex: 0xADDR\nBinary: 0b101010\n\n=== All magic method tests completed ===",
      "cppOutput": "=== __str__ and __repr__ ===\nstr(p): Point(3, 4)\nrepr(p): Point(x=3, y=4)\n\n=== Comparison Magic Methods ===\nalice == charlie: True\nalice != bob: True\nalice < bob: True\nbob > alice: True\nalice <= charlie: True\n\n=== Arithmetic Magic Methods ===\nv1 + v2 = Vector(4, 6)\nv2 - v1 = Vector(2, 2)\nv1 * 3 = Vector(3, 6)\nv2 / 2 = Vector(1.5, 2.0)\n\n=== Container Magic Methods ===\nlen(my_list): 5\nmy_list[2]: 3\n3 in my_list: True\n10 in my_list: False\nAfter setting my_list[1] = 20: 20\n\n=== __call__ Magic Method ===\ntimes_three(5) = 15\n\n=== Context Manager Magic Methods ===\n  Opening test.txt\n  Inside context\n  Closing test.txt\n\n=== Iterator Magic Methods ===\nCounter from 0 to 5:\n  0\n  1\n  2\n  3\n  4\n\n=== __hash__ Magic Method ===\nUsing hashable point as dict key: Point 1\n\n=== __bool__ Magic Method ===\nbool(empty): False\nbool(not_empty): True\n\n=== __format__ Magic Method ===\nDefault: 42\nHex: 0xADDR\nBinary: 0b101010\n\n=== All magic method tests completed ==="
    },
    {
      "name": "test_memory_management",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python Memory Management: __slots__, weakref, gc Module Demonstration\n================================================================================\n=== Testing __slots__ Memory Usage ===\nCreating 10000 instances of each class...\nRegular class:\n  Creation time: 0.02s\n  Approximate memory: 480,000 bytes\n  Instance size: 48 bytes\nSlotted class:\n  Creation time: 0.02s\n  Approximate memory: 560,000 bytes\n  Instance size: 56 bytes\nMemory savings: -16.7%\n\n--- Testing Slot Restrictions ---\nAllowed attributes: ['name', 'value', 'data']\nname: test\nvalue: 42\n✓ Correctly prevented new attribute: 'SlottedClass' object has no attribute 'new_attribute' and no __dict__ for setting new attributes\n\n=== Testing Slots Inheritance ===\nInherited slots: ['extra_field']\nName: test (from parent)\nValue: 100 (from parent)\nExtra field: extra_value (from child)\nInstance size: 64 bytes\n✓ Correctly prevented new attribute in inherited class: 'SlottedWithInheritance' object has no attribute 'another_new_attr' and no __dict__ for setting new attributes\n\n=== Testing Weak References ===\nOriginal objects: DataObject(100), DataObject(200)\nWeak references: DataObject(100), DataObject(200)\nWeak reference is alive: True\nWeak reference value: 100\nAfter deleting obj1:\nWeak reference 1 is alive: False\nWeak reference 2 is alive: True\n\n--- Testing WeakValueDictionary ---\nWeak dict before deletion: {'obj1': DataObject(300), 'obj2': DataObject(400)}\nWeak dict after deleting obj1: {'obj2': DataObject(400)}\n\n--- Testing WeakKeyDictionary ---\nWeak key dict before deletion: {DataObject(key1): 'value1', DataObject(key2): 'value2'}\nWeak key dict after deleting key1: {DataObject(key2): 'value2'}\n\n=== Testing Garbage Collection ===\nGC is enabled: True\nGC thresholds: (2000, 10, 10)\nCurrent GC count: (1, 0, 0)\n\nCreated circular reference: Node(1) -> Node(2) -> Node(3) -> Node(1)\nGC disabled: True\nDeleted all references to nodes with circular reference\nManually collected 10 objects\nGC re-enabled: True\n\n=== Testing Memory Profiling ===\nTop memory allocations:\n  /home/qwe12345678/hyperstatic2/test/python-tests/test_memory_management.py:255: size=3899 KiB (+3899 KiB), count=99745 (+99745), average=40 B\n  /usr/lib/python3.13/tracemalloc.py:560: size=384 B (+384 B), count=2 (+2), average=192 B\n  /usr/lib/python3.13/tracemalloc.py:423: size=376 B (+376 B), count=2 (+2), average=188 B\n  /usr/lib/python3.13/tracemalloc.py:558: size=112 B (+56 B), count=2 (+1), average=56 B\n  /usr/lib/python3.13/tracemalloc.py:313: size=48 B (+48 B), count=1 (+1), average=48 B\n\nCurrent memory usage: 3.81 MB\nPeak memory usage: 3.81 MB\n\n=== Testing Object Lifecycle ===\nCreated: ManagedObject(first)\nCreated: ManagedObject(second)\nCreated: ManagedObject(third)\nActive instances after creation: 3\nDestroyed: ManagedObject(first)\nActive instances after deletion: 2\nObjects in weak set: 2\nDestroyed: ManagedObject(second)\nObjects in weak set after deletion: 1\nDestroyed: ManagedObject(third)\n\n=== Testing Memory Optimization Patterns ===\nAverage size per RegularPoint: 48.0 bytes\nAverage size per SlottedPoint: 48.0 bytes\nMemory savings with slots: 0.0%\n\nObject pool - Active: 2, Pool size: 0\nAfter returning objects - Active: 0, Pool size: 2\n\n=== Summary ===\nKey concepts demonstrated:\n1. __slots__ for memory optimization and attribute restriction\n2. weakref for creating weak references that don't prevent garbage collection\n3. gc module for manual garbage collection control\n4. Memory profiling with tracemalloc\n5. Object lifecycle management with weak references\n6. Memory optimization patterns including object pooling\n\nBest practices:\n- Use __slots__ when creating many instances with fixed attributes\n- Use weakref for caches and observer patterns to avoid circular references\n- Monitor memory usage in production applications\n- Implement proper cleanup in __del__ methods",
      "cppOutput": "Python Memory Management: __slots__, weakref, gc Module Demonstration\n================================================================================\n=== Testing __slots__ Memory Usage ===\nCreating 10000 instances of each class...\nRegular class:\n  Creation time: 0.02s\n  Approximate memory: 480,000 bytes\n  Instance size: 48 bytes\nSlotted class:\n  Creation time: 0.02s\n  Approximate memory: 560,000 bytes\n  Instance size: 56 bytes\nMemory savings: -16.7%\n\n--- Testing Slot Restrictions ---\nAllowed attributes: ['name', 'value', 'data']\nname: test\nvalue: 42\n✓ Correctly prevented new attribute: 'SlottedClass' object has no attribute 'new_attribute' and no __dict__ for setting new attributes\n\n=== Testing Slots Inheritance ===\nInherited slots: ['extra_field']\nName: test (from parent)\nValue: 100 (from parent)\nExtra field: extra_value (from child)\nInstance size: 64 bytes\n✓ Correctly prevented new attribute in inherited class: 'SlottedWithInheritance' object has no attribute 'another_new_attr' and no __dict__ for setting new attributes\n\n=== Testing Weak References ===\nOriginal objects: DataObject(100), DataObject(200)\nWeak references: DataObject(100), DataObject(200)\nWeak reference is alive: True\nWeak reference value: 100\nAfter deleting obj1:\nWeak reference 1 is alive: False\nWeak reference 2 is alive: True\n\n--- Testing WeakValueDictionary ---\nWeak dict before deletion: {'obj1': DataObject(300), 'obj2': DataObject(400)}\nWeak dict after deleting obj1: {'obj2': DataObject(400)}\n\n--- Testing WeakKeyDictionary ---\nWeak key dict before deletion: {DataObject(key1): 'value1', DataObject(key2): 'value2'}\nWeak key dict after deleting key1: {DataObject(key2): 'value2'}\n\n=== Testing Garbage Collection ===\nGC is enabled: True\nGC thresholds: (2000, 10, 10)\nCurrent GC count: (1, 0, 0)\n\nCreated circular reference: Node(1) -> Node(2) -> Node(3) -> Node(1)\nGC disabled: True\nDeleted all references to nodes with circular reference\nManually collected 10 objects\nGC re-enabled: True\n\n=== Testing Memory Profiling ===\nTop memory allocations:\n  /home/qwe12345678/hyperstatic2/test/python-tests/test_memory_management.py:255: size=3899 KiB (+3899 KiB), count=99745 (+99745), average=40 B\n  /usr/lib/python3.13/tracemalloc.py:560: size=384 B (+384 B), count=2 (+2), average=192 B\n  /usr/lib/python3.13/tracemalloc.py:423: size=376 B (+376 B), count=2 (+2), average=188 B\n  /usr/lib/python3.13/tracemalloc.py:558: size=112 B (+56 B), count=2 (+1), average=56 B\n  /usr/lib/python3.13/tracemalloc.py:313: size=48 B (+48 B), count=1 (+1), average=48 B\n\nCurrent memory usage: 3.81 MB\nPeak memory usage: 3.81 MB\n\n=== Testing Object Lifecycle ===\nCreated: ManagedObject(first)\nCreated: ManagedObject(second)\nCreated: ManagedObject(third)\nActive instances after creation: 3\nDestroyed: ManagedObject(first)\nActive instances after deletion: 2\nObjects in weak set: 2\nDestroyed: ManagedObject(second)\nObjects in weak set after deletion: 1\nDestroyed: ManagedObject(third)\n\n=== Testing Memory Optimization Patterns ===\nAverage size per RegularPoint: 48.0 bytes\nAverage size per SlottedPoint: 48.0 bytes\nMemory savings with slots: 0.0%\n\nObject pool - Active: 2, Pool size: 0\nAfter returning objects - Active: 0, Pool size: 2\n\n=== Summary ===\nKey concepts demonstrated:\n1. __slots__ for memory optimization and attribute restriction\n2. weakref for creating weak references that don't prevent garbage collection\n3. gc module for manual garbage collection control\n4. Memory profiling with tracemalloc\n5. Object lifecycle management with weak references\n6. Memory optimization patterns including object pooling\n\nBest practices:\n- Use __slots__ when creating many instances with fixed attributes\n- Use weakref for caches and observer patterns to avoid circular references\n- Monitor memory usage in production applications\n- Implement proper cleanup in __del__ methods"
    },
    {
      "name": "test_modules_imports",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Math module tests:\nPi: 3.141592653589793\nSquare root of 16: 4.0\nPower of 2^3: 8.0\nFactorial of 5: 120\n\nRandom module tests:\nRandom number between 1-100: 73\nRandom choice from list: cherry\nRandom floats: [0.8464670204598589, 0.12523692080420568, 0.6309950607224991]\n\nDatetime module tests:\nCurrent date and time: DATE.134852\nCurrent date: 2025-10-12\nCurrent time: 01:27:38.134852\nFormatted date: DATE\n\nJSON module tests:\nData as JSON: {\"name\": \"Alice\", \"age\": 30, \"hobbies\": [\"reading\", \"swimming\", \"coding\"], \"active\": true}\nParsed name: Alice\nParsed hobbies: ['reading', 'swimming', 'coding']\n\nUsing specific imports:\nSquare root of 25: 5.0\nPi value: 3.141592653589793\nRandom choice: red\n\nModule constant: I am a constant\nModule function: Function from test module\nModule class: Hello from Test!",
      "cppOutput": "Math module tests:\nPi: 3.141592653589793\nSquare root of 16: 4.0\nPower of 2^3: 8.0\nFactorial of 5: 120\n\nRandom module tests:\nRandom number between 1-100: 73\nRandom choice from list: cherry\nRandom floats: [0.8464670204598589, 0.12523692080420568, 0.6309950607224991]\n\nDatetime module tests:\nCurrent date and time: DATE.134852\nCurrent date: 2025-10-12\nCurrent time: 01:27:38.134852\nFormatted date: DATE\n\nJSON module tests:\nData as JSON: {\"name\": \"Alice\", \"age\": 30, \"hobbies\": [\"reading\", \"swimming\", \"coding\"], \"active\": true}\nParsed name: Alice\nParsed hobbies: ['reading', 'swimming', 'coding']\n\nUsing specific imports:\nSquare root of 25: 5.0\nPi value: 3.141592653589793\nRandom choice: red\n\nModule constant: I am a constant\nModule function: Function from test module\nModule class: Hello from Test!"
    },
    {
      "name": "test_multiprocessing_futures",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Testing Multiprocessing Basics ===\nWorker worker_0 started (PID: 95019)\nWorker worker_1 started (PID: 95020)\nWorker worker_2 started (PID: 95021)\nWorker worker_0 finished\nWorker worker_1 finished\nWorker worker_2 finished\nMain process PID: 95018\n\n=== Testing Process Pool ===\nPool.map results: [21081849486.439312, 59628477163.71761, 109544508762.22269, 168654805379.8441, 235702256859.7696]\nPool.apply_async results: [21081849486.439312, 59628477163.71761, 109544508762.22269, 168654805379.8441, 235702256859.7696]\nProcess pool completed in 15.08 seconds\n\n=== Testing ProcessPoolExecutor ===\nProcessPoolExecutor.map results: [TS, 21081849486.439312, 38729831525.37118, 59628477163.71761, 83333330833.1264]\nTask completed with result: TS\nTask completed with result: 21081849486.439312\nTask completed with result: 38729831525.37118\nTask completed with result: 59628477163.71761\nTask completed with result: 83333330833.1264\nProcessPoolExecutor completed in 6.80 seconds\n\n=== Testing ThreadPoolExecutor ===\nThread task result: IO task completed after 0.1s\nThread task result: IO task completed after 0.2s\nThread task result: IO task completed after 0.3s\nThread task result: IO task completed after 0.4s\nThread task result: IO task completed after 0.5s\nThreadPoolExecutor completed in 0.50 seconds\n\n=== Testing Mixed CPU/IO Tasks ===\nTask 1: Starting CPU work (50)\nTask 2: Starting CPU work (30)\nTask 3: Starting CPU work (40)\nTask 2: Starting IO wait (0.2s)\nTask 3: Starting IO wait (0.15s)\nTask 4: Starting CPU work (20)\nMixed task result: Task 2: CPU=3464100749, IO=0.2s\nTask 1: Starting IO wait (0.1s)\nTask 5: Starting CPU work (35)\nMixed task result: Task 3: CPU=5333332333, IO=0.15s\nTask 4: Starting IO wait (0.3s)\nMixed task result: Task 1: CPU=7453558807, IO=0.1s\nTask 5: Starting IO wait (0.25s)\nMixed task result: Task 4: CPU=1885617376, IO=0.3s\nMixed task result: Task 5: CPU=3464100749, IO=0.25s\nMixed tasks completed in 1.04 seconds\n\n=== Testing Process Communication ===\nProcess communication results: ['Worker 0: 0 -> 0', 'Worker 1: 1 -> 2', 'Worker 2: 2 -> 4', 'Worker 0: 3 -> 6', 'Worker 1: 4 -> 8', 'Worker 2: 5 -> 10', 'Worker 1: 7 -> 14', 'Worker 0: 6 -> 12', 'Worker 2: 8 -> 16', 'Worker 0: 9 -> 18']\n\n=== Testing Timeout and Cancellation ===\nTask progress: 1/20\nTask progress: 2/20\nTask progress: 3/20\nTask progress: 4/20\nTask progress: 5/20\nTask progress: 6/20\nTask progress: 7/20\nTask progress: 8/20\nTask progress: 9/20\nTask timed out after 1 second\nTask cancelled\nTask progress: 10/20\nTask progress: 11/20\nTask progress: 12/20\nTask progress: 13/20\nTask progress: 14/20\nTask progress: 15/20\nTask progress: 16/20\nTask progress: 17/20\nTask progress: 18/20\nTask progress: 19/20\nTask progress: 20/20\n\n=== All multiprocessing tests completed (PID: 95018) ===",
      "cppOutput": "=== Testing Multiprocessing Basics ===\nWorker worker_0 started (PID: 95019)\nWorker worker_1 started (PID: 95020)\nWorker worker_2 started (PID: 95021)\nWorker worker_0 finished\nWorker worker_1 finished\nWorker worker_2 finished\nMain process PID: 95018\n\n=== Testing Process Pool ===\nPool.map results: [21081849486.439312, 59628477163.71761, 109544508762.22269, 168654805379.8441, 235702256859.7696]\nPool.apply_async results: [21081849486.439312, 59628477163.71761, 109544508762.22269, 168654805379.8441, 235702256859.7696]\nProcess pool completed in 15.08 seconds\n\n=== Testing ProcessPoolExecutor ===\nProcessPoolExecutor.map results: [TS, 21081849486.439312, 38729831525.37118, 59628477163.71761, 83333330833.1264]\nTask completed with result: TS\nTask completed with result: 21081849486.439312\nTask completed with result: 38729831525.37118\nTask completed with result: 59628477163.71761\nTask completed with result: 83333330833.1264\nProcessPoolExecutor completed in 6.80 seconds\n\n=== Testing ThreadPoolExecutor ===\nThread task result: IO task completed after 0.1s\nThread task result: IO task completed after 0.2s\nThread task result: IO task completed after 0.3s\nThread task result: IO task completed after 0.4s\nThread task result: IO task completed after 0.5s\nThreadPoolExecutor completed in 0.50 seconds\n\n=== Testing Mixed CPU/IO Tasks ===\nTask 1: Starting CPU work (50)\nTask 2: Starting CPU work (30)\nTask 3: Starting CPU work (40)\nTask 2: Starting IO wait (0.2s)\nTask 3: Starting IO wait (0.15s)\nTask 4: Starting CPU work (20)\nMixed task result: Task 2: CPU=3464100749, IO=0.2s\nTask 1: Starting IO wait (0.1s)\nTask 5: Starting CPU work (35)\nMixed task result: Task 3: CPU=5333332333, IO=0.15s\nTask 4: Starting IO wait (0.3s)\nMixed task result: Task 1: CPU=7453558807, IO=0.1s\nTask 5: Starting IO wait (0.25s)\nMixed task result: Task 4: CPU=1885617376, IO=0.3s\nMixed task result: Task 5: CPU=3464100749, IO=0.25s\nMixed tasks completed in 1.04 seconds\n\n=== Testing Process Communication ===\nProcess communication results: ['Worker 0: 0 -> 0', 'Worker 1: 1 -> 2', 'Worker 2: 2 -> 4', 'Worker 0: 3 -> 6', 'Worker 1: 4 -> 8', 'Worker 2: 5 -> 10', 'Worker 1: 7 -> 14', 'Worker 0: 6 -> 12', 'Worker 2: 8 -> 16', 'Worker 0: 9 -> 18']\n\n=== Testing Timeout and Cancellation ===\nTask progress: 1/20\nTask progress: 2/20\nTask progress: 3/20\nTask progress: 4/20\nTask progress: 5/20\nTask progress: 6/20\nTask progress: 7/20\nTask progress: 8/20\nTask progress: 9/20\nTask timed out after 1 second\nTask cancelled\nTask progress: 10/20\nTask progress: 11/20\nTask progress: 12/20\nTask progress: 13/20\nTask progress: 14/20\nTask progress: 15/20\nTask progress: 16/20\nTask progress: 17/20\nTask progress: 18/20\nTask progress: 19/20\nTask progress: 20/20\n\n=== All multiprocessing tests completed (PID: 95018) ==="
    },
    {
      "name": "test_networking",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== URL Parsing ===\nURL parsing:\n\nURL: https://www.example.com/path/to/page?param1=value1&param2=value2#fragment\n  Scheme: https\n  Netloc: www.example.com\n  Path: /path/to/page\n  Params: \n  Query: param1=value1&param2=value2\n  Fragment: fragment\n\nURL: http://subdomain.domain.com:8080/api/v1/users\n  Scheme: http\n  Netloc: subdomain.domain.com:8080\n  Path: /api/v1/users\n  Params: \n  Query: \n  Fragment: \n\nURL: ftp://files.server.org/download/file.txt\n  Scheme: ftp\n  Netloc: files.server.org\n  Path: /download/file.txt\n  Params: \n  Query: \n  Fragment: \n\nURL: https://example.com\n  Scheme: https\n  Netloc: example.com\n  Path: \n  Params: \n  Query: \n  Fragment: \n\nURL: mailto:user@example.com\n  Scheme: mailto\n  Netloc: \n  Path: user@example.com\n  Params: \n  Query: \n  Fragment: \n\n=== HTTP GET Request ===\nMaking GET request to: https://httpbin.org/get?key1=value1&key2=value2\nResponse status: 200\nResponse headers: {'Date': 'Sat, 11 Oct 2025 17:28:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '349', 'Connection': 'close', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}\nResponse data: {\n  \"args\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"headers\": {\n    \"Accept-Encoding\": \"identity\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"Python-urllib/3.13\",\n    \"X-Amzn-Trace-Id\": \"Root=1-68ea93a6-64f89f977d3a6e5233f9ba0c\"\n  },\n  \"origin\": \"114.248.127.192\",\n  \"url\": \"https://httpbin.org/get?key1=value1&key2=value2\"\n}\n\n=== HTTP POST Request ===\nMaking POST request to: https://httpbin.org/post\nResponse status: 200\nResponse data: {\n  \"args\": {},\n  \"data\": \"\",\n  \"files\": {},\n  \"form\": {\n    \"email\": \"john@example.com\",\n    \"message\": \"Hello, World!\",\n    \"name\": \"John Doe\"\n  },\n  \"headers\": {\n    \"Accept-Encoding\": \"identity\",\n    \"Content-Length\": \"64\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"Python-urllib/3.13\",\n    \"X-Amzn-Trace-Id\": \"Root=1-68ea93a7-143e24a2745d41e57e7c6dcf\"\n  },\n  \"json\": null,\n  \"origin\": \"114.248.127.192\",\n  \"url\": \"https://httpbin.org/post\"\n}\n\n=== JSON API Request ===\nMaking JSON request to: https://jsonplaceholder.typicode.com/posts/1\nResponse status: 200\nContent-Type: application/json; charset=utf-8\nPost data:\n  ID: 1\n  Title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n  Body: quia et suscipit\nsuscipit recusandae consequuntur ...\n\n=== Socket Operations ===\nTesting socket operations for www.example.com:80\nIP address of www.example.com: 88.221.83.146\nConnected to www.example.com:80\n\nHTTP Response (first few lines):\n  HTTP/1.1 200 OK\n  Content-Type: text/html\n  ETag: \"bc2473a18e003bdb249eba5ce893033f:TS\"\n  Last-Modified: Thu, 09 Oct 2025 16:42:02 GMT\n  Cache-Control: max-age=86000\n  Date: Sat, 11 Oct 2025 17:28:09 GMT\n  Content-Length: 513\n  Connection: close\n  X-N: S\n\n=== URL Encoding/Decoding ===\nOriginal URL: https://example.com/search?q=Python programming&category=web development&page=1\nParsed query parameters: {'q': ['Python programming'], 'category': ['web development'], 'page': ['1']}\n\nNew URL: https://example.com/search?q=Data+Science&category=web+development&page=1&sort=relevance\n\nOriginal text: Hello World! Programming & Coding\nURL encoded: Hello%20World%21%20Programming%20%26%20Coding\nURL decoded: Hello World! Programming & Coding\n\n=== HTTP Headers ===\nMaking request with custom headers to: https://httpbin.org/headers\nResponse status: 200\nResponse headers from server: {\n  \"Accept\": \"application/json\",\n  \"Accept-Encoding\": \"identity\",\n  \"Host\": \"httpbin.org\",\n  \"User-Agent\": \"Mozilla/5.0 (Test Script)\",\n  \"X-Amzn-Trace-Id\": \"Root=1-68ea93aa-0edd8e1257b17bb4502ce35d\",\n  \"X-Custom-Header\": \"TestValue\"\n}\n\n=== Error Handling ===\nTesting error handling:\n\nTrying: https://www.example.com\n  Success: 200\n\nTrying: https://this-domain-does-not-exist.com\n  URL Error: [Errno -2] Name or service not known\n\nTrying: https://www.example.com/nonexistent-page\n  HTTP Error 404: Not Found\n\nTrying: http://localhost:9999\n  URL Error: [Errno 111] Connection refused",
      "cppOutput": "=== URL Parsing ===\nURL parsing:\n\nURL: https://www.example.com/path/to/page?param1=value1&param2=value2#fragment\n  Scheme: https\n  Netloc: www.example.com\n  Path: /path/to/page\n  Params: \n  Query: param1=value1&param2=value2\n  Fragment: fragment\n\nURL: http://subdomain.domain.com:8080/api/v1/users\n  Scheme: http\n  Netloc: subdomain.domain.com:8080\n  Path: /api/v1/users\n  Params: \n  Query: \n  Fragment: \n\nURL: ftp://files.server.org/download/file.txt\n  Scheme: ftp\n  Netloc: files.server.org\n  Path: /download/file.txt\n  Params: \n  Query: \n  Fragment: \n\nURL: https://example.com\n  Scheme: https\n  Netloc: example.com\n  Path: \n  Params: \n  Query: \n  Fragment: \n\nURL: mailto:user@example.com\n  Scheme: mailto\n  Netloc: \n  Path: user@example.com\n  Params: \n  Query: \n  Fragment: \n\n=== HTTP GET Request ===\nMaking GET request to: https://httpbin.org/get?key1=value1&key2=value2\nResponse status: 200\nResponse headers: {'Date': 'Sat, 11 Oct 2025 17:28:06 GMT', 'Content-Type': 'application/json', 'Content-Length': '349', 'Connection': 'close', 'Server': 'gunicorn/19.9.0', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true'}\nResponse data: {\n  \"args\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n  },\n  \"headers\": {\n    \"Accept-Encoding\": \"identity\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"Python-urllib/3.13\",\n    \"X-Amzn-Trace-Id\": \"Root=1-68ea93a6-64f89f977d3a6e5233f9ba0c\"\n  },\n  \"origin\": \"114.248.127.192\",\n  \"url\": \"https://httpbin.org/get?key1=value1&key2=value2\"\n}\n\n=== HTTP POST Request ===\nMaking POST request to: https://httpbin.org/post\nResponse status: 200\nResponse data: {\n  \"args\": {},\n  \"data\": \"\",\n  \"files\": {},\n  \"form\": {\n    \"email\": \"john@example.com\",\n    \"message\": \"Hello, World!\",\n    \"name\": \"John Doe\"\n  },\n  \"headers\": {\n    \"Accept-Encoding\": \"identity\",\n    \"Content-Length\": \"64\",\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"Python-urllib/3.13\",\n    \"X-Amzn-Trace-Id\": \"Root=1-68ea93a7-143e24a2745d41e57e7c6dcf\"\n  },\n  \"json\": null,\n  \"origin\": \"114.248.127.192\",\n  \"url\": \"https://httpbin.org/post\"\n}\n\n=== JSON API Request ===\nMaking JSON request to: https://jsonplaceholder.typicode.com/posts/1\nResponse status: 200\nContent-Type: application/json; charset=utf-8\nPost data:\n  ID: 1\n  Title: sunt aut facere repellat provident occaecati excepturi optio reprehenderit\n  Body: quia et suscipit\nsuscipit recusandae consequuntur ...\n\n=== Socket Operations ===\nTesting socket operations for www.example.com:80\nIP address of www.example.com: 88.221.83.146\nConnected to www.example.com:80\n\nHTTP Response (first few lines):\n  HTTP/1.1 200 OK\n  Content-Type: text/html\n  ETag: \"bc2473a18e003bdb249eba5ce893033f:TS\"\n  Last-Modified: Thu, 09 Oct 2025 16:42:02 GMT\n  Cache-Control: max-age=86000\n  Date: Sat, 11 Oct 2025 17:28:09 GMT\n  Content-Length: 513\n  Connection: close\n  X-N: S\n\n=== URL Encoding/Decoding ===\nOriginal URL: https://example.com/search?q=Python programming&category=web development&page=1\nParsed query parameters: {'q': ['Python programming'], 'category': ['web development'], 'page': ['1']}\n\nNew URL: https://example.com/search?q=Data+Science&category=web+development&page=1&sort=relevance\n\nOriginal text: Hello World! Programming & Coding\nURL encoded: Hello%20World%21%20Programming%20%26%20Coding\nURL decoded: Hello World! Programming & Coding\n\n=== HTTP Headers ===\nMaking request with custom headers to: https://httpbin.org/headers\nResponse status: 200\nResponse headers from server: {\n  \"Accept\": \"application/json\",\n  \"Accept-Encoding\": \"identity\",\n  \"Host\": \"httpbin.org\",\n  \"User-Agent\": \"Mozilla/5.0 (Test Script)\",\n  \"X-Amzn-Trace-Id\": \"Root=1-68ea93aa-0edd8e1257b17bb4502ce35d\",\n  \"X-Custom-Header\": \"TestValue\"\n}\n\n=== Error Handling ===\nTesting error handling:\n\nTrying: https://www.example.com\n  Success: 200\n\nTrying: https://this-domain-does-not-exist.com\n  URL Error: [Errno -2] Name or service not known\n\nTrying: https://www.example.com/nonexistent-page\n  HTTP Error 404: Not Found\n\nTrying: http://localhost:9999\n  URL Error: [Errno 111] Connection refused"
    },
    {
      "name": "test_object_oriented",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "All object-oriented tests passed!",
      "cppOutput": "All object-oriented tests passed!"
    },
    {
      "name": "test_operators",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Bitwise Operators ===\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2 = 15\n\n=== Identity Operators ===\nx is y: True\nx is z: False\nx is not z: True\nx == z: True\nval1 is None: True\nval1 is not None: False\n\n=== Ternary Operator ===\nStatus: adult\nNumber is: positive\nMax value: 20\n\n=== Walrus Operator ===\nn is 10 which is greater than 5\nDoubled values > 4: [6, 8, 10]\n\n=== Comparison Chaining ===\n1 < x < 10: True\n1 < x < 4: False\nx > 0 and x < 10: True\na < b < c: True\na < b and b < c: True\n\n=== All tests completed ===",
      "cppOutput": "=== Bitwise Operators ===\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2 = 15\n\n=== Identity Operators ===\nx is y: True\nx is z: False\nx is not z: True\nx == z: True\nval1 is None: True\nval1 is not None: False\n\n=== Ternary Operator ===\nStatus: adult\nNumber is: positive\nMax value: 20\n\n=== Walrus Operator ===\nn is 10 which is greater than 5\nDoubled values > 4: [6, 8, 10]\n\n=== Comparison Chaining ===\n1 < x < 10: True\n1 < x < 4: False\nx > 0 and x < 10: True\na < b < c: True\na < b and b < c: True\n\n=== All tests completed ==="
    },
    {
      "name": "test_properties_classmethods",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python Property Decorators, Classmethod and Staticmethod Demonstration\n================================================================================\n=== Testing Circle Properties ===\nCircle with radius 5\nDiameter: 10\nArea: 78.54\nCircumference: 31.42\nColor: red\nColor after change: blue\n✓ Correctly rejected invalid color: Invalid color. Must be one of: ['red', 'blue', 'green', 'yellow', 'black', 'white']\nDeleting color property\nColor after deletion: None\n\n=== Testing Temperature Properties ===\nTemperature: 25°C\nFahrenheit: 77.0°F\nKelvin: 298.1K\n\nAfter setting 77°F:\nCelsius: 25.0°C\nFahrenheit: 77.0°F\nKelvin: 298.1K\n\nAfter setting 300K:\nCelsius: 26.9°C\nFahrenheit: 80.3°F\nKelvin: 300.0K\n✓ Correctly rejected invalid temperature: Temperature cannot be below absolute zero (-273.15°C)\n\n=== Testing BankAccount Class Methods ===\nSavings account: 1234567890, Balance: $1,000.00\nChecking account: 0987654321, Balance: $500.00\nCurrent interest rate: 5.00%\nNew interest rate: 6.00%\nIs valid account number? True\nIs valid account number? False\nCompound interest (5 years): $1276.28\n100 USD to CNY: 720.00\n\n=== Testing MathUtils Static Methods ===\nFactorial of 5: 120\nFactorial of 0: 1\nIs 2 prime? True\nIs 3 prime? True\nIs 5 prime? True\nIs 7 prime? True\nIs 11 prime? True\nIs 13 prime? True\nIs 17 prime? True\nIs 19 prime? True\nIs 23 prime? True\nIs 29 prime? True\nFirst 10 Fibonacci numbers: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nGCD of 48 and 18: 6\nLCM of 12 and 18: 36\nMathUtils.PI: 3.141592653589793\nMathUtils.E: 2.718281828459045\n\n=== Testing Property Edge Cases ===\nOriginal color: red\nDeleting color property\nColor after deletion: None\nColor after reset: green\n\n=== Testing Inheritance with Properties ===\nSquare area: 16\nTriangle area: 9.0\n\n=== Summary ===\nKey concepts demonstrated:\n1. Property decorators with getter, setter, and deleter\n2. Calculated properties (read-only)\n3. Properties with validation\n4. Class methods for factory patterns and class-level operations\n5. Static methods for utility functions\n6. Inheritance with properties\n\nProperty vs Classmethod vs Staticmethod:\n- Property: Instance-level computed attributes with optional validation\n- Classmethod: Operations that affect the class itself or create instances\n- Staticmethod: Utility functions that don't need instance or class state",
      "cppOutput": "Python Property Decorators, Classmethod and Staticmethod Demonstration\n================================================================================\n=== Testing Circle Properties ===\nCircle with radius 5\nDiameter: 10\nArea: 78.54\nCircumference: 31.42\nColor: red\nColor after change: blue\n✓ Correctly rejected invalid color: Invalid color. Must be one of: ['red', 'blue', 'green', 'yellow', 'black', 'white']\nDeleting color property\nColor after deletion: None\n\n=== Testing Temperature Properties ===\nTemperature: 25°C\nFahrenheit: 77.0°F\nKelvin: 298.1K\n\nAfter setting 77°F:\nCelsius: 25.0°C\nFahrenheit: 77.0°F\nKelvin: 298.1K\n\nAfter setting 300K:\nCelsius: 26.9°C\nFahrenheit: 80.3°F\nKelvin: 300.0K\n✓ Correctly rejected invalid temperature: Temperature cannot be below absolute zero (-273.15°C)\n\n=== Testing BankAccount Class Methods ===\nSavings account: 1234567890, Balance: $1,000.00\nChecking account: 0987654321, Balance: $500.00\nCurrent interest rate: 5.00%\nNew interest rate: 6.00%\nIs valid account number? True\nIs valid account number? False\nCompound interest (5 years): $1276.28\n100 USD to CNY: 720.00\n\n=== Testing MathUtils Static Methods ===\nFactorial of 5: 120\nFactorial of 0: 1\nIs 2 prime? True\nIs 3 prime? True\nIs 5 prime? True\nIs 7 prime? True\nIs 11 prime? True\nIs 13 prime? True\nIs 17 prime? True\nIs 19 prime? True\nIs 23 prime? True\nIs 29 prime? True\nFirst 10 Fibonacci numbers: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nGCD of 48 and 18: 6\nLCM of 12 and 18: 36\nMathUtils.PI: 3.141592653589793\nMathUtils.E: 2.718281828459045\n\n=== Testing Property Edge Cases ===\nOriginal color: red\nDeleting color property\nColor after deletion: None\nColor after reset: green\n\n=== Testing Inheritance with Properties ===\nSquare area: 16\nTriangle area: 9.0\n\n=== Summary ===\nKey concepts demonstrated:\n1. Property decorators with getter, setter, and deleter\n2. Calculated properties (read-only)\n3. Properties with validation\n4. Class methods for factory patterns and class-level operations\n5. Static methods for utility functions\n6. Inheritance with properties\n\nProperty vs Classmethod vs Staticmethod:\n- Property: Instance-level computed attributes with optional validation\n- Classmethod: Operations that affect the class itself or create instances\n- Staticmethod: Utility functions that don't need instance or class state"
    },
    {
      "name": "test_python_basics",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "All Python basics tests passed!",
      "cppOutput": "All Python basics tests passed!"
    },
    {
      "name": "test_recursion",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Factorial Tests ===\nFactorial(0) = 1\nFactorial(1) = 1\nFactorial(2) = 2\nFactorial(3) = 6\nFactorial(4) = 24\nFactorial(5) = 120\n\n=== Fibonacci Tests ===\nFibonacci(0) = 0\nFibonacci(1) = 1\nFibonacci(2) = 1\nFibonacci(3) = 2\nFibonacci(4) = 3\nFibonacci(5) = 5\nFibonacci(6) = 8\nFibonacci(7) = 13\nFibonacci(8) = 21\nFibonacci(9) = 34\n\n=== Power Tests ===\n2^3 = 8\n3^4 = 81\n2^-2 = 0.25\n\n=== Binary Search Tests ===\nFound 7 at index 3\n2 not found in array\nFound 13 at index 6\n8 not found in array\n\n=== GCD Tests ===\nGCD(48, 18) = 6\nGCD(56, 98) = 14\nGCD(17, 5) = 1\n\n=== Tower of Hanoi (3 disks) ===\nMove disk 1 from A to C\nMove disk 2 from A to B\nMove disk 1 from C to B\nMove disk 3 from A to C\nMove disk 1 from B to A\nMove disk 2 from B to C\nMove disk 1 from A to C",
      "cppOutput": "=== Factorial Tests ===\nFactorial(0) = 1\nFactorial(1) = 1\nFactorial(2) = 2\nFactorial(3) = 6\nFactorial(4) = 24\nFactorial(5) = 120\n\n=== Fibonacci Tests ===\nFibonacci(0) = 0\nFibonacci(1) = 1\nFibonacci(2) = 1\nFibonacci(3) = 2\nFibonacci(4) = 3\nFibonacci(5) = 5\nFibonacci(6) = 8\nFibonacci(7) = 13\nFibonacci(8) = 21\nFibonacci(9) = 34\n\n=== Power Tests ===\n2^3 = 8\n3^4 = 81\n2^-2 = 0.25\n\n=== Binary Search Tests ===\nFound 7 at index 3\n2 not found in array\nFound 13 at index 6\n8 not found in array\n\n=== GCD Tests ===\nGCD(48, 18) = 6\nGCD(56, 98) = 14\nGCD(17, 5) = 1\n\n=== Tower of Hanoi (3 disks) ===\nMove disk 1 from A to C\nMove disk 2 from A to B\nMove disk 1 from C to B\nMove disk 3 from A to C\nMove disk 1 from B to A\nMove disk 2 from B to C\nMove disk 1 from A to C"
    },
    {
      "name": "test_regular_expressions",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Basic Patterns ===\nText: Hello World 123 Python 456\nDigits found: ['123', '456']\nWords found: ['Hello', 'World', '123', 'Python', '456']\nCapital letters: ['H', 'W', 'P']\n\n=== Groups ===\nText: John: 30 years old, Jane: 25 years old, Bob: 35 years old\nName-Age pairs: [('John', '30'), ('Jane', '25'), ('Bob', '35')]\nMatch: John is 30 years old\nMatch: Jane is 25 years old\nMatch: Bob is 35 years old\n\n=== Email Validation ===\nEmail validation:\nuser@example.com: Valid\njohn.doe@company.co.uk: Valid\ninvalid-email: Invalid\nanother@domain: Invalid\nvalid.email123@sub.domain.com: Valid\n@invalid.com: Invalid\nmissing@dotcom: Invalid\n\n=== Phone Number Extraction ===\nPhone number extraction:\nPattern '\\d{3}-\\d{3}-\\d{4}': ['123-456-7890', '800-555-1234']\nPattern '\\(\\d{3}\\) \\d{3}-\\d{4}': ['(555) 123-4567']\nPattern '\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}': ['+1-800-555-1234']\n\n=== Substitution ===\nOriginal: The quick brown fox jumps over the lazy dog.\nAfter substitution: The quick brown cat jumps over the lazy dog.\n\nMessy: 'This   has    multiple    spaces'\nCleaned: 'This has multiple spaces'\n\nWith punctuation: 'Hello, world! How are you?'\nWithout punctuation: 'Hello world How are you'\n\n=== Splitting ===\nText: apple,banana;cherry orange|grape\nSplit fruits: ['apple', 'banana', 'cherry', 'orange', 'grape']\n\nSentences: ['First sentence', ' Second sentence', ' Third sentence', '']\n\n=== Word Boundaries ===\nText: Python is a pythonic language. PYTHON programming is fun!\nExact 'Python' matches: ['Python']\nCase insensitive 'python' matches: ['Python', 'PYTHON']\n\n=== Lookahead and Lookbehind ===\nText: apple pie, banana split, cherry tart, apple juice\nWords followed by 'pie': ['apple']\nWords preceded by 'apple': ['pie', 'juice']\n\n=== URL Extraction ===\nURL extraction:\nFound URLs: ['https://www.example.com', 'http://sub.domain.com/path', 'www.another-site.com']\n\n=== HTML Tag Extraction ===\nHTML tag extraction:\nFound tags: ['div class=\"container\"', 'h1', '/h1', 'p', '/p', 'a href=\"https://example.com\"', '/a', '/div']",
      "cppOutput": "=== Basic Patterns ===\nText: Hello World 123 Python 456\nDigits found: ['123', '456']\nWords found: ['Hello', 'World', '123', 'Python', '456']\nCapital letters: ['H', 'W', 'P']\n\n=== Groups ===\nText: John: 30 years old, Jane: 25 years old, Bob: 35 years old\nName-Age pairs: [('John', '30'), ('Jane', '25'), ('Bob', '35')]\nMatch: John is 30 years old\nMatch: Jane is 25 years old\nMatch: Bob is 35 years old\n\n=== Email Validation ===\nEmail validation:\nuser@example.com: Valid\njohn.doe@company.co.uk: Valid\ninvalid-email: Invalid\nanother@domain: Invalid\nvalid.email123@sub.domain.com: Valid\n@invalid.com: Invalid\nmissing@dotcom: Invalid\n\n=== Phone Number Extraction ===\nPhone number extraction:\nPattern '\\d{3}-\\d{3}-\\d{4}': ['123-456-7890', '800-555-1234']\nPattern '\\(\\d{3}\\) \\d{3}-\\d{4}': ['(555) 123-4567']\nPattern '\\+\\d{1,3}-\\d{3}-\\d{3}-\\d{4}': ['+1-800-555-1234']\n\n=== Substitution ===\nOriginal: The quick brown fox jumps over the lazy dog.\nAfter substitution: The quick brown cat jumps over the lazy dog.\n\nMessy: 'This   has    multiple    spaces'\nCleaned: 'This has multiple spaces'\n\nWith punctuation: 'Hello, world! How are you?'\nWithout punctuation: 'Hello world How are you'\n\n=== Splitting ===\nText: apple,banana;cherry orange|grape\nSplit fruits: ['apple', 'banana', 'cherry', 'orange', 'grape']\n\nSentences: ['First sentence', ' Second sentence', ' Third sentence', '']\n\n=== Word Boundaries ===\nText: Python is a pythonic language. PYTHON programming is fun!\nExact 'Python' matches: ['Python']\nCase insensitive 'python' matches: ['Python', 'PYTHON']\n\n=== Lookahead and Lookbehind ===\nText: apple pie, banana split, cherry tart, apple juice\nWords followed by 'pie': ['apple']\nWords preceded by 'apple': ['pie', 'juice']\n\n=== URL Extraction ===\nURL extraction:\nFound URLs: ['https://www.example.com', 'http://sub.domain.com/path', 'www.another-site.com']\n\n=== HTML Tag Extraction ===\nHTML tag extraction:\nFound tags: ['div class=\"container\"', 'h1', '/h1', 'p', '/p', 'a href=\"https://example.com\"', '/a', '/div']"
    },
    {
      "name": "test_scope_closures",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Global and Local Scope ===\nInside function: local x\nOutside function: global x\n\n=== global Keyword ===\nBefore: counter = 0\nAfter: counter = 2\nBefore: value1=10, value2=20\nAfter: value1=100, value2=200\n\n=== nonlocal Keyword ===\nBefore inner: outer x\nInner: modified by inner\nAfter inner: modified by inner\n\n=== Simple Closures ===\ntimes_two(5) = 10\ntimes_three(5) = 15\n\n=== Closure Counter ===\ncounter1: 1, 2, 3\ncounter2: 1, 2\n\n=== Closure with Multiple Functions ===\nInitial balance: 100\nAfter deposit(50): 150\nAfter withdraw(30): 120\nFinal balance: 120\n\n=== LEGB Rule ===\nLocal: local\nEnclosing: enclosing\nGlobal: global\n\n=== Closure in Loop (Fixed) ===\nmult[0](10) = 0\nmult[1](10) = 10\nmult[2](10) = 20\nmult[3](10) = 30\nmult[4](10) = 40\n\n=== Nested Closures ===\nouter(1)(2)(3) = 6\n\n=== Closure vs Class ===\navg(10) = 10.0\navg(20) = 15.0\navg(30) = 20.0\n\n=== Reading Outer Variables ===\nResult: 30\n\n=== Modifying Mutable Outer Variables ===\nadd('a') = ['a']\nadd('b') = ['a', 'b']\nadd('c') = ['a', 'b', 'c']\n\n=== Closure State Preservation ===\nsquare(4) = 16\ncube(4) = 64\n\n=== All scope and closure tests completed ===",
      "cppOutput": "=== Global and Local Scope ===\nInside function: local x\nOutside function: global x\n\n=== global Keyword ===\nBefore: counter = 0\nAfter: counter = 2\nBefore: value1=10, value2=20\nAfter: value1=100, value2=200\n\n=== nonlocal Keyword ===\nBefore inner: outer x\nInner: modified by inner\nAfter inner: modified by inner\n\n=== Simple Closures ===\ntimes_two(5) = 10\ntimes_three(5) = 15\n\n=== Closure Counter ===\ncounter1: 1, 2, 3\ncounter2: 1, 2\n\n=== Closure with Multiple Functions ===\nInitial balance: 100\nAfter deposit(50): 150\nAfter withdraw(30): 120\nFinal balance: 120\n\n=== LEGB Rule ===\nLocal: local\nEnclosing: enclosing\nGlobal: global\n\n=== Closure in Loop (Fixed) ===\nmult[0](10) = 0\nmult[1](10) = 10\nmult[2](10) = 20\nmult[3](10) = 30\nmult[4](10) = 40\n\n=== Nested Closures ===\nouter(1)(2)(3) = 6\n\n=== Closure vs Class ===\navg(10) = 10.0\navg(20) = 15.0\navg(30) = 20.0\n\n=== Reading Outer Variables ===\nResult: 30\n\n=== Modifying Mutable Outer Variables ===\nadd('a') = ['a']\nadd('b') = ['a', 'b']\nadd('c') = ['a', 'b', 'c']\n\n=== Closure State Preservation ===\nsquare(4) = 16\ncube(4) = 64\n\n=== All scope and closure tests completed ==="
    },
    {
      "name": "test_sqlite_integration",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python SQLite Integration Demonstration\n==================================================\n=== Creating Sample Database ===\n✓ Database tables created successfully\n\n=== Testing Basic CRUD Operations ===\n✓ Inserted 4 users and 6 orders\n\n--- Reading Data ---\nAll users:\n  ID: 1, Username: alice, Email: alice@example.com, Age: 25\n  ID: 2, Username: bob, Email: bob@example.com, Age: 30\n  ID: 3, Username: charlie, Email: charlie@example.com, Age: 35\n  ID: 4, Username: diana, Email: diana@example.com, Age: 28\n\nAlice's details: {'id': 1, 'username': 'alice', 'email': 'alice@example.com', 'age': 25, 'created_at': 'DATE', 'updated_at': 'DATE'}\n\nUsers older than 28:\n  bob: 30 years old\n  charlie: 35 years old\n\n--- Updating Data ---\n✓ Alice's age updated to: 26\n\n--- Deleting Data ---\n✓ Remaining orders: 5\n\n=== Testing Advanced Queries ===\nUser orders (JOIN):\n\n  alice (alice@example.com):\n    - Laptop: 1 x $999.99 [completed]\n    - Mouse: 2 x $29.99 [completed]\n\n  bob (bob@example.com):\n    - Keyboard: 1 x $79.99 [pending]\n\n  charlie (charlie@example.com):\n    - Monitor: 1 x $299.99 [pending]\n\n  diana (diana@example.com):\n    - Headphones: 1 x $149.99 [pending]\n\n--- Aggregation Functions ---\nTotal users: 4\nAverage user age: 29.8\nTotal revenue: $1589.94\nMost expensive order: $999.99\n\nUser spending statistics:\n  alice: 2 orders, $1059.97 total\n  charlie: 1 orders, $299.99 total\n  diana: 1 orders, $149.99 total\n  bob: 1 orders, $79.99 total\n\n=== Testing Transactions ===\n--- Successful Transaction ---\n✓ Transaction committed successfully\n\n--- Transaction Rollback ---\n✓ Expected integrity error: UNIQUE constraint failed: users.username\n✓ Transaction was automatically rolled back\n\n=== Testing Prepared Statements ===\n✓ Inserted 3 users using prepared statement\nUsers aged 25-35: 7\n  alice: 26 years old\n  bob: 30 years old\n  diana: 28 years old\n  eve: 32 years old\n  grace: 27 years old\n  henry: 33 years old\n  iris: 29 years old\n\n=== Testing Database Metadata ===\nDatabase tables:\n  - users\n  - sqlite_sequence\n  - orders\n\nusers table structure:\n  id: INTEGER (NULL: True)\n  username: TEXT (NULL: False)\n  email: TEXT (NULL: False)\n  age: INTEGER (NULL: True)\n  created_at: TIMESTAMP (NULL: True)\n  updated_at: TIMESTAMP (NULL: True)\n\norders table structure:\n  id: INTEGER (NULL: True)\n  user_id: INTEGER (NULL: True)\n  product_name: TEXT (NULL: False)\n  quantity: INTEGER (NULL: False)\n  price: REAL (NULL: False)\n  order_date: TIMESTAMP (NULL: True)\n  status: TEXT (NULL: True)\n\nSQLite version: 3.50.4\n\n=== Testing Error Handling ===\n--- Testing Duplicate Key Error ---\n✓ Caught expected integrity error: UNIQUE constraint failed: users.username\n\n--- Testing Foreign Key Constraint ---\nNote: Foreign key constraints may not be enforced by default in SQLite\n\n--- Testing SQL Injection Protection ---\n✓ Parameterized query safely handled malicious input: 0 results\n\n=== All SQLite tests completed successfully ===\nDatabase file: /tmp/tmpqtqkg2jz.db\nKey concepts covered:\n- Database creation and table schema\n- CRUD operations (Create, Read, Update, Delete)\n- SQL JOIN queries\n- Aggregation functions (COUNT, SUM, AVG, MAX)\n- GROUP BY and data grouping\n- Transaction management (commit/rollback)\n- Prepared statements for security\n- Database metadata inspection\n- Error handling for database operations\n\nCleaned up temporary database: /tmp/tmpqtqkg2jz.db",
      "cppOutput": "Python SQLite Integration Demonstration\n==================================================\n=== Creating Sample Database ===\n✓ Database tables created successfully\n\n=== Testing Basic CRUD Operations ===\n✓ Inserted 4 users and 6 orders\n\n--- Reading Data ---\nAll users:\n  ID: 1, Username: alice, Email: alice@example.com, Age: 25\n  ID: 2, Username: bob, Email: bob@example.com, Age: 30\n  ID: 3, Username: charlie, Email: charlie@example.com, Age: 35\n  ID: 4, Username: diana, Email: diana@example.com, Age: 28\n\nAlice's details: {'id': 1, 'username': 'alice', 'email': 'alice@example.com', 'age': 25, 'created_at': 'DATE', 'updated_at': 'DATE'}\n\nUsers older than 28:\n  bob: 30 years old\n  charlie: 35 years old\n\n--- Updating Data ---\n✓ Alice's age updated to: 26\n\n--- Deleting Data ---\n✓ Remaining orders: 5\n\n=== Testing Advanced Queries ===\nUser orders (JOIN):\n\n  alice (alice@example.com):\n    - Laptop: 1 x $999.99 [completed]\n    - Mouse: 2 x $29.99 [completed]\n\n  bob (bob@example.com):\n    - Keyboard: 1 x $79.99 [pending]\n\n  charlie (charlie@example.com):\n    - Monitor: 1 x $299.99 [pending]\n\n  diana (diana@example.com):\n    - Headphones: 1 x $149.99 [pending]\n\n--- Aggregation Functions ---\nTotal users: 4\nAverage user age: 29.8\nTotal revenue: $1589.94\nMost expensive order: $999.99\n\nUser spending statistics:\n  alice: 2 orders, $1059.97 total\n  charlie: 1 orders, $299.99 total\n  diana: 1 orders, $149.99 total\n  bob: 1 orders, $79.99 total\n\n=== Testing Transactions ===\n--- Successful Transaction ---\n✓ Transaction committed successfully\n\n--- Transaction Rollback ---\n✓ Expected integrity error: UNIQUE constraint failed: users.username\n✓ Transaction was automatically rolled back\n\n=== Testing Prepared Statements ===\n✓ Inserted 3 users using prepared statement\nUsers aged 25-35: 7\n  alice: 26 years old\n  bob: 30 years old\n  diana: 28 years old\n  eve: 32 years old\n  grace: 27 years old\n  henry: 33 years old\n  iris: 29 years old\n\n=== Testing Database Metadata ===\nDatabase tables:\n  - users\n  - sqlite_sequence\n  - orders\n\nusers table structure:\n  id: INTEGER (NULL: True)\n  username: TEXT (NULL: False)\n  email: TEXT (NULL: False)\n  age: INTEGER (NULL: True)\n  created_at: TIMESTAMP (NULL: True)\n  updated_at: TIMESTAMP (NULL: True)\n\norders table structure:\n  id: INTEGER (NULL: True)\n  user_id: INTEGER (NULL: True)\n  product_name: TEXT (NULL: False)\n  quantity: INTEGER (NULL: False)\n  price: REAL (NULL: False)\n  order_date: TIMESTAMP (NULL: True)\n  status: TEXT (NULL: True)\n\nSQLite version: 3.50.4\n\n=== Testing Error Handling ===\n--- Testing Duplicate Key Error ---\n✓ Caught expected integrity error: UNIQUE constraint failed: users.username\n\n--- Testing Foreign Key Constraint ---\nNote: Foreign key constraints may not be enforced by default in SQLite\n\n--- Testing SQL Injection Protection ---\n✓ Parameterized query safely handled malicious input: 0 results\n\n=== All SQLite tests completed successfully ===\nDatabase file: /tmp/tmpqtqkg2jz.db\nKey concepts covered:\n- Database creation and table schema\n- CRUD operations (Create, Read, Update, Delete)\n- SQL JOIN queries\n- Aggregation functions (COUNT, SUM, AVG, MAX)\n- GROUP BY and data grouping\n- Transaction management (commit/rollback)\n- Prepared statements for security\n- Database metadata inspection\n- Error handling for database operations\n\nCleaned up temporary database: /tmp/tmpqtqkg2jz.db"
    },
    {
      "name": "test_standard_library_basic",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== math module ===\nmath.pi: 3.141592653589793\nmath.e: 2.718281828459045\nmath.sqrt(16): 4.0\nmath.pow(2, 3): 8.0\nmath.ceil(3.2): 4\nmath.floor(3.8): 3\nmath.sin(math.pi/2): 1.0\nmath.cos(0): 1.0\nmath.log(math.e): 1.0\nmath.log10(100): 2.0\nmath.factorial(5): 120\n\n=== random module ===\nrandom.random(): 0.6394267984578837\nrandom.randint(1, 10): 1\nrandom.uniform(1.0, 10.0): 7.673954497838496\nrandom.choice(choices): apple\nrandom.sample(numbers, 3): [2, 5, 3]\nAfter shuffle: [4, 2, 3, 5, 1]\n\n=== os module ===\nos.name: posix\nCurrent PID: 95204\nos.cpu_count(): 8\n\n=== os.path module ===\nos.path.basename(path): file.txt\nos.path.dirname(path): /home/user\nos.path.split(path): ('/home/user', 'file.txt')\nos.path.splitext('file.txt'): ('file', '.txt')\nos.path.join('dir', 'file.txt'): dir/file.txt\n\n=== sys module ===\nsys.version_info.major: 3\nsys.version_info.minor: 13\nsys.platform: linux\nsys.maxsize: 9223372036854775807\n\n=== itertools module ===\nFirst 5 from count(10, 2): [10, 12, 14, 16, 18]\nFirst 7 from cycle: ['red', 'green', 'blue', 'red', 'green', 'blue', 'red']\nrepeat('hello', 3): ['hello', 'hello', 'hello']\nchain([1,2], [3,4], [5,6]): [1, 2, 3, 4, 5, 6]\ncombinations([1,2,3,4], 2): [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\npermutations([1,2,3], 2): [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\nproduct([1,2], ['a','b']): [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]\n\n=== functools module ===\nreduce(add, [1,2,3,4,5]): 15\nreduce(mul, [1,2,3,4,5]): 120\ndouble(5) using partial: 10\nfibonacci(10): 55\nCache info: CacheInfo(hits=8, misses=11, maxsize=128, currsize=11)\n\n=== operator module ===\noperator.add(2, 3): 5\noperator.mul(4, 5): 20\noperator.sub(10, 3): 7\noperator.truediv(10, 3): 3.3333333333333335\nSorted by age: [('Charlie', 20), ('Alice', 25), ('Bob', 30)]\n\n=== statistics module ===\nmean: 5\nmedian: 5\nmode: 3\nstdev: 2.7386127875258306\nvariance: 7.5\n\n=== time module ===\nCurrent timestamp: 1760203695\nLocal time: DATE\n\n=== string module ===\nascii_lowercase: abcdefghijklmnopqrstuvwxyz\nascii_uppercase: ABCDEFGHIJKLMNOPQRSTUVWXYZ\ndigits: 0123456789\npunctuation: !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\nwhitespace: ' \\t\\n\\r\\x0b\\x0c'\nTemplate result: Hello, Alice! You are 25 years old.\n\n=== decimal module ===\nDecimal('0.1') + Decimal('0.2'): 0.3\nFloat 0.1 + 0.2: 0.30000000000000004\n\n=== fractions module ===\nFraction(1, 3) + Fraction(1, 6): 1/2\nFraction(1, 2) * 4: 2\n\n=== All standard library tests completed ===",
      "cppOutput": "=== math module ===\nmath.pi: 3.141592653589793\nmath.e: 2.718281828459045\nmath.sqrt(16): 4.0\nmath.pow(2, 3): 8.0\nmath.ceil(3.2): 4\nmath.floor(3.8): 3\nmath.sin(math.pi/2): 1.0\nmath.cos(0): 1.0\nmath.log(math.e): 1.0\nmath.log10(100): 2.0\nmath.factorial(5): 120\n\n=== random module ===\nrandom.random(): 0.6394267984578837\nrandom.randint(1, 10): 1\nrandom.uniform(1.0, 10.0): 7.673954497838496\nrandom.choice(choices): apple\nrandom.sample(numbers, 3): [2, 5, 3]\nAfter shuffle: [4, 2, 3, 5, 1]\n\n=== os module ===\nos.name: posix\nCurrent PID: 95204\nos.cpu_count(): 8\n\n=== os.path module ===\nos.path.basename(path): file.txt\nos.path.dirname(path): /home/user\nos.path.split(path): ('/home/user', 'file.txt')\nos.path.splitext('file.txt'): ('file', '.txt')\nos.path.join('dir', 'file.txt'): dir/file.txt\n\n=== sys module ===\nsys.version_info.major: 3\nsys.version_info.minor: 13\nsys.platform: linux\nsys.maxsize: 9223372036854775807\n\n=== itertools module ===\nFirst 5 from count(10, 2): [10, 12, 14, 16, 18]\nFirst 7 from cycle: ['red', 'green', 'blue', 'red', 'green', 'blue', 'red']\nrepeat('hello', 3): ['hello', 'hello', 'hello']\nchain([1,2], [3,4], [5,6]): [1, 2, 3, 4, 5, 6]\ncombinations([1,2,3,4], 2): [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\npermutations([1,2,3], 2): [(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\nproduct([1,2], ['a','b']): [(1, 'a'), (1, 'b'), (2, 'a'), (2, 'b')]\n\n=== functools module ===\nreduce(add, [1,2,3,4,5]): 15\nreduce(mul, [1,2,3,4,5]): 120\ndouble(5) using partial: 10\nfibonacci(10): 55\nCache info: CacheInfo(hits=8, misses=11, maxsize=128, currsize=11)\n\n=== operator module ===\noperator.add(2, 3): 5\noperator.mul(4, 5): 20\noperator.sub(10, 3): 7\noperator.truediv(10, 3): 3.3333333333333335\nSorted by age: [('Charlie', 20), ('Alice', 25), ('Bob', 30)]\n\n=== statistics module ===\nmean: 5\nmedian: 5\nmode: 3\nstdev: 2.7386127875258306\nvariance: 7.5\n\n=== time module ===\nCurrent timestamp: 1760203695\nLocal time: DATE\n\n=== string module ===\nascii_lowercase: abcdefghijklmnopqrstuvwxyz\nascii_uppercase: ABCDEFGHIJKLMNOPQRSTUVWXYZ\ndigits: 0123456789\npunctuation: !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\nwhitespace: ' \\t\\n\\r\\x0b\\x0c'\nTemplate result: Hello, Alice! You are 25 years old.\n\n=== decimal module ===\nDecimal('0.1') + Decimal('0.2'): 0.3\nFloat 0.1 + 0.2: 0.30000000000000004\n\n=== fractions module ===\nFraction(1, 3) + Fraction(1, 6): 1/2\nFraction(1, 2) * 4: 2\n\n=== All standard library tests completed ==="
    },
    {
      "name": "test_strings",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Concatenated: Hello, World! How are you?\nFull name: First Alice\n\nString methods:\nUppercase: HELLO, WORLD!\nLowercase: hello, world!\nStrip spaces: spaces\nReplace: Hello, Python!\nSplit: ['Hello', ' World!']\nJoin: a-b-c\n\nString formatting:\nName: Alice, Number: 42\nName: Alice, Number: 42\nName: Alice, Number: 42\n\nString slicing:\nFirst 6 chars: Python\nLast 11 chars: Programming\nMiddle: Programming\n\nString operations:\nLength: 13\nContains 'World': True\nStarts with 'Hello': True\nEnds with '!': True\n\nMultiline string:\nThis is a\nmultiline string\nwith multiple lines",
      "cppOutput": "Concatenated: Hello, World! How are you?\nFull name: First Alice\n\nString methods:\nUppercase: HELLO, WORLD!\nLowercase: hello, world!\nStrip spaces: spaces\nReplace: Hello, Python!\nSplit: ['Hello', ' World!']\nJoin: a-b-c\n\nString formatting:\nName: Alice, Number: 42\nName: Alice, Number: 42\nName: Alice, Number: 42\n\nString slicing:\nFirst 6 chars: Python\nLast 11 chars: Programming\nMiddle: Programming\n\nString operations:\nLength: 13\nContains 'World': True\nStarts with 'Hello': True\nEnds with '!': True\n\nMultiline string:\nThis is a\nmultiline string\nwith multiple lines"
    },
    {
      "name": "test_testing_frameworks",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python Testing Frameworks Demonstration\n==================================================\n=== Demonstrating unittest basics ===\nSetting up test class\nSetting up test: test_addition\nTearing down test: test_addition\nSetting up test: test_division\nTearing down test: test_division\nSetting up test: test_division_by_zero\nTearing down test: test_division_by_zero\nSetting up test: test_multiplication\nTearing down test: test_multiplication\nSetting up test: test_string_assertions\nTearing down test: test_string_assertions\nTearing down test class\n\n=== Demonstrating mocking techniques ===\n\n=== Demonstrating parameterized testing ===\n\n=== Demonstrating test fixtures ===\n\n=== Demonstrating performance testing ===\n\n=== Demonstrating test organization ===\n\nRunning TestMathOperations:\nTests run: 2\nFailures: 0\nErrors: 0\n\nRunning TestStringOperations:\nTests run: 2\nFailures: 0\nErrors: 0\n\n=== Demonstrating pytest-style testing concepts ===\n\nPyTest style examples (conceptual):\n\n# test_calculator.py\nimport pytest\nfrom calculator import Calculator\n\n@pytest.fixture\ndef calculator():\n    return Calculator()\n\n@pytest.mark.parametrize(\"a,b,expected\", [\n    (2, 3, 5),\n    (10, 5, 15),\n    (-1, 1, 0),\n    (0, 0, 0),\n])\ndef test_add(calculator, a, b, expected):\n    assert calculator.add(a, b) == expected\n\n@pytest.mark.slow\ndef test_performance():\n    # 性能测试\n    result = sum(range(1000000))\n    assert result == 499999500000\n\n# 运行测试\n# pytest -v                    # 详细输出\n# pytest -k \"test_add\"         # 运行特定测试\n# pytest -m \"not slow\"         # 运行非慢速测试\n# pytest --cov=myproject       # 代码覆盖率\n\n\n=== Testing demonstration completed ===\nBasic tests passed: True\nMock tests passed: True\n\nRunning full test suite...",
      "cppOutput": "Python Testing Frameworks Demonstration\n==================================================\n=== Demonstrating unittest basics ===\nSetting up test class\nSetting up test: test_addition\nTearing down test: test_addition\nSetting up test: test_division\nTearing down test: test_division\nSetting up test: test_division_by_zero\nTearing down test: test_division_by_zero\nSetting up test: test_multiplication\nTearing down test: test_multiplication\nSetting up test: test_string_assertions\nTearing down test: test_string_assertions\nTearing down test class\n\n=== Demonstrating mocking techniques ===\n\n=== Demonstrating parameterized testing ===\n\n=== Demonstrating test fixtures ===\n\n=== Demonstrating performance testing ===\n\n=== Demonstrating test organization ===\n\nRunning TestMathOperations:\nTests run: 2\nFailures: 0\nErrors: 0\n\nRunning TestStringOperations:\nTests run: 2\nFailures: 0\nErrors: 0\n\n=== Demonstrating pytest-style testing concepts ===\n\nPyTest style examples (conceptual):\n\n# test_calculator.py\nimport pytest\nfrom calculator import Calculator\n\n@pytest.fixture\ndef calculator():\n    return Calculator()\n\n@pytest.mark.parametrize(\"a,b,expected\", [\n    (2, 3, 5),\n    (10, 5, 15),\n    (-1, 1, 0),\n    (0, 0, 0),\n])\ndef test_add(calculator, a, b, expected):\n    assert calculator.add(a, b) == expected\n\n@pytest.mark.slow\ndef test_performance():\n    # 性能测试\n    result = sum(range(1000000))\n    assert result == 499999500000\n\n# 运行测试\n# pytest -v                    # 详细输出\n# pytest -k \"test_add\"         # 运行特定测试\n# pytest -m \"not slow\"         # 运行非慢速测试\n# pytest --cov=myproject       # 代码覆盖率\n\n\n=== Testing demonstration completed ===\nBasic tests passed: True\nMock tests passed: True\n\nRunning full test suite..."
    },
    {
      "name": "test_tuples",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Tuple Creation ===\nEmpty tuple: ()\nSingle tuple: (1,)\nPair tuple: (1, 2)\nMulti tuple: (1, 2, 3, 4, 5)\nMixed tuple: (1, 'hello', 3.14, True)\nTuple without parens: (1, 2, 3, 4)\n\n=== Tuple Indexing and Slicing ===\nFirst element: 0\nLast element: 9\nSlice [2:5]: (2, 3, 4)\nSlice [:3]: (0, 1, 2)\nSlice [5:]: (5, 6, 7, 8, 9)\nSlice [::2]: (0, 2, 4, 6, 8)\nSlice [::-1]: (9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n\n=== Tuple Unpacking ===\nx = 10, y = 20\na = 1, b = 2, c = 3\nAfter swap: a = 2, b = 1\nNested unpacking: a=1, b=2, c=3, d=4\n\n=== Tuple Operations ===\nConcatenation: (1, 2, 3, 4, 5, 6)\nRepetition: (1, 2, 3, 1, 2, 3, 1, 2, 3)\nLength of tuple1: 3\n2 in tuple1: True\n10 in tuple1: False\n\n=== Tuple Methods ===\nCount of 2: 3\nIndex of 3: 2\nIndex of first 2: 1\n\n=== Tuples as Dictionary Keys ===\nLocation at (0, 0): origin\nLocation at (1, 0): east\n\n=== Nested Tuples ===\nMatrix: ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nElement [1][2]: 6\n\n=== Tuple Comparison ===\nt1 == t2: True\nt1 == t3: False\nt1 < t3: True\n\n=== Type Conversion ===\nList to tuple: (1, 2, 3, 4)\nTuple to list: [1, 2, 3, 4]\n\n=== All tuple tests completed ===",
      "cppOutput": "=== Tuple Creation ===\nEmpty tuple: ()\nSingle tuple: (1,)\nPair tuple: (1, 2)\nMulti tuple: (1, 2, 3, 4, 5)\nMixed tuple: (1, 'hello', 3.14, True)\nTuple without parens: (1, 2, 3, 4)\n\n=== Tuple Indexing and Slicing ===\nFirst element: 0\nLast element: 9\nSlice [2:5]: (2, 3, 4)\nSlice [:3]: (0, 1, 2)\nSlice [5:]: (5, 6, 7, 8, 9)\nSlice [::2]: (0, 2, 4, 6, 8)\nSlice [::-1]: (9, 8, 7, 6, 5, 4, 3, 2, 1, 0)\n\n=== Tuple Unpacking ===\nx = 10, y = 20\na = 1, b = 2, c = 3\nAfter swap: a = 2, b = 1\nNested unpacking: a=1, b=2, c=3, d=4\n\n=== Tuple Operations ===\nConcatenation: (1, 2, 3, 4, 5, 6)\nRepetition: (1, 2, 3, 1, 2, 3, 1, 2, 3)\nLength of tuple1: 3\n2 in tuple1: True\n10 in tuple1: False\n\n=== Tuple Methods ===\nCount of 2: 3\nIndex of 3: 2\nIndex of first 2: 1\n\n=== Tuples as Dictionary Keys ===\nLocation at (0, 0): origin\nLocation at (1, 0): east\n\n=== Nested Tuples ===\nMatrix: ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nElement [1][2]: 6\n\n=== Tuple Comparison ===\nt1 == t2: True\nt1 == t3: False\nt1 < t3: True\n\n=== Type Conversion ===\nList to tuple: (1, 2, 3, 4)\nTuple to list: [1, 2, 3, 4]\n\n=== All tuple tests completed ==="
    },
    {
      "name": "test_type_hints_data",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Type Hints Test ===\nName: Alice, Age: 25\nScores: [90, 85, 95]\nPerson data: {'name': 'Bob', 'age': 30}\nOptional name: Charlie\nMixed data: [1, 2, 3]\n\n=== Generics Test ===\nInt box: 42\nStr box: Hello\nPair: (first, 2)\nFirst item: 1\nFirst item: a\n\n=== Data Classes Test ===\nPoint 1: Point(x=3.5, y=4.2)\nPoint 2: Point(x=1.0, y=2.0)\nRectangle: Rectangle(width=5.0, height=3.0, position=Point(x=0, y=0), color='blue', area=15.0)\nRectangle area: 15.0\nImmutable person: ImmutablePerson(name='Alice', age=25, email='alice@example.com')\n\n=== Enums Test ===\nRed color: Color.RED\nRed value: #FF0000\nCurrent status: Status.IN_PROGRESS\nStatus name: IN_PROGRESS\nStatus value: 2\nAll statuses:\n  PENDING: 1\n  IN_PROGRESS: 2\n  COMPLETED: 3\n  FAILED: 4\n\n=== Protocols Test ===\nCircle area: 78.53975\nDrawing circle with radius 5.0\n\n=== TypedDict Test ===\nPerson: {'name': 'Alice', 'age': 25, 'email': 'alice@example.com', 'active': True}\nPerson name: Alice\nPerson age: 25\n\n=== Abstract Classes Test ===\nSound: Woof!\nMovement: Running on four legs\nSound: Meow!\nMovement: Walking gracefully\n\n=== Advanced Types Test ===\nAdd: 8\nMultiply: 10.0\nApply function result: 30\nSquared numbers: [1, 4, 9, 16, 25]\nCount of 2: 3\n\n=== Literal Types Test ===\nSet status: Status set to active\nSet status: Status set to inactive\nMax retries: 3\nDefault timeout: 30.0\n\n=== Complex Types Test ===\nConfig: {'max_connections': 10, 'timeout': 30.5, 'debug_mode': True, 'allowed_hosts': ['localhost', '127.0.0.1']}\nProcessed data: ['HELLO', 'WORLD', 'TEST']\n\n=== Union and Optional Types Test ===\nProcess int: Integer: 42\nProcess str: String: hello\nProcess None: None\nFind 3: 2\nFind 10: None\n\n=== All type hints and data tests passed! ===",
      "cppOutput": "=== Type Hints Test ===\nName: Alice, Age: 25\nScores: [90, 85, 95]\nPerson data: {'name': 'Bob', 'age': 30}\nOptional name: Charlie\nMixed data: [1, 2, 3]\n\n=== Generics Test ===\nInt box: 42\nStr box: Hello\nPair: (first, 2)\nFirst item: 1\nFirst item: a\n\n=== Data Classes Test ===\nPoint 1: Point(x=3.5, y=4.2)\nPoint 2: Point(x=1.0, y=2.0)\nRectangle: Rectangle(width=5.0, height=3.0, position=Point(x=0, y=0), color='blue', area=15.0)\nRectangle area: 15.0\nImmutable person: ImmutablePerson(name='Alice', age=25, email='alice@example.com')\n\n=== Enums Test ===\nRed color: Color.RED\nRed value: #FF0000\nCurrent status: Status.IN_PROGRESS\nStatus name: IN_PROGRESS\nStatus value: 2\nAll statuses:\n  PENDING: 1\n  IN_PROGRESS: 2\n  COMPLETED: 3\n  FAILED: 4\n\n=== Protocols Test ===\nCircle area: 78.53975\nDrawing circle with radius 5.0\n\n=== TypedDict Test ===\nPerson: {'name': 'Alice', 'age': 25, 'email': 'alice@example.com', 'active': True}\nPerson name: Alice\nPerson age: 25\n\n=== Abstract Classes Test ===\nSound: Woof!\nMovement: Running on four legs\nSound: Meow!\nMovement: Walking gracefully\n\n=== Advanced Types Test ===\nAdd: 8\nMultiply: 10.0\nApply function result: 30\nSquared numbers: [1, 4, 9, 16, 25]\nCount of 2: 3\n\n=== Literal Types Test ===\nSet status: Status set to active\nSet status: Status set to inactive\nMax retries: 3\nDefault timeout: 30.0\n\n=== Complex Types Test ===\nConfig: {'max_connections': 10, 'timeout': 30.5, 'debug_mode': True, 'allowed_hosts': ['localhost', '127.0.0.1']}\nProcessed data: ['HELLO', 'WORLD', 'TEST']\n\n=== Union and Optional Types Test ===\nProcess int: Integer: 42\nProcess str: String: hello\nProcess None: None\nFind 3: 2\nFind 10: None\n\n=== All type hints and data tests passed! ==="
    },
    {
      "name": "test_unpacking",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "=== Basic Unpacking ===\na=1, b=2\nx=1, y=2, z=3\na=a, b=b, c=c\n\n=== Nested Unpacking ===\na=1, b=2, c=3, d=4\nx=1, y=2, z=3, w=4, v=5\n\n=== Extended Unpacking ===\nfirst=1, rest=[2, 3, 4, 5]\nfirst=1, middle=[2, 3, 4], last=5\na=1, b=2, rest=[3, 4, 5]\nhead=[1, 2, 3, 4], tail=5\nfirst=1, middle=[2, 3, 4], second_last=5, last=6\n\n=== Unpacking Strings ===\nfirst=h, middle=['e', 'l', 'l'], last=o\n\n=== Unpacking in Function Calls ===\nadd_three(*[1,2,3]) = 6\ngreet(**person) = Hello Alice, you are 25 years old\n\n=== Multiple Unpacking ===\nCombined list: [1, 2, 3, 4, 5, 6]\nCombined dict: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n=== Unpacking in Comprehensions ===\nSums: [3, 7, 11]\n\n=== Unpacking with enumerate ===\nIndex 0: hello\nIndex 1: world\nIndex 2: python\n\n=== Unpacking with zip ===\nAlice is 25\nBob is 30\nCharlie is 35\n\n=== Unpacking in For Loops ===\nNumber: 1, Character: a\nNumber: 2, Character: b\nNumber: 3, Character: c\n\n=== Ignoring Values ===\na=1, c=3 (ignored middle value)\nfirst=1, last=5 (ignored middle values)\n\n=== All unpacking tests completed ===",
      "cppOutput": "=== Basic Unpacking ===\na=1, b=2\nx=1, y=2, z=3\na=a, b=b, c=c\n\n=== Nested Unpacking ===\na=1, b=2, c=3, d=4\nx=1, y=2, z=3, w=4, v=5\n\n=== Extended Unpacking ===\nfirst=1, rest=[2, 3, 4, 5]\nfirst=1, middle=[2, 3, 4], last=5\na=1, b=2, rest=[3, 4, 5]\nhead=[1, 2, 3, 4], tail=5\nfirst=1, middle=[2, 3, 4], second_last=5, last=6\n\n=== Unpacking Strings ===\nfirst=h, middle=['e', 'l', 'l'], last=o\n\n=== Unpacking in Function Calls ===\nadd_three(*[1,2,3]) = 6\ngreet(**person) = Hello Alice, you are 25 years old\n\n=== Multiple Unpacking ===\nCombined list: [1, 2, 3, 4, 5, 6]\nCombined dict: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\n=== Unpacking in Comprehensions ===\nSums: [3, 7, 11]\n\n=== Unpacking with enumerate ===\nIndex 0: hello\nIndex 1: world\nIndex 2: python\n\n=== Unpacking with zip ===\nAlice is 25\nBob is 30\nCharlie is 35\n\n=== Unpacking in For Loops ===\nNumber: 1, Character: a\nNumber: 2, Character: b\nNumber: 3, Character: c\n\n=== Ignoring Values ===\na=1, c=3 (ignored middle value)\nfirst=1, last=5 (ignored middle values)\n\n=== All unpacking tests completed ==="
    },
    {
      "name": "test_web_development",
      "group": "Other",
      "success": true,
      "error": null,
      "pythonOutput": "Python Web Development Testing\n==================================================\n=== Testing Simple HTTP Server ===\nFetching: http://localhost:8080/tmpcq9x8290.html\nResponse status: 200\nContent length: 251 bytes\nFirst 200 characters of content:\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Test Page</title>\n    </head>\n    <body>\n        <h1>Hello from Python HTTP Server!</h1>\n        <p>This is a test page served by Python's bui\n\n=== Testing REST API Server ===\n\n--- Testing GET /api/users ---\nFound 3 users:\n  ID: 1, Name: Alice Updated, Age: 31\n  ID: 3, Name: Charlie, Age: 35\n  ID: 4, Name: Eve, Age: 28\n\n--- Testing GET /api/users/1 ---\nUser 1: {'id': 1, 'name': 'Alice Updated', 'age': 31}\n\n--- Testing POST /api/users ---\nCreated new user: {'id': 4, 'name': 'Eve', 'age': 28}\n\n--- Testing PUT /api/users/1 ---\nUpdated user: {'id': 1, 'name': 'Alice Updated', 'age': 31}\n\n--- Testing DELETE /api/users/2 ---\nDELETE request failed: HTTP Error 404: User not found\n\n--- Final user list ---\nFinal users (3 total):\n  ID: 1, Name: Alice Updated, Age: 31\n  ID: 3, Name: Charlie, Age: 35\n  ID: 4, Name: Eve, Age: 28\n\n=== Testing urllib Operations ===\n\n--- Testing GET https://httpbin.org/get ---\nStatus: 200\nContent-Type: unknown\nContent length: 278 bytes\nJSON response preview:\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept-Encoding\": \"identity\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"Python-urllib/3.13\",\n    \"X-Amzn-Trace-Id\": \"Root=1-68ea93b4-4fcae6ba2362a05206a96dfc\"\n  },\n  \"origin\": \"114.248.127.192\",\n  \"url\": \"https://httpbin.org/get\"\n}\n\n--- Testing GET https://jsonplaceholder.typicode.com/posts/1 ---\nStatus: 200\nContent-Type: unknown\nContent length: 292 bytes\nJSON response preview:\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n\n=== Testing URL Manipulation ===\nOriginal URL: https://example.com:8080/path/to/resource?param1=value1&param2=value2#fragment\nScheme: https\nNetloc: example.com:8080\nPath: /path/to/resource\nParams: \nQuery: param1=value1&param2=value2\nFragment: fragment\nParsed query parameters: {'param1': ['value1'], 'param2': ['value2']}\n\nConstructed URL: https://api.example.com/users/123?format=json&fields=name%2Cemail&limit=10\n\n=== All web development tests completed ===\n\nNote: HTTP servers were started in daemon threads.\nReal-world applications would use proper web frameworks like Flask, Django, or FastAPI.",
      "cppOutput": "Python Web Development Testing\n==================================================\n=== Testing Simple HTTP Server ===\nFetching: http://localhost:8080/tmpcq9x8290.html\nResponse status: 200\nContent length: 251 bytes\nFirst 200 characters of content:\n\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Test Page</title>\n    </head>\n    <body>\n        <h1>Hello from Python HTTP Server!</h1>\n        <p>This is a test page served by Python's bui\n\n=== Testing REST API Server ===\n\n--- Testing GET /api/users ---\nFound 3 users:\n  ID: 1, Name: Alice Updated, Age: 31\n  ID: 3, Name: Charlie, Age: 35\n  ID: 4, Name: Eve, Age: 28\n\n--- Testing GET /api/users/1 ---\nUser 1: {'id': 1, 'name': 'Alice Updated', 'age': 31}\n\n--- Testing POST /api/users ---\nCreated new user: {'id': 4, 'name': 'Eve', 'age': 28}\n\n--- Testing PUT /api/users/1 ---\nUpdated user: {'id': 1, 'name': 'Alice Updated', 'age': 31}\n\n--- Testing DELETE /api/users/2 ---\nDELETE request failed: HTTP Error 404: User not found\n\n--- Final user list ---\nFinal users (3 total):\n  ID: 1, Name: Alice Updated, Age: 31\n  ID: 3, Name: Charlie, Age: 35\n  ID: 4, Name: Eve, Age: 28\n\n=== Testing urllib Operations ===\n\n--- Testing GET https://httpbin.org/get ---\nStatus: 200\nContent-Type: unknown\nContent length: 278 bytes\nJSON response preview:\n{\n  \"args\": {},\n  \"headers\": {\n    \"Accept-Encoding\": \"identity\",\n    \"Host\": \"httpbin.org\",\n    \"User-Agent\": \"Python-urllib/3.13\",\n    \"X-Amzn-Trace-Id\": \"Root=1-68ea93b4-4fcae6ba2362a05206a96dfc\"\n  },\n  \"origin\": \"114.248.127.192\",\n  \"url\": \"https://httpbin.org/get\"\n}\n\n--- Testing GET https://jsonplaceholder.typicode.com/posts/1 ---\nStatus: 200\nContent-Type: unknown\nContent length: 292 bytes\nJSON response preview:\n{\n  \"userId\": 1,\n  \"id\": 1,\n  \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n  \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n}\n\n=== Testing URL Manipulation ===\nOriginal URL: https://example.com:8080/path/to/resource?param1=value1&param2=value2#fragment\nScheme: https\nNetloc: example.com:8080\nPath: /path/to/resource\nParams: \nQuery: param1=value1&param2=value2\nFragment: fragment\nParsed query parameters: {'param1': ['value1'], 'param2': ['value2']}\n\nConstructed URL: https://api.example.com/users/123?format=json&fields=name%2Cemail&limit=10\n\n=== All web development tests completed ===\n\nNote: HTTP servers were started in daemon threads.\nReal-world applications would use proper web frameworks like Flask, Django, or FastAPI."
    }
  ]
}