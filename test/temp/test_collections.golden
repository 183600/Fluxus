=== Counter ===
Words: ['apple', 'banana', 'apple', 'cherry', 'banana', 'apple', 'date']
Word counts: Counter({'apple': 3, 'banana': 2, 'cherry': 1, 'date': 1})
Most common: [('apple', 3), ('banana', 2)]

Counter1: Counter({'a': 2, 'b': 1, 'c': 1})
Counter2: Counter({'b': 2, 'a': 1, 'd': 1})
Addition: Counter({'a': 3, 'b': 3, 'c': 1, 'd': 1})
Subtraction: Counter({'a': 1, 'c': 1})
Intersection: Counter({'a': 1, 'b': 1})
Union: Counter({'a': 2, 'b': 2, 'c': 1, 'd': 1})

=== DefaultDict ===
Words grouped by length: {3: ['cat', 'dog', 'rat'], 8: ['elephant'], 5: ['mouse']}

Character counts: {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}

Words by first letter: {'a': {'ant', 'apple'}, 'b': {'ball', 'banana'}, 'c': {'cherry'}}

=== OrderedDict ===
Ordered dict: OrderedDict({'first': 1, 'second': 2, 'third': 3})
Keys in order: ['first', 'second', 'third']
After moving 'first' to end: ['second', 'third', 'first']
After moving 'second' to front: ['second', 'third', 'first']
Popped last item: ('first', 1)
Remaining: ['second', 'third']

=== Deque ===
Original deque: deque([1, 2, 3, 4, 5])
After append(6) and appendleft(0): deque([0, 1, 2, 3, 4, 5, 6])
Popped right: 6, left: 0
After pops: deque([1, 2, 3, 4, 5])
After extend([7,8,9]) and extendleft([-1,-2]): deque([-2, -1, 1, 2, 3, 4, 5, 7, 8, 9])
After rotate(2): deque([8, 9, -2, -1, 1, 2, 3, 4, 5, 7])
After rotate(-1): deque([9, -2, -1, 1, 2, 3, 4, 5, 7, 8])
After clear: deque([])

=== NamedTuple ===
Person1: Person(name='Alice', age=30, city='New York')
Person2: Person(name='Bob', age=25, city='Los Angeles')
Student: Student(name='Charlie', student_id='S123', grades=[90, 85, 95])

Person1 name: Alice
Person1 age: 30
Person1[0]: Alice
Person1[1]: 30
Person1 as dict: {'name': 'Alice', 'age': 30, 'city': 'New York'}
Updated person: Person(name='Alice', age=31, city='New York')

=== Heap Operations ===
Heapified list: [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]
After pushing 0 and 7: [0, 1, 1, 3, 3, 2, 4, 6, 5, 5, 5, 9, 7]
Smallest: 0, Second smallest: 1
After pops: [1, 3, 2, 3, 5, 7, 4, 6, 5, 5, 9]
3 smallest items: [1, 2, 3]
3 largest items: [9, 7, 6]

=== ChainMap ===
ChainMap: ChainMap({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})
Keys: ['c', 'd', 'b', 'a']
Values: [4, 6, 2, 1]
Value of 'a': 1
Value of 'b': 2
Value of 'c': 4
Value of 'd': 6

New chain with new mapping: ChainMap({'e': 7, 'a': 10}, {'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})
Value of 'a' in new chain: 10