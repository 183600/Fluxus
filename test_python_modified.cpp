// Generated by HyperStatic/CXX Compiler
#include <tuple>
#include <sstream>
#include <algorithm>
#include <memory>
#include <vector>
#include <string>
#include <iostream>
#include <stdexcept>

auto add(auto a, auto b) {
    return a + b;
}

int main(int argc, char* argv[]) {
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <a> <b>" << std::endl;
        return 1;
    }
    
    try {
        // Parse arguments
        std::string arg1 = argv[1];
        std::string arg2 = argv[2];
        
        // Try to convert to integers first
        size_t pos1 = 0, pos2 = 0;
        try {
            int a = std::stoi(arg1, &pos1);
            int b = std::stoi(arg2, &pos2);
            // Check if the entire string was consumed
            if (pos1 == arg1.length() && pos2 == arg2.length()) {
                int result = add(a, b);
                std::cout << result << std::endl;
                return 0;
            }
        } catch (const std::invalid_argument&) {
            // Not integers, continue to try doubles
        } catch (const std::out_of_range&) {
            // Out of range for integers, continue to try doubles
        }
        
        // Try as doubles
        try {
            double a = std::stod(arg1);
            double b = std::stod(arg2);
            double result = add(a, b);
            std::cout << result << std::endl;
            return 0;
        } catch (const std::exception&) {
            throw std::invalid_argument("Invalid numeric values");
        }
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
}